console.log('hello!')
var suggestions = document.getElementById('suggestions');
var search = document.getElementById('search');

if (search !== null) {
  document.addEventListener('keydown', inputFocus);
}

function inputFocus(e) {
  if (e.ctrlKey && e.key === '/' ) {
    e.preventDefault();
    search.focus();
  }
  if (e.key === 'Escape' ) {
    search.blur();
    suggestions.classList.add('d-none');
  }
}

document.addEventListener('click', function(event) {

  var isClickInsideElement = suggestions.contains(event.target);

  if (!isClickInsideElement) {
    suggestions.classList.add('d-none');
  }

});

/*
Source:
  - https://dev.to/shubhamprakash/trap-focus-using-javascript-6a3
*/

document.addEventListener('keydown',suggestionFocus);

function suggestionFocus(e) {
  const suggestionsHidden = suggestions.classList.contains('d-none');
  if (suggestionsHidden) return;

  const focusableSuggestions= [...suggestions.querySelectorAll('a')];
  if (focusableSuggestions.length === 0) return;

  const index = focusableSuggestions.indexOf(document.activeElement);

  if (e.key === "ArrowUp") {
    e.preventDefault();
    const nextIndex = index > 0 ? index - 1 : 0;
    focusableSuggestions[nextIndex].focus();
  }
  else if (e.key === "ArrowDown") {
    e.preventDefault();
    const nextIndex= index + 1 < focusableSuggestions.length ? index + 1 : index;
    focusableSuggestions[nextIndex].focus();
  }

}

/*
Source:
  - https://github.com/nextapps-de/flexsearch#index-documents-field-search
  - https://raw.githack.com/nextapps-de/flexsearch/master/demo/autocomplete.html
*/

(function(){

  var index = new FlexSearch.Document({
    tokenize: "forward",
    cache: 100,
    document: {
      id: 'id',
      store: [
        "href", "title", "description"
      ],
      index: ["title", "description", "content"]
    }
  });


  // Not yet supported: https://github.com/nextapps-de/flexsearch#complex-documents

  /*
  var docs = [
    ];
  */

  // https://discourse.gohugo.io/t/range-length-or-last-element/3803/2

  index.add(
    {
        id: 0,
        href: "/tutorials/atmosphere-pro/",
        title: "atmosphere pro",
        description: "Learn how the Atsign atmosphere pro app works on the atPlatform",
        content: "Under construction\n"
      })
      .add(
      {
        id: 1,
        href: "/start/flutter/",
        title: "Flutter",
        description: "Get started with developing atPlatform apps using Flutter SDK.\n",
        content: "Setting Up Your Development Environment #\r1. Get an editor for programming in Dart #\rSome editors we recommend:\n Visual Studio Code Android Studio  2. Install Flutter/Dart on your machine #\rSee Flutter\u0026rsquo;s instructions on getting the Flutter environment setup:\n MacOS Windows Linux  3. Install at_app #\rat_app is a command-line tool for quickly creating atPlatform apps. It is similar to flutter create but adds atPlatform capabilities to your flutter apps. See our video on at_app.\n4. Create an atPlatform app #\rCreate an atPlatform app by using at_app:\n at_app create \u0026lt;dir\u0026gt; cd \u0026lt;dir\u0026gt; flutter run  "
      })
      .add(
      {
        id: 2,
        href: "/atplatform/atplatformoverview/",
        title: "Overview",
        description: "Overview of the atPlatform",
        content: "The atPlatform is designed to help developers create end-to-end encrypted mobile applications. A full stack platform written in Dart and Flutter, it includes a wide range of libraries, services and widgets specifically designed for creating privacy-first applications on any platform.\nWe have also build an SDK to make all of this super simple for developers so that you can get your IoT devices and Flutter apps up and running in no time.\n"
      })
      .add(
      {
        id: 3,
        href: "/contribute/this-site/shortcodes/",
        title: "Shortcodes Tutorial",
        description: "atsign.dev shortcodes tutorial",
        content: ""
      })
      .add(
      {
        id: 4,
        href: "/contribute/this-site/style-guide/",
        title: "Style Guide",
        description: "Style guide for contributing to atsign.dev",
        content: "Layouts #\rIn addition to Hugo\u0026rsquo;s default list \u0026amp; single layouts, the docs section also supports codelab-list \u0026amp; codelab-single. Their inner workings are explained in the frontmatter section.\nFrontmatter #\r   Property Supported Layouts Description     title ALL Title of the page   layout ALL Hugo layout of the page   lead ALL except codelab-step A lead to show below the title, this should be short and serves to provide a little more context to the title.   description ALL SEO description for the page, this should be descriptive of the content for the page, and include keywords that represent both the content \u0026amp; the overall site\u0026rsquo;s purpose.   draft ALL Whether this page is a draft or not, if true, this page will not be built on the production site.   toc docs/single, docs/list Whether this page should generate a table of contents from headers.   autolinks docs/list Whether this page should automatically generate links for sub-pages.   weight ALL except codelab-step Used to order content in navigation   doneLink codelab-list Where to send the visitor if they press \u0026lsquo;done\u0026rsquo; at the end of the codelab.   exitLink codelab-list Where to send the visitor if they press \u0026rsquo;exit codelab\u0026rsquo;.   order codelab-single Used to order steps in a codelab, similar to \u0026lsquo;weight\u0026rsquo; property.    Content #\r No HTML in markdown content files.\nHTML shall be written in /layouts/ for the purposes of maintaining consistency across all other pages. Keep things consistent across sections.\nContent pages within a section should be written such that they match the format of other content within the section. There may be some exceptions, but keep this in mind when contributing. Examples should be clear and concise.\nMake sure to use examples that are accurate to the topic, and are easy to understand. File names should be concise and prioritize \u0026lsquo;-\u0026rsquo; over \u0026lsquo;\u0026rsquo; We\u0026rsquo;ve opted to use \u0026lsquo;-\u0026rsquo; instead of \u0026lsquo;\u0026rsquo; in link names to keep things consistent.\nThe only exception to this is when \u0026lsquo;_\u0026rsquo; is part of a name, like in \u0026lsquo;at_server\u0026rsquo;, this also allows us to distinguish between names and spaces in the url.\nLinks should be as pretty as possible for sharing purposes.  Building Layouts #\r Use bootstrap for styling where available.\nAll styling should be done in bootstrap, unless it is unable to achieve what you are after. Ensure compatibility when writing custom styles and layouts. This includes compatibility for dark/light modes, various screen sizes, and has good browser support.  JavaScript #\rThis site is using purgeCSS for the staging and production builds. If you write JavaScript that modifies the DOM in any way, ensure that all style selectors are added to the safelist in config/postcss.config.js.\nAssets #\r External assets and images should be stored in the static folder.\nSite-only images should be stored at page level where possible, or in the assets folder if it is used in multiple places across the site. See here for more information. Use FontAwesome for icons.  Reference #\rIf you want to add your own definition/topic to the reference section, please adhere to the following guidelines.\n Follow all rules in Content Copy the docs-reference-single.md archetype and use it in /reference/ when you make your own page. Ensure toc property to true. (See Frontmatter) Use ## markdown headings for main titles on the page and ### and #### for any sub headings. For links, use markdown (e.g. [here](https://atsign.com)) or the anchor tag (a) shortcode. For canonical links, be sure to use the anchor tag (a) shortcode for better SEO.  "
      })
      .add(
      {
        id: 5,
        href: "/",
        title: "Welcome to the atPlatform Documentation",
        description: "Documentation for the atPlatform.\n",
        content: "What is Atsign?\n   I want to\u0026hellip; #\r   Get Started Start with Flutter, Java, or IoT development\n      Learn the SDK See our SDK Documentation here\n       Learn the Platform See our infrastructure overview here\n      Follow a Tutorial Find specific tutorials on our tech here\n    Featured Tutorials #\rSSH no ports SSH to remote machines without opening inbound connections\n   atDude Send an end-to-end encrypted duuuuuuude to your friends\n    dess - AWS Host your own secondary server on Amazon Web Services\n   dess - GCP Host your own secondary server on Google Cloud Platform\n    "
      })
      .add(
      {
        id: 6,
        href: "/atplatform/architecture/",
        title: "Architecture",
        description: "Architectural overview of the atPlatform",
        content: "The picture below provides a great way to visualize just how much thought has gone into making the life of a developer on the atPlatform that much easier!\nIf you\u0026rsquo;re wondering what the difference between what the atPlatform consists of and what the atProtocol consists of, look no further!\nThe atPlatform, which has been created on top of the atProtocol consists of three major segments of developer tools. These segments consists of; Services, Libraries, and Widgets\n"
      })
      .add(
      {
        id: 7,
        href: "/tutorials/at-dude/",
        title: "atDude Tutorial",
        description: "Learn how to build production app on the atPlatform",
        content: ""
      })
      .add(
      {
        id: 8,
        href: "/sdk/flutter/",
        title: "Flutter",
        description: "Learn how to use the atPlatform Flutter SDK",
        content: ""
      })
      .add(
      {
        id: 9,
        href: "/sdk/java/",
        title: "Java",
        description: "Learn how to use the atPlatform Java SDK",
        content: ""
      })
      .add(
      {
        id: 10,
        href: "/start/java/",
        title: "Java",
        description: "Get started with developing atPlatform apps using Java SDK.\n",
        content: "Setting Up Your Development Environment #\r1. Install Java #\rThe first step in getting your developer environment ready, is to install Java 8 or higher on your local machine.\n2. Install Maven #\rNext step is to install maven and add it to your PATH. Maven is a great tool for managing Java projects and will be useful for development atPlatform applications.\n3. Clone the Java Client #\rFork our at_java repository Create a new directory on your local machine where you want the java client source code to live. Change directory (cd) into this directory and git clone your fork. Git clone: git clone \u0026lt;your_fork_url\u0026gt; so that the source code is on your local machine.\n4. Build at_java/at_client #\rCompile at_java/at_client:\n Ensure you are in the at_client directory: cd at_java/at_client. Run mvn install You should see [INFO] BUILD SUCCESS  Registration CLI #\r  Be sure you\u0026rsquo;ve fully set up your development environment. Also ensure you\u0026rsquo;ve built and deployed the project by running mvn install under the at_java/at_client directory.\n  Our next step is to run the Register.java CLI to register a new atSign will be onboarded and a set of .atKeys will be generated. You can do this by running:\n  Linux\njava -cp \u0026#34;target/client-1.0-SNAPSHOT.jar:target/lib/*\u0026#34; org.atsign.client.cli.Register \u0026lt;email@email.com\u0026gt; Windows\njava -cp \u0026#34;target/client-1.0-SNAPSHOT.jar;target/lib/*\u0026#34; org.atsign.client.cli.Register \u0026lt;email@email.com\u0026gt; If successful, the output should be similar:  Getting free atsign Got atsign: @64husky26 Sending one-time-password to :\u0026lt;email@email.com\u0026gt; Got response: Sent Successfully Enter OTP received on: \u0026lt;email@email.com\u0026gt; You will get a OTP (one-time password) in your entered email. Be sure to enter the OTP as received because it is case-sensitive. If successful, output should be similar to as follows:  xxxx Validating one-time-password Got response: Verified IMPORTANT: There will be a newly generated .atKeys file for your new atSign in ~/.atsign/keys. Congratulations, you\u0026rsquo;ve successfully registered a new atSign in the Java client. Note: The default properties in config.yaml point to the production environment. Your new atSign will be registered to the root that is defined in config.yaml  "
      })
      .add(
      {
        id: 11,
        href: "/tutorials/dess/aws/",
        title: "Setup dess on AWS",
        description: "Setup dess on AWS\n",
        content: ""
      })
      .add(
      {
        id: 12,
        href: "/tutorials/dess/gcp/",
        title: "Setup dess on GCP",
        description: "Learn how to setup dess on GCP\n",
        content: ""
      })
      .add(
      {
        id: 13,
        href: "/contribute/atmosphere-pro/",
        title: "Atmosphere Pro",
        description: "Learn how to setup your development environment to contribute to Atmosphere Pro",
        content: ""
      })
      .add(
      {
        id: 14,
        href: "/start/iot/",
        title: "IoT",
        description: "Get started with IoT (Internet of Things) devices on the atPlatform. The Internet of things describes physical objects with sensors, processing ability, software, and other technologies that connect and exchange data with other devices and systems over the Internet or other communications networks.\nIn the consumer market, IoT technology is most synonymous with products pertaining to the concept of the \"smart home\", including devices and appliances (such as lighting fixtures, thermostats, home security systems, cameras, and other home appliances) that support one or more common ecosystems, and can be controlled via devices associated with that ecosystem, such as smartphones and smart speakers. IoT is also used in healthcare systems.\nThe atPlatform strips things down to the protocol level, creating both zero trust and zero configuration environments–completely without passwords–eliminating all attack surfaces created by over-complexity, and simplifying the administration of devices in the process.\n",
        content: "What is IoT? #\rIoT–Internet of Things–is a system of interconnecting devices, mechanical or electronic, that are designed to work together to provide a service, such as the transmission of information, or the control of a device.\nIn simple terms, an IoT device is any device (such as a camera, a smart phone, a thermostat, a TV, a computer, etc) that is connected to the internet. IoT devices have sensors that are always collecting data and sending it through the Internet. However, these data are usually precious data that are valuable to the owner. For example, a person may own a camera connected to the internet which is constantly surveilling the living room of their house. It is important that outside parties have no access to this data and that the data the camera is collecting is sent securely over the internet. This is where the atPlatform comes in. The atPlatform adds security to this IoT camera device and sends the data securely to whomever the owner chooses.\nAs said on our website, the atPlatform strips things down to the protocol level, creating both zero trust and zero configuration environments–completely without passwords–eliminating all attack surfaces created by over-complexity, and simplifying the administration of devices in the process.\nIoT Network Architecture #\rSsh! No Ports #\rSsh! No ports is a perfect demonstration of how the atPlatform is adding end-to-end security to your IoT devices.\nWant to ssh to your remote (IoT or non-IoT) device without it having any open ports?\nSee our Ssh! No Ports tutorial:\nSsh! No Ports \u0026rarr;    Contact us #\rHere at Atsign, we believe in a world where IoT devices have atSigns and send their data end-to-end-encrypted to other atSigns. We\u0026rsquo;d love to work with you on adding security to your IoT devices. Please contact us at info@atsign.com or join our discord and ask us about anything and we will be happy to answer!\n"
      })
      .add(
      {
        id: 15,
        href: "/atplatform/specification/",
        title: "Protocol Specification",
        description: "The specification of the atProtocol on the atPlatform",
        content: "Introduction #\rThe atProtocol is the underlying protocol that the atPlatform implements. It is a simple internet protocol for interacting with the atDirectory and atServer. The atPlatform builds on top of the atProtocol by taking full advantage of the features of the atProtocol.\nSee our Protocol Specification on our GitHub page under our at_protocol repository.\nIf you see a typo, mistake, or want to suggest a feature, please see our contributing guidelines. All contributions are welcome.\natDirectory #\rThe atDirectory provides a lookup of where an atServer for an atSign is running. This is similar to a DNS server.\nWhen asking an atDirectory for the lookup of a particular atSign the atDirectory should respond with a null if the name does not exist and if the name exists the DNS name or address of the atServer and the IP port number for that atSign should be returned.\nResponse:\n\u0026lt;host\u0026gt;:\u0026lt;port\u0026gt;\nThe atDirectory only has one verb - @exit and all other inputs are considered to be lookup requests.\natServer #\rAn atServer is where an atSign user\u0026rsquo;s personal data should be stored. One interacts with an atServer using the verbs exposed by the protocol.\nAn atServer should have 4 major sub components:\n Key Store Commit Log Access Log Notification Log  Verbs described in the document should be used to create, update, delete, and retrieve information from the above sub components.\n1. Key Store #\rKey store is a place where user data in an atServer should be saved as key and value pairs. Apart from the value, an atSign owner should be able to add certain metadata for a key.\nKey #\rA key in the atProtocol can be formed by using any alphanumeric and special characters (UTF-8) excluding \u0026ldquo;@\u0026rdquo;, \u0026ldquo;:\u0026rdquo; and a white space (\u0026quot; \u0026ldquo;). A key in an atServer can be any of the following 5 types:\n Public Key   A public key is a key which can be looked up by any atSign owner. A public key should be part of the scan verb result. Format of the public key should be public::\u0026lt;@sign\u0026gt;.  Example:\npublic:location@alice\n The owner of the atServer should be allowed to update or delete the value of a public key.\n Private Key   A private key is a key which cannot be looked up by any atSign owner other than the one who created it. A private key should not be returned in a scan verb result. Format of the private key should be privatekey::\u0026lt;@sign\u0026gt;.  Example:\nprivatekey:pk1@alice\n The owner of the atServer should be allowed to update or delete the value of a private key.\n User key   A user key can only be looked up by an atSign owner with whom the data has been shared. A user key should be part of the scan verb result only for the user who created it and the specific user it has been shared with. Format of the key shared with someone else should be \u0026lt;Shared with atSign\u0026gt;::\u0026lt;Created by atSign\u0026gt;.  Example:\n@bob:phone@alice\n Note: Above Key should be part of scan verb result only for @alice and @bob\n  The owner of the atServer should be allowed to update or delete the value of a user key.\n Internal Key   Internal keys start with an underscore(_) and are not displayed in scan results. Internal keys can be looked up only by the owner of the atServer.  Cached Key \u0026lt;! \u0026mdash; TODO: Do we continue to use \u0026ldquo;atSign user or atSign owner? Especially with our \u0026ldquo;Person not user rule.     A cached key is a key that was originally created by another atSign owner but is now cached on the atServer of another user\u0026rsquo;s atSign as they were given permission to cache it. A cached key should be listed in the scan verb result for the atSign user who cached it. Format of the key shared with someone else should be cached:\u0026lt;Shared with atSign\u0026gt;::\u0026lt;Created by atSign\u0026gt;.  Example:\ncached:@bob:phone@alice\n The person who has cached the key should not be allowed to update the cached key.\n  An atSign user who has created and shared the key should be allowed to update a cached key, and if the \u0026ldquo;autoNotify\u0026rdquo; config parameter is set to true, the updated value should be notified (please refer to the notify verb) and the cached key updated with the new value.\n  If the user who originally shared the keys set the CCD (Cascade delete) to true, the cached key will be deleted when the original key is deleted.\n Value #\rText or binary values can be saved in an atServer. The size of the value saved in an atServer is bound by the config parameter \u0026ldquo;maxBufferSize\u0026rdquo;.\n A user should be made aware of this limitation by using the stats verb.\n  If a binary value is being saved on an atServer, the \u0026ldquo;isBinary\u0026rdquo; attribute on the metadata should be set to true by the convention.\n  Reference Value  An atServer should support referencing another key\u0026rsquo;s value.\nA reference value should be in the format \u0026ldquo;atsign://\u0026rdquo;.\nFor example, \u0026lsquo;phone@bob(key)\u0026rsquo; is 1234 (value). Now another key called altPhone@bob can refer to phone@bob by referencing it as altPhone@bob == atsign://phone@bob.\nWhen the user does a lookup on the key that contains a reference, the atServer should return a fully resolved value.\nMetadata  Metadata of a key should describe the following properties of the value being inserted.\n   Meta Attribute Auto create? Description     createdOn Yes Date and time when the key has been created.   createdBy Yes atSign that has created the key   updatedOn Yes Date and time when the key has been last updated   sharedWith No atSign of the user with whom the key has been shared. Can be null if not shared with anyone.   ttl No Time to live in milliseconds.   expiresOn Yes A Date and Time derived from the ttl (now + ttl). A Key should be auto deleted once it expires.   ttb No Time to birth in milliseconds.   availableFrom Yes A Date and Time derived from the ttl (now + ttl). A Key should be only available after availableFrom   isCached No True if the key is cached   ttr No Time in milliseconds after which the cached key needs to be refreshed. ttr of -1 indicates that the key can be cached forever. ttr of 0 indicates do not refresh. ttr of \u0026gt; 0 will refresh the key. ttr of null indicates the key is impossible to cache (which has the same effect as a ttr of 0).   refreshAt No A Date and Time derived from the ttr. The time at which the key gets refreshed.   ccd No Indicates if a cached key needs to be deleted when the atSign user who has originally shared it deletes it.   isBinary No True if the value is a binary value.   isEncrypted No True if the value is encrypted.    2. Commit Log #\rAn atServer should record any create, update, and delete operations in a commit log. The Commit Log should record these operations with a unique commit id so that users of the atServer can lookup operations that happened on or after a given commit id.\nAn atServer should provide a way to compact the Commit Log based on time and size.\n3. Access Log #\rAn atServer should record the following user actions: user login, user authentication, and lookup. The Access Log should record these operations so that users of the atServer can retrieve various statistics such as the most visited atSign or most visited keys.\nAn atServer should provide a way to compact the Access Log based on time and size.\n4. Notification Log #\rAn atServer should record any notifications that have been received and sent. Please check the notify verb specification for details on how a notification should be sent.\nAn atServer should provide a way to compact the Notification Log based on time and size.\nStandard Keys #\rAn atServer should have the following standard keys:\n   Key Description     public:publickey@ Public key used by other atSigns for encryption.   public:signing_publickey@ Public key used on a pol handler to a verify a signed challenge.   @signing_privatekey@ Private key used to sign a challenge on a pol request.   :shared_key@ Symmetric key used to encrypt/decrypt self atSign data.    Configuration Parameters #\rAn atserver should honor the following configuration parameters.\n   Key Valid Values Description     autoNotify true/false If set to true, an atServer should automatically notify another atSign user when a key has been shared with them. Please refer to the notify verb spec for details.   bufferLimit Number of bytes Maximum size of a value for a key that can be transferred to an atServer   inbound_max_limit An Integer Maximum number of inbound connections that an atServer can accept   outbound_max_limit An Integer Maximum number of outbound connections that an atServer can make to another atServer   inbound_idle_time_millis Time in milliseconds Maximum time the inbound connection can active   outbound_idle_time_millis Time in milliseconds Maximum time the outbound connection can be active.    Block List #\rA user of the atServer should be able to decide who is allowed to connect to their atServer. The config verb should be used to configure this. Once added, an atServer should honor the list at the time of accepting new connections from an atSign user using the from verb.\nVerbs #\rVerbs are commands you can execute on an atServer. Each verb interacts with the atServer in a different way. Some are for authentication, some are for data retrieval and some are for data manipulation. See the table below for more insight on which verb to use for what purpose.\n   Verb Purpose     from Authentication   cram Client Authentication   pkam Client Authentication   pol atServer Authentication   scan Data retrieval   lookup Data retrieval   plookup Data retrieval   llookup Data retrieval   update Data manipulation   update:meta Data manipulation   delete Data manipulation   stats Misc   sync Data synchronization   notify Notifications   monitor Notifications    The from verb #\rSynopsis:\nThe from verb is used to tell an atServer whom you claim to be.\nFollowing regex represents the syntax of the from verb:\nr'^from:(?\u0026lt;@sign\u0026gt;@?[^@\\s]+$)'\nExample:\nTelling the atServer that you are claiming to be @bob.\nfrom:@bob\nResponse:\nIf the user who is trying to connect is the owner of the atServer, then the from verb should respond with the following response.\ndata:\u0026lt;sessionId@sign:uuid\u0026gt;\nIf the user who is trying to connect is not the owner of the atServer, then the from verb should respond with the following response.\nproof:\u0026lt;sessionId\u0026gt;@\u0026lt;@sign\u0026gt;:\u0026lt;UUID\u0026gt;\nIf the user is not allowed to connect to the atServer, then it should respond back with the following error and close the connection to the server.\nerror:AT0013-Connection Exception\nDescription:\nThe from verb is used to tell the atServer what atSign you claim to be. With the from verb, one can connect to one\u0026rsquo;s own atServer or someone else\u0026rsquo;s atServer. In both cases, the atServer responds back with a challenge to prove that you are who you claim to be. This is part of the authentication mechanism of the atProtocol.\nThis authentication mechanism varies based on whether you are connecting to your own atServer (cram/pkam) or someone else\u0026rsquo;s atServer (pol).\nOptions:\n\u0026lt;atSign\u0026gt; Required: Yes. atSign with which you are connecting to an atServer\nThe cram verb #\rSynopsis:\nThe cram verb is used to bootstrap authenticate one\u0026rsquo;s own client as the owner of an atServer. It is intended to be used once until a set of PKI keys are cut on the owner\u0026rsquo;s mobile device and from then on we use the pkam verb.\nThe following regex represents the syntax of the cram verb:\nr'^cram:(?\u0026lt;digest\u0026gt;.+$)'\nExample:\ncram:\u0026lt;digest\u0026gt;\nResponse:\nIf the user gets the challenge right, the prompt should change to the atSign of the user.\n\u0026lt;atSign\u0026gt;@\nIf the user gets the cram authentication wrong, then it should respond back with the following error and close the connection to the server.\nerror:AT0401-Client authentication failed\nDescription:\nThe cram verb follows the from verb. As an owner of the atServer, you should be able to take the challenge thrown by the from verb and encrypt using the shared key that the server has been bound with. Upon receiving the cram verb along with the digest, the server decrypts the digest using the shared key and matches it with the challenge. If they are the same, then you can connect to the atServer and change the prompt to your atSign.\nOptions:\n\u0026lt;digest\u0026gt; Required: Yes. Description: Encrypted challenge\nThe pkam verb #\rSynopsis:\nThe pkam verb is used to authenticate one\u0026rsquo;s own client as an owner of an atServer using a PKI style authentication.\nFollowing regex represents the syntax of the pkam verb:\n^pkam:(?\u0026lt;signature\u0026gt;.+$)\nExample:\npkam:\u0026lt;digest\u0026gt;\nResponse:\nIf the user gets the challenge right, the prompt should change to the atSign of the user.\n\u0026lt;@sign\u0026gt;@\nIf the user gets the pkam authentication wrong, then it should respond back with the following error and close the connection to the server.\nerror:AT0401-Client authentication failed\nDescription:\nThe pkam verb follows the from verb. As an owner of the atServer, you should be able to take the challenge thrown by the from verb and encrypt using the private key of the RSA key pair with what the server has been bound with. Upon receiving the cram verb along with the digest, the server decrypts the digest using the public key and matches it with the challenge. If they are the same then the atServer lets you connect and changes the prompt to your atSign.\nOptions:\n\u0026lt;digest\u0026gt; Required: Yes. Description: Encrypted challenge\nThe pol verb #\rSynopsis:\nThe pol verb is part of the pkam process to authenticate oneself (as an atServer) while connecting to someone else\u0026rsquo;s atServer. The term \u0026lsquo;pol\u0026rsquo; means \u0026lsquo;proof of life\u0026rsquo; as it provides a near realtime assurance that the requestor is who it claims to be.\nFollowing regex represents the syntax of the pol verb:\nr'^pol$'\nExample:\npol\nResponse::\nIf the atServer (you) gets the challenge right the prompt should change to the atSign of the user.\n\u0026lt;@sign\u0026gt;@\nIf the atServer (you) gets the cram authentication wrong, then it should respond back with the following error and close the connection to the server.\nerror:AT0401-Client authentication failed\nDescription:\nThe pol verb follows the from verb. \u0026lsquo;pol\u0026rsquo; indicates to another atServer that the atServer (you) who is trying to connect is ready to authenticate. For example, if @bob is trying to connect to @alice, @bob would take the key and value from the proof response of the verb and create a public key and value which then can be looked up by @alice. After @alice looks up @bob\u0026rsquo;s atServer, @alice\u0026rsquo;s atServer should change the prompt to @bob.\nOptions:\nNA\nThe scan verb #\rSynopsis:\nThe scan verb is used to see the keys in an atSign\u0026rsquo;s atServer. Following regex represents the syntax of the scan verb: r'^scan$|scan(:showhidden:(?\u0026lt;showhidden\u0026gt;true|false))?(:(?\u0026lt;forAtSign\u0026gt;@[^:@\\s]+))?(:page:(?\u0026lt;page\u0026gt;\\d+))?( (?\u0026lt;regex\u0026gt;\\S+))?$'\nExample:\nView all keys in the atServer excluding hidden\nscan\nView all keys in the atServer including hidden\nscan:showhidden:true\nView all keys in the atServer filtered by a regex\nscan \u0026lt;regex\u0026gt;\nView all keys in the atServer including hidden and filtered by a regex\nscan:showhidden:true \u0026lt;regex\u0026gt;\nResponse:\nThe atServer should return the keys within the atServer if the scan verb executed successfully. The atServer will respond accordingly to whether the atSign is authenticated or not. data:[\u0026lt;keys\u0026gt;]\nThe lookup verb #\rSynopsis:\nThe lookup verb should be used to lookup the value shared by another atSign user.\nThe following is the regex of the lookup verb:\nlookup:((?\u0026lt;operation\u0026gt;meta|all):)?(?\u0026lt;atKey\u0026gt;(?:[^:]).+)@(?\u0026lt;@sign\u0026gt;[^@\\s]+)$\nExample:\nLook up the value of the key @\u0026lt;you\u0026gt;:phone@alice (the key is created and shared by @alice and lives on their atServer where the key is intentionally shared with you).\nlookup:phone@alice\nLook up the metadata of the key @\u0026lt;you\u0026gt;:phone@alice (key shared by @alice and shared with you).\nlookup:meta:phone@alice\nLook up both the value and the metadata of the key @\u0026lt;you\u0026gt;:phone@alice (key shared by @alice and shared with you).\nlookup:all:phone@alice\nResponse:\nIf the operation is not specified the atServer should just respond back with the value saved by the user as is.\ndata:\u0026lt;value\u0026gt;\nIf the operation is to lookup the metadata only then the result should be wrapped in a JSON in the following format:\ndata:\u0026lt;Metadata in a JSON\u0026gt;\nExample:\ndata: { \u0026#34;createdBy\u0026#34;:\u0026#34;@bob\u0026#34;, \u0026#34;updatedBy\u0026#34;:\u0026#34;@bob\u0026#34;, \u0026#34;createdAt\u0026#34;:\u0026#34;2020-10-21 09:46:48.982Z\u0026#34;, \u0026#34;updatedAt\u0026#34;:\u0026#34;2020-10-21 09:46:48.982Z\u0026#34;, \u0026#34;availableAt\u0026#34;:\u0026#34;null\u0026#34;, \u0026#34;expiresAt\u0026#34;:\u0026#34;null\u0026#34;, \u0026#34;refreshAt\u0026#34;:\u0026#34;2020-10-21 09:46:58.982Z\u0026#34;, \u0026#34;status\u0026#34;:\u0026#34;active\u0026#34;, \u0026#34;version\u0026#34;:0, \u0026#34;ttl\u0026#34;:null, \u0026#34;ttb\u0026#34;:null, \u0026#34;ttr\u0026#34;:10000, \u0026#34;ccd\u0026#34;:false, \u0026#34;isBinary\u0026#34;:false, \u0026#34;isEncrypted\u0026#34;:false } If the operation is to lookup the metadata and the data together, then the result should be wrapped in a JSON in the following format:\ndata:\u0026lt;Value and Metadata in a JSON\u0026gt;\nExample:\ndata: { \u0026#34;key\u0026#34;:\u0026#34;@alice:country@bob\u0026#34;, \u0026#34;data\u0026#34;:\u0026#34;USA\u0026#34;, \u0026#34;metaData\u0026#34;: { \u0026#34;createdBy\u0026#34;:\u0026#34;@bob\u0026#34;, \u0026#34;updatedBy\u0026#34;:\u0026#34;@bob\u0026#34;, \u0026#34;createdAt\u0026#34;:\u0026#34;2020-10-21 09:46:48.982Z\u0026#34;, \u0026#34;updatedAt\u0026#34;:\u0026#34;2020-10-21 09:46:48.982Z\u0026#34;, \u0026#34;availableAt\u0026#34;:\u0026#34;null\u0026#34;, \u0026#34;expiresAt\u0026#34;:\u0026#34;null\u0026#34;, \u0026#34;refreshAt\u0026#34;:\u0026#34;2020-10-21 09:46:58.982Z\u0026#34;, \u0026#34;status\u0026#34;:\u0026#34;active\u0026#34;, \u0026#34;version\u0026#34;:0, \u0026#34;ttl\u0026#34;:null, \u0026#34;ttb\u0026#34;:null, \u0026#34;ttr\u0026#34;:10000, \u0026#34;ccd\u0026#34;:false, \u0026#34;isBinary\u0026#34;:false, \u0026#34;isEncrypted\u0026#34;:false } } If the other atServer on which the lookup needs to be performed is down then the atServer should return the following error and keep the connection alive.\nerror:AT0007-atServer not found.\nIf the lookup command is not valid, then the atServer should return the following error and close the connection:\nerror:AT0003-Invalid Syntax\nFor whatever reasons, If the handshake with another atServer fails, then the atServer should return the following error:\ndata:AT0008-Handshake failure\nDescription:\nThe lookup verb should be used to fetch the value of the key shared by another atSign user. If there is a public and user key with the same name then the result should be based on whether the user is trying to lookup is authenticated or not. If the user is authenticated then the user key has to be returned, otherwise the public key has to be returned.\nThe plookup verb #\rSynopsis:\nThe plookup verb enables to lookup the value of the public key shared by another atSign user.\nFollowing is the regex of the plookup verb:\n^plookup:((?\u0026lt;operation\u0026gt;meta|all):)?(?\u0026lt;atKey\u0026gt;[^@\\s]+)@(?\u0026lt;@sign\u0026gt;[^@\\s]+)$\nExample:\nLook up the value of the key public:publickey@alice (the key is created and shared by @alice and lives on their atServer where the key is public).\nplookup:publickey@alice\nLook up the metadata of the public key\nplookup:meta:publickey@alice\nLook up both the value and the metadata of the public key\nplookup:all:publickey@alice\nLook up the value and metadata of the public key while bypassing the cache (i.e. the value will be fetched directly from the atServer instead of first checking for a cached key on your secondary).\nplookup:bypassCache:true:all:publickey@alice\nResponse:\nThe atServer should return the value or metadata or the value and metadata together based on the option specified.\nThe response structure should be exactly the same as the lookup verb.\nIf the other atServer on which the lookup needs to be performed is not available, then the atServer should return the following error and keep the connection alive.\nerror:AT0007-atServer not found.\nIf the lookup command is not valid, then the atServer should return the following error and close the connection:\nerror:AT0003-Invalid Syntax\nThe llookup verb #\rSynopsis:\nThe llookup verb should be used to look up one\u0026rsquo;s own atServer and this should return the value as is (i.e. without any resolution).\nThe following is the regex of the llookup verb:\n^llookup:((?\u0026lt;operation\u0026gt;meta|all):)?(?:cached:)?((?:public:)|(@(?\u0026lt;for@sign\u0026gt;[^@:\\s]-):))?(?\u0026lt;atKey\u0026gt;[^:]((?!:{2})[^@])+)@(?\u0026lt;@sign\u0026gt;[^@\\s]+)$\nExample:\nLookup the value of a public key that lives on your atServer\nllookup:public:publickey@\u0026lt;you\u0026gt;\nLookup both the value and the metadata of a self key that lives on your atServer\nllookup:all:phone@\u0026lt;you\u0026gt;\nLookup both the value and the metadata of a shared key (that is shared with @alice and created by @)\nllookup:all:@alice:phone@\u0026lt;you\u0026gt;\nResponse:\nThe atServer should return the value or metadata or the value and metadata together based on the option specified.\nThe response structure should be exactly the same as the lookup verb.\nIf the other atServer on which the lookup needs to be performed is down then the atServer should return the following error and keep the connection alive.\nerror:AT0007-atServer not found.\nIf the lookup command is not valid, then the atServer should return the following error and close the connection:\nerror:AT0003-Invalid Syntax\nDescription:\nThe llookup verb should be used to fetch the value of the key in the owner\u0026rsquo;s atServer store as is without resolving it. For example if a key contains a reference as a value, the lookup verb should resolve it to a value whereas llookup should return the value as is.\nExample:\nIf phone@bob is \u0026ldquo;1234\u0026rdquo; and altphone@bob is \u0026ldquo;atsign://phone@bob\u0026rdquo;, then lookup of altphone@bob should return \u0026ldquo;1234\u0026rdquo; where as llookup of altphone@bob should return \u0026ldquo;atsign://phone@bob\u0026rdquo;.\nThe update verb #\rSynopsis:\nThe update verb is used to insert key/value pairs into a Key Store. An update can only be run by the owner of an atServer on his/her own atServer.\nFollowing regex represents the syntax of the update verb:\nr'^update:(?:ttl:(?\u0026lt;ttl\u0026gt;\\d+):)?(?:ttb:(?\u0026lt;ttb\u0026gt;\\d+):)?(?:ttr:(?\u0026lt;ttr\u0026gt;(-?)\\d+):)?(ccd:(?\u0026lt;ccd\u0026gt;true|false):)?((?:public:)|(@(?\u0026lt;for@sign\u0026gt;[^@:\\s]-):))?(?\u0026lt;atKey\u0026gt;[^:@]((?!:{2})[^@])+)(?:@(?\u0026lt;@sign\u0026gt;[^@\\s]-))? (?\u0026lt;value\u0026gt;.+$)'\nExample:\nPut a key/value pair into the atServer with key location@bob and value bob's location value. This operation will create a new key if it does not already exist. If it already exists, it will overwrite the existing value.\nupdate:location@bob bob's location value\nPut a key/value pair into the atServer with key location@bob and value bob's location value but key expires in 10 minutes. The time to live of this key is 10 minutes.\nupdate:ttl:600000:location@bob bob's location value but key expires in 10 minutes\nPut a shared key/value pair into the atServer with key @alice:phone@bob (shared with @alice and shared by @bob) with value bob's phone number shared to @alice.\nupdate:@alice:phone@bob bob's phone number shared to @alice\nResponse:\nThe atServer should return the commit id from Commit Log if the update is successful.\ndata:\u0026lt;CommitId\u0026gt;\nIf the user provides the invalid update command, then it should respond with the following error and close the connection to the server\nerror:AT0003-Invalid Syntax\nDescription:\nThe update verb should be used to perform create/update operations on the atServer. The update verb requires the owner of the atServer to authenticate himself/herself to the atServer using from and cram verbs.\nIf a key has been created for another atSign user, the atServer should honor \u0026ldquo;autoNotify\u0026rdquo; configuration parameter.\nOptions:\n\u0026lt;ttl\u0026gt; Required: No. Description: Time to live in milliseconds.\n\u0026lt;ttb\u0026gt; Required: No. Description: Time to birth in milliseconds.\n\u0026lt;ttr\u0026gt; Required: No. Description: Time to refresh in milliseconds.\n -1 is a valid value which indicates that the user with whom the key has been shared can keep it forever and the value for this key won\u0026rsquo;t change forever.\n \u0026lt;ccd\u0026gt; Required: No. Description: A value of \u0026ldquo;true\u0026rdquo; indicates that the cached key needs to be deleted when the atSign user who has originally shared it deletes it.\n\u0026lt;for@sign\u0026gt; Required: Yes, (Not required when the key is a public key). Description: atSign of the user with whom the key has been shared.\n\u0026lt;@sign\u0026gt; Required: Yes. Description: atSign of the owner.\n\u0026lt;value\u0026gt; Required: Yes. Description: Value for the key.\nThe update:meta verb #\rSynopsis:\nThe update:meta verb should be used to update the metadata of a key atSign user without having to send or save the value again.\nFollowing is the regex for the update:meta verb\n^update:meta:((?:public:)|((?\u0026lt;forAtSign\u0026gt;@?[^@\\s]-):))?(?\u0026lt;atKey\u0026gt;((?!:{2})[^@])+)@(?\u0026lt;atSign\u0026gt;[^@:\\s]-)(:ttl:(?\u0026lt;ttl\u0026gt;\\d+))?(:ttb:(?\u0026lt;ttb\u0026gt;\\d+))?(:ttr:(?\u0026lt;ttr\u0026gt;\\d+))?(:ccd:(?\u0026lt;ccd\u0026gt;true|false))?(:isBinary:(?\u0026lt;isBinary\u0026gt;true|false))?(:isEncrypted:(?\u0026lt;isEncrypted\u0026gt;true|false))?$\nExample:\nUpdate the metadata of key phone@bob setting isBinary:true while keeping all other metadata as it is.\nupdate:meta:phone@bob:isBinary:true\nUpdate the metadata of the shared key @alicephone@bob (shared with @alice \u0026amp; shared by @bob) setting ttl:600000, setting isBinary:true and isEncrypted:true while keeping all other metadata as it is.\nupdate:meta:@alice:phone@bob:ttl:600000:isBinary:true:isEncrypted:true\nResponse:\nThe atServer should return the commit id from Commit Log if the update is successful.\ndata:\u0026lt;CommitId\u0026gt;\nIf the user provides the invalid update meta command, then it should respond with the following error and close the connection to the atServer.\nerror:AT0003-Invalid Syntax\nDescription:\nThe update:meta verb should be used to perform create/update operations on the atServer. The update:meta verb requires the owner of the atServer to authenticate himself/herself to the atServer using from and cram verbs.\nThe atServer should allow creation of keys with null values. If a key has been created for another atSign user, the atServer should honor \u0026ldquo;autoNotify\u0026rdquo; configuration parameter.\nOptions::\n\u0026lt;ttl\u0026gt; Required: No. Description: Time to live in milliseconds\n\u0026lt;ttb\u0026gt; Required: No. Description: Time to birth in milliseconds\n\u0026lt;ttr\u0026gt; Required: No. Description: Time to refresh in milliseconds\n -1 is a valid value which indicates that the user with whom the key has been shared can keep it forever and the value for this key won\u0026rsquo;t change forever\n \u0026lt;ccd\u0026gt; Required: No. Description: A value of \u0026ldquo;true\u0026rdquo; indicates that the cached key needs to be deleted when the atSign user who has originally shared it, deletes it.\n\u0026lt;for@sign\u0026gt; Required: Yes (Not required when the key is a public key). Description: atSign of the user with whom the key has been shared.\n\u0026lt;@sign\u0026gt; Required: Yes. Description: atSign of the owner.\nThe delete verb #\rSynopsis:\nThe delete verb should be used to delete a key from the key store. Only the authenticated owner of the atServer can delete keys that they created.\nExample:\nDelete a key (that you created) from your atServer.\ndelete:phone@\u0026lt;you\u0026gt;\nResponse:\nThe atServer returns the commit id of the operation. Note: no information about the key (if it was deleted or if it ever existed in the first place) is given.\ndata:1234\nThe stats verb #\rSynopsis:\nThe stats verb should be used to get the statistics of an atSign.\nFollowing is the regex of the stats verb\nstats(?\u0026lt;statId\u0026gt;:((?!0)\\d+)?(,(\\d+))-)?\nResponse:\nif the user gives stats all the statistics will be returned as JSON. Following statistics are provided:\n activeInboundConnections activeOutboundConnections lastCommitId secondaryStorageSize topAtSigns topKeys  Example:\ndata: [{\u0026quot;id\u0026quot;:\u0026quot;1\u0026quot;,\u0026quot;name\u0026quot;:\u0026quot;activeInboundConnections\u0026quot;,\u0026quot;value\u0026quot;:\u0026quot;1\u0026quot;}, {\u0026quot;id\u0026quot;:\u0026quot;2\u0026quot;,\u0026quot;name\u0026quot;:\u0026quot;activeOutboundConnections\u0026quot;,\u0026quot;value\u0026quot;:\u0026quot;0\u0026quot;}, {\u0026quot;id\u0026quot;:\u0026quot;3\u0026quot;,\u0026quot;name\u0026quot;:\u0026quot;lastCommitID\u0026quot;,\u0026quot;value\u0026quot;:\u0026quot;1\u0026quot;}, {\u0026quot;id\u0026quot;:\u0026quot;4\u0026quot;,\u0026quot;name\u0026quot;:\u0026quot;secondaryStorageSize\u0026quot;,\u0026quot;value\u0026quot;:12560}, {\u0026quot;id\u0026quot;:\u0026quot;5\u0026quot;,\u0026quot;name\u0026quot;:\u0026quot;topAtSigns\u0026quot;,\u0026quot;value\u0026quot;:{\u0026quot;@bob\u0026quot;:1}}, {\u0026quot;id\u0026quot;:\u0026quot;6\u0026quot;,\u0026quot;name\u0026quot;:\u0026quot;topKeys\u0026quot;,\u0026quot;value\u0026quot;:{\u0026quot;publickey@alice\u0026quot;:1}}]\nIndividual statistics can be retrieved using the respective Id.\n@alice@stats:1 data: [{\u0026#34;id\u0026#34;:\u0026#34;1\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;activeInboundConnections\u0026#34;,\u0026#34;value\u0026#34;:\u0026#34;1\u0026#34;}] The sync verb #\rThe sync verb enables to synchronize the keys between the local atServer and remote atServer.\nFollowing is the regex:\nsync:(?\u0026lt;from_commit_seq\u0026gt;[0-9]+$|-1)\nResponse:\nThe sync verb returns a json array of the commit entries from the given commit id to the current commit id. Further, the sync verb accepts -1 as argument which returns all the commit entries.\ndata:[{\u0026#34;atKey\u0026#34;:\u0026#34;@bob:phone@alice\u0026#34;,\u0026#34;operation\u0026#34;:\u0026#34;+\u0026#34;,\u0026#34;opTime\u0026#34;:\u0026#34;2020-10-26 11:57:43.732\u0026#34;,\u0026#34;commitId\u0026#34;:0,\u0026#34;value\u0026#34;:\u0026#34;12345\u0026#34;,\u0026#34;metadata\u0026#34;:{\u0026#34;ttr\u0026#34;:\u0026#34;36000000\u0026#34;,\u0026#34;ccd\u0026#34;:\u0026#34;false\u0026#34;}}, {\u0026#34;atKey\u0026#34;:\u0026#34;@bob:shared_key@alice\u0026#34;,\u0026#34;operation\u0026#34;:\u0026#34;-\u0026#34;,\u0026#34;opTime\u0026#34;:\u0026#34;2020-10-26 09:44:54.382219Z\u0026#34;,\u0026#34;commitId\u0026#34;:1}] The notify verb #\rSynopsis:\nThe notify verb enables us to notify the atSign user of some data event.\nThe following is the regex for the notify verb\nnotify:((?\u0026lt;operation\u0026gt;update|delete):)?(messageType:(?\u0026lt;messageType\u0026gt;key|text):)?(priority:(?\u0026lt;priority\u0026gt;low|medium|high):)?(strategy:(?\u0026lt;strategy\u0026gt;all|latest):)?(latestN:(?\u0026lt;latestN\u0026gt;\\d+):)?(notifier:(?\u0026lt;notifier\u0026gt;[^\\s:]+):)?(ttln:(?\u0026lt;ttln\u0026gt;\\d+):)?(ttl:(?\u0026lt;ttl\u0026gt;\\d+):)?(ttb:(?\u0026lt;ttb\u0026gt;\\d+):)?(ttr:(?\u0026lt;ttr\u0026gt;(-)?\\d+):)?(ccd:(?\u0026lt;ccd\u0026gt;true|false):)?(@(?\u0026lt;forAtSign\u0026gt;[^@:\\s]*)):(?\u0026lt;atKey\u0026gt;[^:@]((?!:{2})[^@])+)(@(?\u0026lt;atSign\u0026gt;[^@:\\s]+))?(:(?\u0026lt;value\u0026gt;.+))?$ Example:\nNotify @alice that you have a shared key @alice:test@\u0026lt;you\u0026gt; with an updated value waiting for them to lookup.\nnotify:update:@alice:test@\u0026lt;you\u0026gt;\nNotify @alice that you have a shared key @alice:test@\u0026lt;you\u0026gt; that was deleted.\nnotify:delete:@alice:test@\u0026lt;you\u0026gt;\nNotify @alice with a message my sample message to bob.\nnotify:messageType:text:@\u0026lt;you\u0026gt;:my sample message to bob\nResponse:\nWhen a key is notified successfully, returns\ndata:\u0026lt;notificationId\u0026gt;\nwhere the notificationId is the id of the sent notification.\nDescription:\nWhen an atSign user notifies the key to another atSign user, an entry has to be created in received notifications list on the user who has shared the key and an entry has to be created in sent notifications list on the user to whom the key is to be notified. When auto notify is set to true, when a key is created/updated and deleted notification is triggered to another atSign user.\nNotify List #\rSynopsis:\nNotify list returns a list of notifications.\nThe following is the regex\nnotify:(list (?\u0026lt;regex\u0026gt;.-)|list$)\nExample:\nList all notifications that you have received.\nnotify:list\nResponse:\nIf the user is the owner, returns a list of received notifications. If a user is pol authenticated user, returns a list of sent notifications\ndata:[{\u0026quot;id\u0026quot;:\u0026quot;0e5e9e89-c9cb-423b-8972-8c5487215990\u0026quot;,\u0026quot;from\u0026quot;:\u0026quot;@alice\u0026quot;,\u0026quot;to\u0026quot;:\u0026quot;@bob\u0026quot;,\u0026quot;key\u0026quot;:\u0026quot;@bob:phone@alice\u0026quot;,\u0026quot;value\u0026quot;:12345,\u0026quot;operation\u0026quot;:\u0026quot;update\u0026quot;,\u0026quot;epochMillis\u0026quot;:1603714122636}]\nNotify Remove #\rSynopsis:\nNotify remove removes a notification from the notification log.\nThe following is the regex\nnotify:(remove:(?\u0026lt;notificationId\u0026gt;[^:]+$))\nExample:\nRemove a notification that you received that has id 0e5e9e89-c9cb-423b-8972-8c5487215990.\nnotify:remove:0e5e9e89-c9cb-423b-8972-8c5487215990\nResponse:\nIf successful, returns\ndata:success\nNotify Status #\rSynopsis:\nNotify status returns the status of a notification that was sent to another atSign user.\nThe following is the regex\nnotify:(status:(?\u0026lt;notificationId\u0026gt;[^:]+$))\nExample::\nCheck the status of the notification that you sent with id 0e5e9e89-c9cb-423b-8972-8c5487215990.\nnotify:status:0e5e9e89-c9cb-423b-8972-8c5487215990\nResponse:\nReturns the status of the notification\ndata:delivered\ndata:undelivered\nThe monitor verb #\rSynopsis:\nThe monitor verb streams received notifications.\nThe following is the regex\n^monitor$|^monitor ?(?\u0026lt;regex\u0026gt;.-)?)$\nExample:\nStart monitoring all notifications in this current session.\nmonitor\nResponse:\nReturns a stream of notifications\n@alice@monitor notification: {\u0026#34;id\u0026#34;:\u0026#34;773e226d-dac2-4269-b1ee-64d7ce93a42f\u0026#34;,\u0026#34;from\u0026#34;:\u0026#34;@bob\u0026#34;,\u0026#34;to\u0026#34;:\u0026#34;@alice\u0026#34;,\u0026#34;key\u0026#34;:\u0026#34;@alice:phone@bob\u0026#34;,\u0026#34;value\u0026#34;:null,\u0026#34;operation\u0026#34;:\u0026#34;update\u0026#34;,\u0026#34;epochMillis\u0026#34;:1603714720965} Description:\nThe monitor verb accepts an optional parameter to filter the notifications by passing filter criteria as regex to monitor verb.\nError Codes #\r   Error Code Error Message Description     AT0001 Server exception Exception occurs when there is an issue while starting the server.   AT0002 Datastore exception Exception occurs during keystore operations (GET/PUT/DELETE).   AT0003 Invalid syntax Exception occurs if we give any invalid command to the server.   AT0004 Socket error Exception occurs when socket connection to an atServer cannot be established.   AT0005 Buffer limit exceeded This exception occurs when input/output message size reaches the maximum limit configured in the server.   AT0008 Handshake failure this exception is for any exception during the handshake process of two secondaries.   AT0009 Unauthorized client in the request Occurs when an unsuccessful handshake happens between two secondaries.   AT0010 Internal server error This is for any server related errors.   AT0011 Internal server exception This exception is used for any server related exceptions.   AT0012 Inbound connection limit exceeded This exception will occur when the number of active clients reaches the maximum limit configured.   AT0401 Client authentication failed This exception occurs when client authentication fails or client tries to execute any verb which needs authentication before successful authentication.   AT0013 Connection exception This will occur when a blocked user tries to connect to the secondary.   AT0014 Unknown AtClient exception This exception will be thrown while performing any operations (GET/UPDATE/DELETE) using atClient SDK.   AT0015 Key not found This exception will be thrown when the key is not available for encryption/decryption.   AT0021 Unable to connect to secondary This exception will occur when we are unable to connect to secondary.    "
      })
      .add(
      {
        id: 16,
        href: "/tutorials/sshnp/",
        title: "Ssh! No Ports",
        description: "Learn how to use sshnp - SSH to a remote linux device without it having any open ports",
        content: "Learn how to use sshnp - An easy way to ssh to a remote linux device without it having any open ports.\n"
      })
      .add(
      {
        id: 17,
        href: "/tutorials/at_demos/",
        title: "at_demos",
        description: "Learn about the inner workings of our at_demos demo apps\n",
        content: ""
      })
      .add(
      {
        id: 18,
        href: "/atplatform/rootserver/",
        title: "atDirectory",
        description: "atDirectory is a service that stores the location of the atServer for each atSign as well as the atSign’s public encryption key (previously called the root server).",
        content: "atDirectories are the only centralized part of the atProtocol and are centralized to provide a single namespace and a global dependable platform. No data beyond the atSign and responding authoritative atServer is held on the atDirecory. This information is considered public and no authentication is required to look up the atServers for a particular atSign.\nThe atDirectory have been designed to scale to billions of atSigns and handle the request for atSign lookups at near real-time, globally. To achieve this, in-memory databases are utilized and only the absolute minimum of data is stored.\n"
      })
      .add(
      {
        id: 19,
        href: "/atplatform/secondaryserver/",
        title: "atServer",
        description: "Learn about atPlatform servers responsible for answering lookups for specific atSigns.",
        content: "atServers (personal atSign) provide the second tier of the atProtocol architecture and are responsible for answering lookups for specific atSigns. atServers provide the lookup service for a particular atSign and one name only. This ensures that the atServer will not mix atSign data with any other atSign’s data. This is unlike web servers that can provide service to multiple websites at a time.\n"
      })
      .add(
      {
        id: 20,
        href: "/tutorials/dess/",
        title: "dess",
        description: "Learn about the atPlatform DESS, distributed edge secondary server",
        content: ""
      })
      .add(
      {
        id: 21,
        href: "/contribute/",
        title: "Contribute to the atPlatform",
        description: "How to contribute to the atPlatform",
        content: "Open Source Contributions #\rWe LOVE open source. Any and all contributions are welcome.\nThe atPlatform consists of many open-sourced GitHub repositories. To start, go into any repository and find the CONTRIBUTING.md file to see how you can properly setup your fork to make contributions to our projects. Here is an example of the contributing guidelines for making contributions to the dev site that you are reading now. There may be different contributing guidelines for each repository, so be sure to read the CONTRIBUTING.md of the repository that you are contributing to.\nThank you for your contributions!\nNeed more information? Read the following: #\r"
      })
      .add(
      {
        id: 22,
        href: "/contribute/this-site/",
        title: "Contribute to this site",
        description: "How to contribute to docs.atsign.com",
        content: "The developer site is written in GoHugo (a static-site generator).\nWhile browsing the developer site, if you find a typo, mistake, or would like to make a contribution to the dev site, continue reading on ways you can contribute. All contributions are welcome and greatly appreciated.\n If you wish to contact us about the issue, join our discord or email us at info@atsign.com. If you wish to raise GitHub issue card, click here. If you wish to get your hands dirty and fix the bug or add documentation yourself (which we absolutely love), please read our Contributing Guidelines on how to contribute to the open-source project and read through our Style Guide to keep your contribution up to standard with the rest of our content.  "
      })
      .add(
      {
        id: 23,
        href: "/reference/",
        title: "Reference",
        description: "Glossary Definitions on the atPlatform\n",
        content: ""
      })
      .add(
      {
        id: 24,
        href: "/atplatform/",
        title: "The atPlatform",
        description: "The atPlatform is an open-source source solution designed to help developers build end-to-end, cross-platform applications and IoT solutions, with privacy built in.\n",
        content: ""
      })
      .add(
      {
        id: 25,
        href: "/sdk/",
        title: "SDK Reference",
        description: "SDK References for each implementation\n",
        content: ""
      })
      .add(
      {
        id: 26,
        href: "/tutorials/",
        title: "Tutorials",
        description: "Learn how to build on the atPlatform through hands-on tutorials.\n",
        content: ""
      })
      .add(
      {
        id: 27,
        href: "/start/",
        title: "Get Started",
        description: "Get started on the atPlatform, a full stack platform written in Dart and Flutter. It includes a wide range of libraries, services and widgets specifically designed for creating privacy-first applications on any platform.\n",
        content: "I want to get started with\u0026hellip; #\r  Flutter Start with Flutter development\n     Java Start with Java development\n      IoT Start with IoT development\n    "
      })
      .add(
      {
        id: 28,
        href: "/reference/atsign/",
        title: "atSign",
        description: "Learn about what an atSign is in the atPlatform: An atSign is a handle (e.g. @alice) that functions as your digital identity. It uses end-to-end encryption to ensure that your data is 100% owned and controlled by you.\n",
        content: "What is an atSign #\rAn atSign is a handle (e.g. @alice) that functions as your digital identity. It uses end-to-end encryption to ensure that your data is 100% owned and controlled by you.\nAn atSign has two states: deactivated and activated. To activate an atSign, CRAM authenticate into your secondary server. After successful CRAM authentication, your atSign is activated where a PKAM key pair is generated by your device and the CRAM key will be invalid; so that only you own the keys to your secondary server.\nEach atSign has a unique key that is used to verify whether you are the atSign’s rightful owner. After first activating an atSign, be sure to save its corresponding key in a secure location. You’ll need it to sign back into the app or use other apps on the atPlatform.\nExample #\rAlice has created their own atSign called @alice. Anyone who looks up @alice can only view the information that they’ve made public through @wavi, an app that lets them set up and customize their public profile. They’ll have the freedom to adjust it as needed, and those changes will be viewable in a matter of seconds.\nWhat you can do with an atSign #\rAt the moment, you can pair your atSign with any app on the atPlatform (the underlying technology behind atSigns) to enable the app to access, but not store, your data. The number of things you can do with your atSign will increase as more and more of these atApps are built.\nWhile we wait for the rest of the Internet to catch up, you can get ahead of the game by downloading the first batch of recently launched atApps. These include @atmospherePro, an end-to-end encrypted file sharing app, @buzz, an entirely new and private way to connect with others, and more.\nDiscover these atApps here.\n"
      })
      .add(
      {
        id: 29,
        href: "/reference/pricing-and-costs/",
        title: "Pricing / Costs",
        description: "Reference on the pricing and costs on atSigns: Since the atPlatform is fully open-sourced , there is no cost for developers! **Atsign** generates revenue is by using our special identifier which is known as an atSign. An atSign can come in many flavors with corresponding prices ranging from free, $10, $100, $1000, $5000.For each paid atSign you own, there is a $10 annual renewal fee. This fee does not apply to the free atSigns. What makes atSigns so awesome is that if your app is the first one someone pairs an atSign with, after buying their atSign, we pay you commission on that. Yep, you don't pay us, we pay you.\n",
        content: "Introduction #\rSince the atPlatform is fully open-sourced and everyone can contribute, there is no cost for developers! When you make an app on the atPlatform, people that use your apps will not have to pay any fees for infrastructure or storage! The way that Atsign generates revenue is by using our special identifier which is known as an atSign. An atSign can come in many flavors with corresponding prices ranging from free, $10, $100, $1000, $5000. If you opt-in for the vanity atSign the prices increase as the atSign of your liking decreases in length and complexity. For each paid atSign you own, there is a $10 annual renewal fee. This fee does not apply to the free atSigns. What makes atSigns so awesome is that if your app is the first one someone pairs an atSign with, after buying their atSign, we pay you commission on that. Yep, you don\u0026rsquo;t pay us, we pay you.\nVideo #\rNot a fan of reading? Watch this video instead!\n  Paid atSigns #\rFor paid atSigns the options are listed below:\n For $10: A Hybrid atSign is an sign that ends with an underscore and up to four numbers:  atsignexample_01\n   For $100: A Custom atSign is an sign that is any combination of words, numbers, or even emojis! (at least five characters, or four characters if it includes a number or emoji):  atsignexample atest tes5\n   For $1000: A Custom atSign that is only three or four characters (no numbers):  test four tes dog\n   For $5000: A Custom atSign that is only three characters:  007 te5 r4n     Free atSigns #\rFor a FREE atSign there exists an atSign generator that creates a new set of atSigns at random for you to choose from! You are given two options: the first option requires you to add some pre-generated atSigns while the second option lets you generate an atSign based on your interests using super-secret mode. Let\u0026rsquo;s say you like music and sports, the atSign generator would perform its magic and dish out:\n* melodic74 * canopy22wild * 10axepowernoise * Modest89rackets * 90bossaball  Get started for free   "
      })
      .add(
      {
        id: 30,
        href: "/reference/encryption/",
        title: "Encryption",
        description: "Encryption is a means of achieving privacy. It is a part of cryptography. The goal of encryption is that assuming that an unwanted third party is eavesdropping on an insecure channel, said person would not be able to comprehend the transmitted information. Decryption is the process of converted encrypted information into a comprehensible format. Encryption and Decryption algorithms are known as ciphers. Encryption uses a key which is a set of values that the cipher, as an algorithm, will operate on. Encryption and Decryption go back a long way with one of the most well known ciphers being the [Caesar Cipher](https://en.wikipedia.org/wiki/Caesar_cipher)\n",
        content: "Definition #\rEncryption is a means of achieving privacy. It is a part of cryptography which has the Greek origin meaning of \u0026ldquo;secret writing\u0026rdquo;. The goal of encryption is that assuming that an unwanted third party is eavesdropping on an insecure channel, said person would not be able to comprehend the transmitted information. Decryption is the process of converted encrypted information into a comprehensible format. Encryption and Decryption algorithms are known as ciphers. Encryption uses a key which is a set of values that the cipher, as an algorithm, will operate on. Encryption and Decryption go back a long way with one of the most well known ciphers being the Caesar Cipher\nVideo #\rCheck out our video on Encryption here!\n  atPlatform #\rThe atPlatform implements end-to-end encryption that is best illustrated with the following example: @alice wishes to share her phone number with her friend @bob. To do this, @alice, who is on her own device, prompts her own secondary server to direct phone @alice at her friend @bob\u0026rsquo;s secondary server. From here, a shared key is generated for @bob (@bob:shared_key@alice).\nThis shared key uses the same encryption process as the Symmetric Key Encryption, which is called AES (Advanced Encryption Standard) and involves three block ciphers: AES-128, AES-192 and AES-256.\nThe atProtocol specifically uses AES-256 for Data Encryption Keys.\nThe RSA (Rivest-Shamir-Adleman) encryption algorithm is then used to encrypt the shared key from the above example with @bob\u0026rsquo;s public key. The atProtocol specifically utilizes RSA 2048. Note, that because the RSA algorithm is an Asymmetric Key Encryption method, a public and private key are generated.\nIf you want to read more about Encryption and how it works on the atPlatform check this Medium article!\nRelated Resources #\rPublic and Private Keys \u0026rarr;    Self-Encryption Key \u0026rarr;    Privacy \u0026rarr;    "
      })
      .add(
      {
        id: 31,
        href: "/reference/privacy/",
        title: "Privacy",
        description: "Definition of the term privacy:  InformationAs as an asset, must be secured from potential attacks or unauthorized access. There are several security goals that must be considered like Confidentiality, Integrity, Availability, Authentication/Liveness and Non-repudiation.\n",
        content: "Definition #\rWe live in an age of information. Information is an asset that has a similar value much like other assets that you might own. As an asset, that information must be secured from potential attacks or unauthorized access. There are several security goals that must be considered:\n Confidentiality: Hidden from unauthorized access. Integrity: Protected from unauthorized change. Availability: Available to an authorized party when needed. Authentication/Liveness: Ensuring the session is \u0026ldquo;current\u0026rdquo; rather than a replay of an earlier session. For example, if you are chatting with a certain person, it would be beneficial to know that the person you are chatting with is indeed who they say they are ano not an unwanted intruder posing as the trusted person. Non-repudiation: Assurance that an actor behaved in a way they cannot deny.  I.e. proving that a sender sent a message or receiver received it.    Video #\rNot a fan of reading? Watch this video instead!\n  "
      })
      .add(
      {
        id: 32,
        href: "/reference/polymorphism/",
        title: "Polymorphism",
        description: "Definition of Polymorphism: the ability to share different data depending on the context of who’s asking. atPlatform applications enable you to set up multiple personas for different areas of your life. When you share data with someone else, the value of that data may be different depending on the person receiving that data. This is true for both sides, you may ask for data from different sources and get a different answer for each one.\n",
        content: "Definition #\rThe condition of occurring in several different forms.\nPolymorphism on the atPlatform is the ability to share different data depending on the context of who’s asking. atPlatform applications enable you to set up multiple personas for different areas of your life. When you share data with someone else, the value of that data may be different depending on the person receiving that data. This is true for both sides, you may ask for data from different sources and get a different answer for each one.\nPolymorphic Data #\rThe @buzz app is a stellar example of polymorphic data on the atPlatform. @buzz is like your contacts application, but with a twist. Rather than manually entering details for all of your contacts, and having to deal with duplicate contact entries from trying to sync all of your contacts over the cloud, you simply connect with someone through their atSign. In @buzz, they can create and share a specific persona with you. For example, I might want to share my work phone and email with colleagues, but my phone and a different email with friends. I can set up separate “work” and “friends” personas with each set of information, so when I connect with someone new, all I have to do is share the correct persona with that person. Better yet, if I want to share multiple personas, I can do that too! If I move or change my email address, I can update my information in the app, and my contacts have access to the new information and don’t have to make any edits themselves.\nExample #\r@alice’s work persona may have a different value for email than her persona. When she shares her email with her colleagues, they will receive her work email, however, when she shares it with her friends and family, they will see her personal email. As she updates the data in each of her personas, the changes will be reflected in each person that she has shared the data with.\nTo learn more about polymorphism see this article post\nRelated Resources #\rNamespace \u0026rarr;    "
      })
      .add(
      {
        id: 33,
        href: "/reference/public-private-keys/",
        title: "Public and Private Keys",
        description: "Definition of public key(distributed to the trusted masses), self key(which cannot be looked up any atSign holder other than creator) ,shared key(an only be looked up by an atSign holder with whom the data has been shared), cashed key(a key that was originally created by another atSign owner but is now cached on the Secondary Server of another person's atSign as they were given permission to cache it) and private keys(used in asymmetric key cryptography).\n",
        content: "Definition #\rA private key is used in asymmetric key cryptography. Asymmetric key cryptography is based on applying mathematical functions to numbers to achieve personal secrecy. It uses two keys, one being the private key. If you think of decryption as locking and unlocking padlocks with keys, then the padlock that is locked with a public key can only be unlocked with its corresponding private key.\nOn the other hand, public keys are distributed to the trusted masses. This is done through a public-key distribution channel. This channel should provide authentication and integrity. Someone should not send their public key to the community pretending to have a different public key. Everyone should have their own private and public keys. For example, Bob only needs one private key to receive all correspondence in the community, but Alice needs n public keys to communicate with n entities in the community, one public key for each entity. In other words, Alice needs a ring of public keys.\nHow it works at Atsign #\rA key in the atProtocol can be formed by using any alphanumeric and special characters (UTF-8) excluding \u0026ldquo;@\u0026rdquo;, \u0026ldquo;:\u0026rdquo; and a white space (\u0026quot; \u0026ldquo;). A key in a secondary can be any of the following 5 types:\n  Public Key\n  A public key is a key which can be looked up by any atSign holder.\n  A public key should be part of the scan verb result.\n  Format of the public key should be public:\u0026lt;identifier\u0026gt;:\n  Example:\npublic:location@alice\n The owner of the secondary should be allowed to update or delete the value of a public key.\n   Self Key\n  A Self key is a key which cannot be looked up any atSign holder other than the one created it.\n  A Self key should not be returned in a scan verb result.\n  Format of the Self key should be privatekey:\u0026lt;identifier\u0026gt;:\n  Example:\nprivatekey:pk1@alice\n The owner of the secondary should be allowed to update or delete the value of a private key.\n   Shared key\n A shared key can only be looked up by an atSign holder with whom the data has been shared. A shared key should be part of the scan verb result only for the person who created it and the specific person it has been shared with. Format of the key shared with someone else should be\ncached::\u0026lt;identifier\u0026gt;:  Example:\n@bob:phone@alice\n Note: Above Key should be part of scan verb result for only @alice and @bob\n  The owner of the secondary should be allowed to update or delete the value of a user key.\n More context on shared keys: We know that Atsign uses AES-256 \u0026amp; RSA-2048 for symmetric and asymmetric encryption respectfully.\n  RSA-2048 can encrypt up to 214 bytes which does not constitute for a lot of data. However, because it is asymmetric, we can use it to ensure that you are you by verifying that you have your private key.\n  AES-256 can encrypt around a whopping 250 million terabytes which is practically unlimited. The downside is that because this is a symmetric key, we cannot use it to authorize that you are you since this is shared with the recipient.\n  To remediate this, I can generate an AES(shared) key, and encrypt it using your public RSA key. Then we can decrypt said AES key using your private RSA key. Since you are the only holder of your private key, I can ensure that only the two of us hold the AES key. Now we can share information back-and-forth safely using the AES key as a means of encryption/decryption.\n  Private Key\n Private keys start with an underscore(_) and are not displayed in scan results. Private keys can only be looked up by the owner of the secondary    Cached Key\n  A cached key is a key that was originally created by another atSign owner but is now cached on the Secondary Server of another person\u0026rsquo;s atSign as they were given permission to cache it.\n  A cached key should be listed in the scan verb result for the atSign owner who cached it.\n  Format of the key shared with someone else should be\ncached::\u0026lt;identifier\u0026gt;:\n  Example:\ncached:@bob:phone@alice\n The person who has cached the key should not be allowed to update the cached key.\n  An atSign owner who has created and shared the key should be allowed to update a cached key, and if the \u0026ldquo;autoNotify\u0026rdquo; config parameters is set to true, the updated value should be notified (please refer to the notify verb) and the cached key updated with the new value.\n  If the person who originally shared the keys set the CCD (Cascade delete) to true, the cached key will be deleted when the original key is deleted.\n   "
      })
      .add(
      {
        id: 34,
        href: "/reference/self-encryption-key/",
        title: "Self-Encryption Key",
        description: "Definition of Self-Encryption Key at Atsign: an AES symmetric key that you own for encrypting data for yourself.In the atPlatform, the self-encryption key is used to encrypt data that is stored in your own secondary server. It is crucial that this key is kept secret and owned only by you so that third parties like Atsign cannot see your data.\n",
        content: "Definition #\rSelf-Encryption key is an AES symmetric key that you own for encrypting data for yourself.\natPlatform #\rIn the atPlatform, the self-encryption key is used to encrypt data that is stored in your own secondary server. It is crucial that this key is kept secret and owned only by you so that third parties like Atsign cannot see your data.\nThe self-encryption key is generated during the CRAM process when your PKAM RSA keypair is generated and your atSign is activated.\nRelated Resources #\ratSign \u0026rarr;    Encryption \u0026rarr;    Public and Private Keys \u0026rarr;    CRAM \u0026rarr;    PKAM \u0026rarr;    "
      })
      .add(
      {
        id: 35,
        href: "/reference/cram/",
        title: "CRAM",
        description: "Definition of CRAM (challenge response authentication method): CRAM stands for challenge response authentication mechanism. It is an algorithm/mechanism used in cryptography commonly used for authentication in protocols.\n",
        content: "Definition #\rCRAM is a term you may have heard of when reading about the atPlatform. CRAM stands for challenge response authentication mechanism. It is an algorithm/mechanism used in cryptography commonly used for authentication in protocols.\natPlatform #\rYou use your CRAM secret to activate your atSign and authenticate into your (secondary server)[/atplatform/secondary-server] secondary server for the first time. Once authenticated, you may add, update, delete, and lookup keys in your own secondary server.\nWhen users get their atSign from atsign.com, they receive their CRAM secret in the form of a QR code. A CRAM secret is just a long string of randomly generated characters. The CRAM secret can also be fetched from a REST API since sometimes the QR code can be cumbersome. It is recommended that you let the SDK handle these API requests as it is easier and safer.\nCRAM is made easy with the atPlatform. Since the CRAM secret was generated and given by Atsign, that would be like Atsign generating your password for you. To opposite this, atPlatform\u0026rsquo;s SDKs and authentication services (such as at_onboarding_flutter) make it easy to generate a .atKeys file for subsequent logins to your secondary. This .atKeys file is generated by your device and contains the necessary keys to encrypt/decrypt data in your secondary server and the secondary server of other atSigns. The .atKeys file is closely related to PKAM which you can read more about here.\natProtocol #\rIn the atProtocol, CRAM is a verb.\nThe cram verb is used to bootstrap authenticate one\u0026rsquo;s own self as an owner of a Secondary Server. It is intended to be used once until a set of PKI keys are cut on the owner\u0026rsquo;s mobile device and from then on we use the pkam verb.\nThe following regex represents the syntax of the cram verb: r'^cram:(?\u0026lt;digest\u0026gt;.+$)'\nLearn more about the cram verb here .\nKey Definitions #\r CRAM: challenge response authentication mechanism CRAM Secret: a long string of characters associated with each atSign for activation .atKeys file: holds encryption keys for PKAM authenticating OTP: one-time password  Related Resources #\rProtocol Specification \u0026rarr;    Secondary Server \u0026rarr;    Encryption \u0026rarr;    PKAM \u0026rarr;    "
      })
      .add(
      {
        id: 36,
        href: "/reference/pkam/",
        title: "PKAM",
        description: "Definition of PKAM (public key authentication mechanism, a mechanism for encrypting/decrypting data between two parties). The PKAM public key is given out to other clients who want to send data to you. The data they send to you is encrypted using your public key and is decrypted using your private key.\n",
        content: "Definition #\rPKAM stands for public key authentication mechanism. It is a mechanism for encrypting/decrypting data between two parties.\natPlatform #\rThe atPlatform\u0026rsquo;s packages and SDKs help apps generate a RSA PKAM public/private keypair and save this in a .atKeys file containing these keys. Since Atsign provided the CRAM secret, this poses an vulnerability since this is a shared secret between you and Atsign. To avert this, a new RSA PKAM keypair is generated on your device and the CRAM secret is no longer valid. The PKAM keypair is used for all subsequent authentications, and as you are the only one with access to the private key, you are the only one who is able to authenticate.\nThe PKAM public key is given out to other clients who want to send data to you. The data they send to you is encrypted using your public key and is decrypted using your private key. Read more on asymmetric encryption here.\nThe PKAM private key used by the client to authenticate into their own secondary server. It is just like the CRAM secret except it was generated by you (as opposed by Atsign) and completely owned by you.\natProtocol #\rIn the atProtocol PKAM is a verb.\nThe pkam verb is used to authenticate one\u0026rsquo;s own self as an owner of a Secondary Server using a PKI style authentication.\nThe following regex represents the syntax of the pkam verb: ^pkam:(?\u0026lt;signature\u0026gt;.+$)\nLearn more about the pkam verb here.\nKey Definitions #\r PKAM: public key authentication mechanism PKI: public key infrastructure RSA: \u0026ldquo;Rivest-Shamir-Aldeman\u0026rdquo; is an assymetric encryption algorithm. Read more here  Related Resources #\rProtocol Specification \u0026rarr;    Secondary Server \u0026rarr;    Encryption \u0026rarr;    CRAM \u0026rarr;    "
      })
      .add(
      {
        id: 37,
        href: "/reference/namespace/",
        title: "Namespace",
        description: "Definition of Namespace in the atPlatform - a unique container to place data in. More in the context of the apps, namespaces are just atSigns associated with each app so a secondary server can be aware of which data belongs to whom.\n",
        content: "Definition #\rAtsign\u0026rsquo;s CTO, Colin Constable says this in an interview on Namespaces: \u0026ldquo;Most people are familiar with DNS (domain name system): for example, if you type “cnn.com”, “fox.com”, or “bbc.com”, you get news sites. But you can’t just type in “news” and expect the Internet to tell you which particular flavor of news you want. We need to create namespaces so that humans can remember the name and computers can translate it to Internet protocol. Once there is a namespace like “bbc.com,” you can reliably know that somebody owns that particular space, and it needs to be managed so that there are no clashes. For instance, you don’t want to type “bbc.com” and get sent to Amazon’s home page. That’s why they have to be unique, and we at Atsign created a new namespace with @Namespace.\u0026rdquo;\nFeel free to read more on namespaces here.\natPlatform #\rNamespace is a common term that may occur when reading about the atPlatform. To put it simply, a namespace is a unique container to place data in. More in the context of the apps, namespaces are just atSigns associated with each app so a secondary server can be aware of which data belongs to who. See an example below.\nExample #\rWhen you ask someone “What is my name?” you will get a different answer for every person you ask. If you ask your parents, they may answer with a sweet nickname they gave you. If you ask your friends, they may answer with your first name. This is how namespaces work. You can ask different namespaces for data and get a different answer every time.\nIn the context of the atProtocol, refer to the example below to improve your understanding.\nExample:\n phone.mospherepro (phone is the key, mospherepro is the namespace) will answer with data=123-123-1234 phone.alice (phone is the key, alice is the namespace) will answer with data=444-444-4444 phone.wavi (phone is the key, wavi is the namespace) will answer with data=555-555-5555  This is the beauty of the atProtocol. Each namespace replied with different information. People control their own data and which applications get what data. With the atPlatform, the people become in control of their own data privacy.\nRelated Resources #\rProtocol Specification \u0026rarr;    Secondary Server \u0026rarr;    Polymorphism \u0026rarr;    "
      })
      .add(
      {
        id: 38,
        href: "/reference/synchronization/",
        title: "Synchronization",
        description: "Definition of Synchronization in the atPlatform: encryption of your data with atProtocol, with your self encryption key and stored on your device. Periodically, this data is copied securely over to a dedicated cloud server which only you can decrypt and read since you are the only one who owns the private key. No one else, including **Atsign** can read your data.\n",
        content: "Definition #\rWith atProtocol, your data is encrypted with your self encryption key and stored on your device. Periodically, this data is copied securely over to a dedicated cloud server which only you can decrypt and read since you are the only one who owns the private key. No one else, including Atsign can read your data. This process is known as synchronization.\natPlatform #\rFirst, we need to touch up on what local \u0026amp; remote secondaries are:\n Remote Secondary: A microservice with a DNS address that makes it addressable, provides a backup of your data in case of loss on the phone, and provides a joining place to synchronize data if you have more than one device. Local Secondary: A copy of data that allows for fast interactivity and offline support. Every activated atSign gets its remote secondary which runs on Atsign\u0026rsquo;s servers. All of your data is signed and encrypted, so Atsign cannot see it.  Synchronization aims to keep both local and remote secondaries with the same data. If by any chance the device is lost, then the data can be retrieved from the remote secondary:\nTwo main scenarios require synchronization. The first occurs when your device is offline. Updates are saved to your device but not synced to the server. Once the device goes online, those saved updates get synced to the server. The second scenario is when you have multiple devices: one device is offline while the other is online. Updates from the online device will get synced to the server periodically. However, the offline device will not be able to pull the changes until it is back online.\nTo read more about synchronization and how it works check out this Medium Article we made.\nRelated Resources #\rRoot Server \u0026rarr;    Secondary Server \u0026rarr;    "
      })
      .add(
      {
        id: 39,
        href: "/reference/notification/",
        title: "Notification",
        description: "Definition of Notification in the atPlatform: Notification enables developers to notify another atSign of some data event. It is used to notify another atSign that data from your secondary server was modified (updated or deleted). Some example notifications include: the key's value is updated, the key is deleted, the key's metadata changed, and more. The notify verb in the atProtocol (which enables you to notify the atSign user of some data event.), and Definition of Monitor in the atPlatform: The monitor is used to receive notifications from the other secondary server.\n",
        content: "atPlatform #\rNotification #\rNotification enables developers to notify another atSign of some data event. It is used to notify another atSign that data from your secondary server was modified (updated or deleted). Some example notifications include: the key\u0026rsquo;s value is updated, the key is deleted, the key\u0026rsquo;s metadata changed, and more.\nThe atPlatform takes care of all of the heavy lifting with encryption, verb building, transmission, etc.\nRead more here.\nMonitor #\rMonitor uses notifications.\nThe monitor is used to receive notifications from the other secondary server.\nRead more here.\natProtocol #\rnotify verb #\rThe notify verb enables you to notify the atSign user of some data event.\nThe following is the regex for the notify verb.\nnotify:((?\u0026lt;operation\u0026gt;update|delete):)?(ttl:(?\u0026lt;ttl\u0026gt;\\d+):)?(ttb:(?\u0026lt;ttb\u0026gt;\\d+):)?(ttr:(?\u0026lt;ttr\u0026gt;(-)?\\d+):)?(ccd:(?\u0026lt;ccd\u0026gt;true|false):)?(@(?\u0026lt;forAtSign\u0026gt;[^@:\\s]-)):(?\u0026lt;atKey\u0026gt;[^:]((?!:{2})[^@])+)@(?\u0026lt;atSign\u0026gt;[^@:\\s]+)(:(?\u0026lt;value\u0026gt;.+))?    Regex Snippet Explanation, [argument details], (example)     (?\u0026lt;operation\u0026gt;update|delete):)? Operation of the notification (update|delete)   (ttl:(?\u0026lt;ttl\u0026gt;\\d+):)? TTL (time to live), [integer, 1 or more digits, optional argument]   (ttb:(?\u0026lt;ttb\u0026gt;\\d+):)? TTB (time to birth), [integer, 1 or more digits, optional argument]   (ttr:(?\u0026lt;ttr\u0026gt;(-)?\\d+):)? TTR (time to refresh), [integer, 1 or more digits, can be negative, optional argument], (e.g.: 86400 will refresh once a day)   (ccd:(?\u0026lt;ccd\u0026gt;true|false):)? CCD (cascade delete), [boolean, true|false, optional argument], (e.g.: if the sender deletes their original key and ccd is true, the cached key gets deleted on both the sender\u0026rsquo;s server and the recipient\u0026rsquo;s server)    Following the metadata for creating the notification, next, we mention the AtKey the notification pertains to.\n   AtKey Regex Snippet Explanation, [argument details], (example)     (@(?\u0026lt;forAtSign\u0026gt;[^@:\\s]-)) The atSign the notification is for, [string, required argument], (@alice)   (?\u0026lt;atKey\u0026gt;[^:]((?!:{2})[^@])+) AtKey name, [string, required argument], (e.g. \u0026lsquo;signing_publickey\u0026rsquo;)   @ at separator   (?\u0026lt;atSign\u0026gt;[^@:\\s]+)(:(?\u0026lt;value\u0026gt;.+)) sharedBy/creator atSign, [string], (e.g. \u0026lsquo;bob\u0026rsquo;)    Example use of the notify verb:\nnotify:update:@farinataanxious:test@33thesad Response:\nIf the notification was successfully sent, then the id of the notification is returned.\ndata:0ce0d150-52bf-4f09-a473-5c64777b1c53 Read more here.\nnotify:list verb #\rNotify list returns a list of notifications\nRegex\nnotify:(list (?\u0026lt;regex\u0026gt;.-)|list$) Response:\nIf the user is the owner, returns a list of received notifications. if a user is pol authenticated user, return a list of sent notifications\ndata:[{\u0026#34;id\u0026#34;:\u0026#34;0e5e9e89-c9cb-423b-8972-8c5487215990\u0026#34;,\u0026#34;from\u0026#34;:\u0026#34;@alice\u0026#34;,\u0026#34;to\u0026#34;:\u0026#34;@bob\u0026#34;,\u0026#34;key\u0026#34;:\u0026#34;@bob:phone@alice\u0026#34;,\u0026#34;value\u0026#34;:12345,\u0026#34;operation\u0026#34;:\u0026#34;update\u0026#34;,\u0026#34;epochMillis\u0026#34;:1603714122636}] notify:remove verb #\rNotify remove will remove a notification from the Notify List\nNot to be confused with notify:delete which notifies another atSign of a key change event.\nExample:\nnotify:remove:\u0026lt;notification-id\u0026gt; Response\ndata:success monitor verb #\rThe monitor verb streams received notifications.\nThe following is the regex\n^monitor$|^monitor ?(?\u0026lt;regex\u0026gt;.-)?)$ Response:\nReturns a stream of notifications\n@alice@monitor notification: {\u0026#34;id\u0026#34;:\u0026#34;773e226d-dac2-4269-b1ee-64d7ce93a42f\u0026#34;,\u0026#34;from\u0026#34;:\u0026#34;@bob\u0026#34;,\u0026#34;to\u0026#34;:\u0026#34;@alice\u0026#34;,\u0026#34;key\u0026#34;:\u0026#34;@alice:phone@bob\u0026#34;,\u0026#34;value\u0026#34;:null,\u0026#34;operation\u0026#34;:\u0026#34;update\u0026#34;,\u0026#34;epochMillis\u0026#34;:1603714720965} Read more here.\nRelated Resources #\rProtocol Specification \u0026rarr;    "
      })
      .add(
      {
        id: 40,
        href: "/tutorials/dess/aws/7-activation/",
        title: "Activation of atSign",
        description: "Get started on activating atSign for use on apps built on atPlatform\n",
        content: "Next up we need to activate it\nLogin to your dashboard at atsign.com/dashboard\nOpen “my atSigns”\nOpen “managed” of atSign you are registering”\nNavigate to Advance settings:\nIf you have already activated your atSign you will be prompted to erase all your data first\nOnce done you are able to link your atSign with your private dess. Use your domain and port number with which you have created service on your cloud instance and press Activate.\nYou should see that your atSign is being activated in your dashboard:\nThis can take several minutes so go get cup of coffee, some tea maybe, stretch your body and pray you haven’t made any mistakes!\nOnce the activation process completes you are welcomed by green Activated.\nYou can now open @buzz or @wavi and register your atSign via QR code and generate your keys!\nCONGRATULATIONS\n"
      })
      .add(
      {
        id: 41,
        href: "/tutorials/dess/gcp/7-activation/",
        title: "Activation of atSign",
        description: "Get started on activating atSign for use on apps built on atPlatform\n",
        content: "Next up we need to activate it\nLogin to your dashboard at https://my.atsign.com/dashboard\nOpen “my atSigns”\nOpen “managed” of atSign you are registering”\nNavigate to Advance settings:\nIf you have already activated your atSign you will be prompted to erase all your data first\nOnce done you are able to link your atSign with your private dess. Use your domain and port number with which you have created service on your cloud instance and press Activate\nYou should see that your atSign is being activated in your dashboard:\nThe activation will be completed once you have used your QR code from dess and retrieved your keys.\nOnce the activation process completes you are welcomed by green Activated.\nCONGRATULATIONS\n"
      })
      .add(
      {
        id: 42,
        href: "/tutorials/dess/rpi/7-activation/",
        title: "Activation of atSign",
        description: "Get started on activating atSign for use on apps built on atPlatform\n",
        content: "Next up we need to activate it\nLogin to your dashboard at atsign.com/dashboard\nOpen “my atSigns”\nOpen “managed” of atSign you are registering”\nNavigate to Advance settings:\nIf you have already activated your atSign you will be prompted to erase all your data first\nOnce done you are able to link your atSign with your private dess. Use your domain and port number with which you have created service on your cloud instance and press Activate.\nYou should see that your atSign is being activated in your dashboard:\nThis can take several minutes so go get cup of coffee, some tea maybe, stretch your body and pray you haven’t made any mistakes!\nOnce the activation process completes you are welcomed by green Activated.\nYou can now open @buzz or atmospherePro and register your atSign via QR code and generate your keys!\nCONGRATULATIONS\n"
      })
      .add(
      {
        id: 43,
        href: "/tutorials/at-dude/3-app_architecture/",
        title: "App Architecture",
        description: "How to architect an app built on the atPlatform",
        content: "In this tutorial, we will we\u0026rsquo;ll implement the MVC+S architecture pattern in our app.\nWe will create the folders that will store our models, views, commands and services.\nModels #\rThe models are only concerned with storing and manipulation of data our app needs.\nIn your terminal type:\nmkdir lib/models The model files will be saved in this folder.\nViews #\rThe views are the widgets and screen in our application.\nIn your terminal type:\nmkdir -p lib/views/widgets mkdir lib/views/screens The screens and widgets files will be saved in these folders.\nCommands #\rThe commands are the various application logic.\nIn your terminal type:\nmkdir lib/commands The controller files will be saved in this folder.\nServices #\rThe services fetch data from the network or local storage and return it to the commands.\nIn your terminal type:\nmkdir lib/services The services files will be saved in this folder.\nConclusion #\rThe commands will call the services to fetch data from the network and then send the fetched data to the model. The views are bound to the model using provider or an alternative. As the models are updated the views will be updated. Alternatively the commands can update the views directly.\nIn the next step we\u0026rsquo;ll explore this further as we implement onboarding on the atPlatform.\n"
      })
      .add(
      {
        id: 44,
        href: "/sdk/flutter/at_client_manager/",
        title: "AtClientManager",
        description: "The atPlatform AtClientManager in Flutter and Dart(for NotificationService, SyncService, Client application preferences and making client method calls)\n",
        content: "Overview #\rThe AtClientManager is in charge of overseeing and managing all client services.It makes NotificationService, SyncService, and Client application preferences easier to access from its instance.It is also used for client method calls.\nBased on your need you can either install at_client_mobile or at_client and import. After that you will be able to make an AtClientManager Instance. Now to Initialize the AtClient instance , the setCurrentAtsign method needs to be called.\nAtClientManager.getInstance().setCurrentAtSign(\u0026#39;@alice\u0026#39;, \u0026#39;wavi\u0026#39;, \u0026lt;preference\u0026gt;); The setCurrentAtSign method accepts the following arguments: currentAtSign, namespace and the preferences. The currentAtsign argument accepts an atSign , namespace accepts the namespace of the app and the preference accepts AtClientPreference value which we are going to discuss next.\nAfter Initializing you are ready to make calls of client methods and services. The AtClientManager Instance has a getter atClient which returns an instance of AtClient.\nUsage #\rTo access CRUD methods :\nAtClient atClient = atClientManager.atClient; NotificationService\nNotification service gives back a stream of notifications from the server to the subscribing client.\nTo access NotificationService methods :\nNotificationService notificationService = atClientManager.notificationService; Example\n await atClientManager.notificationService.notify(NotificationParams.forUpdate(\u0026lt;key\u0026gt;,value: \u0026lt;value\u0026gt;)); SyncService\nSyncService syncs the client app and remote secondary server\u0026rsquo;s changes. If the client app\u0026rsquo;s changes are ahead, it pushes the changes to the remote secondary. If the remote secondary is ahead, it pulls the changes to the client app.\nSyncService which is responsible for invoking the sync :\nSyncService syncService = atClientManager.syncService; "
      })
      .add(
      {
        id: 45,
        href: "/sdk/flutter/at_client_preference/",
        title: "AtClientPreference",
        description: "The atPlatform AtClientPreference in Flutter and Dart\n",
        content: "Overview #\rAtClientPreference is used to configure the preferences of an atPlatform application. It offers a variety of attributes to give a developer ultimate flexibility.\n   Attributes Description Optional/Mandatory Default Value     hiveStoragePath Local device path of hive storage Mandatory N/A   commitLogPath Local device path of commit log Mandatory N/A   isLocalStoreRequired Specify whether local store is required Optional false   cramSecret Shared secret of the atSign Mandatory N/A   keyStoreSecret Secret key to encrypt keystore data Mandatory N/A   privateKey Private key of the atSign Mandatory N/A   namespace Specifies the namespace of an app. Mandatory N/A   rootDomain Domain of the root server. Defaults to root.atsign.com Optional root.atsign.org   rootPort Port of the root server. Defaults to 64 Optional 64   syncIntervalMins Frequency of sync tasks to run in minutes. Defaults to 10 minutes. Optional 10   outboundConnectionTimeout Idle time in milliseconds of connection to secondary server. Defaults to 10 minutes. Optional 600000   maxDataSize Maximum data size a secondary can store. Temporary solution. Have to fetch this from the server using stats verb. Optional 512000   downloadPath Default path to download stream files Mandatory N/A   syncRegex Regex to perform sync Mandatory N/A   syncBatchSize Number of keys to batch for sync to secondary server Optional 5   syncPageLimit Number of keys to pull from cloud secondary to local secondary in a single call. Optional 10    For Local device paths we recommend the path_provider package.\nUsage #\rFuture\u0026lt;AtClientPreference\u0026gt; loadAtClientPreference() async { var dir = await getApplicationSupportDirectory(); return AtClientPreference() ..rootDomain = \u0026#39;root.atsign.org\u0026#39; ..namespace = \u0026#39;sdkExample\u0026#39; ..hiveStoragePath = dir.path ..commitLogPath = dir.path ..isLocalStoreRequired = true // TODO set the rest of your AtClientPreference here ; } "
      })
      .add(
      {
        id: 46,
        href: "/contribute/this-site/shortcodes/button/",
        title: "Buttons",
        description: "Button shortcodes used in atsign.dev",
        content: "\nbutton/link #\rA button that links to another page.\n   Attribute Description     href The html href to the content when the button is clicked.   type The button style (Any bootstrap style, defaults to \u0026lsquo;primary\u0026rsquo;)   text The label for the button.    Note: Only primary and secondary types are fully supported.\nExample #\rSecondary   Primary  \n{{\u0026lt;button/linkhref=\u0026#34;#\u0026#34;type=\u0026#34;secondary\u0026#34;text=\u0026#34;Secondary\u0026#34;\u0026gt;}} {{\u0026lt;button/linkhref=\u0026#34;#\u0026#34;type=\u0026#34;primary\u0026#34;text=\u0026#34;Primary\u0026#34;\u0026gt;}} "
      })
      .add(
      {
        id: 47,
        href: "/contribute/this-site/shortcodes/card/",
        title: "Cards",
        description: "Card shortcodes used in atsign.dev",
        content: "\ncard/breadcrumb #\rA breadcrumb style card that links to another page.\n   Attribute Description     href The html href to the content when the card is clicked.   first The first text element in the breadcrumb   second The second text element in the breadcrumb   third The third text element in the breadcrumb    Example #\rFirst \u0026rarr;    First \u0026rarr; Second \u0026rarr;    First \u0026rarr; Second \u0026rarr; Third \u0026rarr;   {{\u0026lt;card/breadcrumbhref=\u0026#34;#\u0026#34;first=\u0026#34;First\u0026#34;\u0026gt;}} {{\u0026lt;card/breadcrumbhref=\u0026#34;#\u0026#34;first=\u0026#34;First\u0026#34;second=\u0026#34;Second\u0026#34;\u0026gt;}} {{\u0026lt;card/breadcrumbhref=\u0026#34;#\u0026#34;first=\u0026#34;First\u0026#34;second=\u0026#34;Second\u0026#34;third=\u0026#34;Third\u0026#34;\u0026gt;}} card/feature #\rA feature style card that links to another page.\n   Attribute Description     href The html href to the content when the card is clicked.   class Additional css classes to apply to the card.   title The title for the card   text The text in the body of the card    See bootstrap cards for more information.\nExample #\rMy Card My text goes here...\n   {{\u0026lt;card/featureclass=\u0026#34;w-50\u0026#34;href=\u0026#34;#\u0026#34;title=\u0026#34;My Card\u0026#34;text=\u0026#34;My text goes here...\u0026#34;\u0026gt;}} card/group #\rA wrapper for cards using bootstrap\u0026rsquo;s deck style.\nNo attributes for this shortcode.\nExample #\rFeature Card 1 This is the first card to show the deck example.\n   Feature Card 2 This is the second card to show the deck example.\n    {{\u0026lt;card/group\u0026gt;}} {{\u0026lt;card/featureclass=\u0026#34;w-25 min-w-250\u0026#34;href=\u0026#34;/contribute/shortcodes/card\u0026#34;title=\u0026#34;Feature Card 1\u0026#34;text=\u0026#34;This is the first card to show the deck example.\u0026#34;\u0026gt;}} {{\u0026lt;card/featureclass=\u0026#34;w-25 min-w-250\u0026#34;href=\u0026#34;/contribute/shortcodes/card\u0026#34;title=\u0026#34;Feature Card 2\u0026#34;text=\u0026#34;This is the second card to show the deck example.\u0026#34;\u0026gt;}} {{\u0026lt;/card/group\u0026gt;}} card/grid #\rA css-grid based wrapper for cards best used for an even number of cards.\n   Attribute Description     class Additional css classes to apply to the wrapper.    Feature Card 1 This is the first card to show the deck example.\n   Feature Card 2 This is the second card to show the deck example.\n    Example #\r{{\u0026lt;card/gridclass=\u0026#34;grid-col-4 grid-col-md-2 grid-col-sm-1\u0026#34;\u0026gt;}} {{\u0026lt;card/featureclass=\u0026#34;w-25 min-w-250\u0026#34;href=\u0026#34;/contribute/shortcodes/card\u0026#34;title=\u0026#34;Feature Card 1\u0026#34;text=\u0026#34;This is the first card to show the deck example.\u0026#34;\u0026gt;}} {{\u0026lt;card/featureclass=\u0026#34;w-25 min-w-250\u0026#34;href=\u0026#34;/contribute/shortcodes/card\u0026#34;title=\u0026#34;Feature Card 2\u0026#34;text=\u0026#34;This is the second card to show the deck example.\u0026#34;\u0026gt;}} {{\u0026lt;/card/grid\u0026gt;}} card/flex #\rA css flexbox based wrapper to automatically layout cards.\n   Attribute Description     class Additional css classes to apply to the wrapper.    Feature Card 1 This is the first card to show the deck example.\n   Feature Card 2 This is the second card to show the deck example.\n    card/social #\rA card for linking to a social platform.\n   Attribute Description     class Additional css classes to apply to the bootstrap card element.   title The title for the card.   img-src The src for the img element.   img-class Additional css classes to apply to the img tag.   img-type The type of image, can be one of \u0026lsquo;page\u0026rsquo;, \u0026lsquo;asset\u0026rsquo;, or \u0026lsquo;remote\u0026rsquo; (default)   bg-class Additional css classes to apply to the img container    Example #\r Wavi Start contributing, this is where the code hits the fan.   {{\u0026lt;card/socialhref=\u0026#34;https://github.com/\u0026#34;class=\u0026#34;w-25 min-w-250\u0026#34;title=\u0026#34;Wavi\u0026#34;img-src=\u0026#34;https://wavi.ng/assets/img/wavimetalogo.jpeg\u0026#34;img-class=\u0026#34;bg-white p-5\u0026#34;\u0026gt;}} Start contributing, this is where the code hits the fan. {{\u0026lt;/card/social\u0026gt;}} card/showcase #\rA card for showcasing a single item.\n   Attribute Description     class Additional css classes to apply to the bootstrap card element.   title The title for the card.   img-src The src for the img element.   img-class Additional css classes to apply to the img tag.   img-type The type of image, can be one of \u0026lsquo;page\u0026rsquo;, \u0026lsquo;asset\u0026rsquo;, or \u0026lsquo;remote\u0026rsquo; (default)   bg-class Additional css classes to apply to the img container    Example #\r Wavi Your space on the privacy-first web.\nLearn more  Wavi.ng    {{\u0026lt;card/showcaseclass=\u0026#34;w-50\u0026#34;title=\u0026#34;Wavi\u0026#34;img-src=\u0026#34;https://wavi.ng/assets/img/wavimetalogo.jpeg\u0026#34;img-class=\u0026#34;bg-white p-5\u0026#34;\u0026gt;}} {{\u0026lt;card/showcase-item\u0026gt;}}Your space on the privacy-first web.{{\u0026lt;/card/showcase-item\u0026gt;}} {{\u0026lt;card/showcase-linkhref=\u0026#34;https://atsign.com/apps/wavi\u0026#34;\u0026gt;}}Learn more{{\u0026lt;/card/showcase-link\u0026gt;}} {{\u0026lt;card/showcase-linkhref=\u0026#34;https://wavi.ng/@wavi\u0026#34;\u0026gt;}}Wavi.ng{{\u0026lt;/card/showcase-link\u0026gt;}} {{\u0026lt;/card/showcase\u0026gt;}} "
      })
      .add(
      {
        id: 48,
        href: "/sdk/java/clis/",
        title: "CLIs",
        description: "Keys in Java(different from the Dart SDK AtKeys), Prerequisite, List of CLIs\n",
        content: "There are various CLIs (command-line interfaces) that uses the Java SDK to interact with a secondary server.\nPrerequisite #\rTo run the CLIs:\n Edit settings in at_client/src/main/resources/config.yaml cd to at_java/at_client and run mvn install Run java -cp \u0026quot;target/client-1.0-SNAPSHOT.jar:target/lib/*\u0026quot; org.atsign.client.cli.\u0026lt;CLI\u0026gt; \u0026lt;args\u0026gt;. Replace “\u0026lt;CLI\u0026gt;” with one of the CLIs (Register, Get, Scan,\u0026hellip;) and “\u0026lt;args\u0026gt;” with  List of CLIs #\rIf you want to interact with the atProtocol through a command-line experience, see our CLIs in src/main/java/org/atsign/client/cli/. Note that to use some CLIs, you must have the keys in a keys/ directory in the root project.\n Delete - delete AtKeys that you’ve shared with another atSign Get - get AtKeys that you’ve shared with another atSign Onboard - authenticate with CRAM and generate your PKI keypair Register - register an atSign (uses Onboard CLI) Scan - see what keys you have and view metadata Share - share an AtKey with another atSign REPL - use raw atProtocol     Name Description Arguments     Register to claim a free atsign. Requires one-time-password received on the provided email to validate. Registers the free atsign to provided email. email   Onboard utility which \u0026lsquo;onboards\u0026rsquo; a new atSign. Once onboarding is complete it creates the all-important keys file. Onboard is a subset of Register rootUrl, atSign, cramSecret   Share share something with another atSign rootUrl, your AtSign, other AtSign, keyName to share, including namespace, keyValue to share, a string, ttr,   Get get something that was shared by another atSign rootUrl, your AtSign, other AtSign, name of shared key, including namespace,   Delete delete something that was previously shared rootUrl, other atSign, name of shared key including namespace   Scan for seeing what keys exist in the secondary and view metadata rootUrl, atSign, verbose true or false, scan regex   REPL use raw atProtocol, handles PKAM auth rootUrl, atSign, seeEncryptedNotifications true or false    "
      })
      .add(
      {
        id: 49,
        href: "/tutorials/dess/rpi/5-rasp-connection/",
        title: "Connection to Raspberry Pi",
        description: "Connection to Raspberry Pi\n",
        content: "Now we will connect to our Raspberry Pi (which should be connected via ethernet or wireless to our network). We will be using Putty, although there are other options such as OpenSSH. To begin with, let\u0026rsquo;s download the software.\nWe will choose SSH (port 22) and our Raspberry Pi local IP address: If you are using a public-key (if not, this step is not necessary), you will have to choose the directory where it is located, in SSH-\u0026gt;Auth options: After that, click \u0026lsquo;Open\u0026rsquo; button, located in the main menu. The connection will start. Now we are ready to start configuring our private dess.\n"
      })
      .add(
      {
        id: 50,
        href: "/tutorials/at-dude/_6_controller/",
        title: "Controller",
        description: "Documentation for \"Controller\" in atDude app\n",
        content: "   TOC     Dude Model   From Json   To Json   Other Methods   Profile Model    In this codelab we will discuss the controller class of the dude app and how it interacts with the DudeService() class.\nDude Controller #\rThe DudeController() class controls the state management for the app.\n/// A Dude class that controls the UI update when the [DudeService] methods are called. class DudeController with ChangeNotifier { List\u0026lt;DudeModel\u0026gt; _dudes = []; List\u0026lt;DudeModel\u0026gt; get dudes { _dudes.sort((a, b) =\u0026gt; b.timeSent.compareTo(a.timeSent)); return _dudes; } /// Get dudes sent to the current astign.  Future\u0026lt;void\u0026gt; getDudes() async { _dudes = await DudeService.getInstance().getDudes(); notifyListeners(); } List\u0026lt;AtContact\u0026gt; _contacts = []; List\u0026lt;AtContact\u0026gt; get contacts { return [..._contacts]; } int get dudeCount =\u0026gt; dudes.length; /// Get contacts for the current atsign.  Future\u0026lt;void\u0026gt; getContacts() async {...} /// Deletes dudes sent to the current atsign.  ///  void deleteDude(DudeModel dude) async {...} } We extend this class with a ChangeNotifier() because the app uses the Provider package as state management.\nLines 5 to 8 returns a List of DudeModel sorted from oldest to newest dudes. Lines 18 to 20 returns a List of AtContact. The AtContacts class contains properties about the contacts of an atsign like the contacts atsign.\n/// Get dudes sent to the current astign.  Future\u0026lt;void\u0026gt; getDudes() async { _dudes = await DudeService.getInstance().getDudes(); notifyListeners(); } This method calls DudeService.getDudes() method followed by notify listeners so all widgets that depends on the DudeModel() will be rebuilt. ie dudes will be added to the screen.\n/// Get contacts for the current atsign.  Future\u0026lt;void\u0026gt; getContacts() async { _contacts = await DudeService.getInstance().getContactList() ?? []; notifyListeners(); } This method calls DudeService.getContactList() method followed by notify listeners so all widgets that depends on the DudeModel() will be rebuilt. ie contacts will be added or removed from the screen. If the list of contacts is null an empty list is returned instead.\n/// Deletes dudes sent to the current atsign.  ///  void deleteDude(DudeModel dude) async { bool result = await DudeService.getInstance().deleteDude(dude); result ? _dudes = await DudeService.getInstance().getDudes() : null; notifyListeners(); } This method calls DudeService.deleteDude() method followed by notify listeners so all widgets that depends on the DudeModel() will be rebuilt. i.e the deleted dude will be removed from the screen.\n"
      })
      .add(
      {
        id: 51,
        href: "/sdk/java/instance/",
        title: "Creating an instance of AtClient",
        description: "Create an instance of AtClient with one of the various factory methods\n",
        content: "To create an instance of AtClient, use one of the factory methods. Note: you must have the .atKeys file in the ~/.atsign/keys directory. You can generate a .atKeys file from using the Register CLI or Onboaring CLI if you already own the atSign.\nString ATSIGN_STR = \u0026#34;@bob\u0026#34;; AtSign atSign = new AtSign(ATSIGN_STR); AtClient atClient = null; try { atClient = AtClient.withRemoteSecondary(atSign); } catch (AtException e) { System.err.println(e); e.printStackTrace(); } // use atClient There are a number of other factory methods for creating an AtClient instance to suit your needs. See the image below.\n"
      })
      .add(
      {
        id: 52,
        href: "/tutorials/at-dude/_5_dude_service/",
        title: "Dude Service",
        description: "Documentation for \"Dude Service\" in atDude app\n",
        content: "   TOC    | Dude Service | | Dude Service Imports | | Dude Service Properties | | Local Notification | | Local Notification imports | | Properties of LocalNotificationService |\nThere are three service classes in the dude app, they are NavigationServices(), DudeServices() and LocalNotificationServices(). In this code lab we will explore the properties of these classes.\nDudeService #\rThis class is a singleton that makes all the network calls to the atPlatform.\nImports #\rimport \u0026#39;dart:async\u0026#39;; import \u0026#39;dart:convert\u0026#39;; import \u0026#39;dart:typed_data\u0026#39;; import \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:at_app_flutter/at_app_flutter.dart\u0026#39;; import \u0026#39;package:at_client/src/service/notification_service.dart\u0026#39;; import \u0026#39;package:at_client_mobile/at_client_mobile.dart\u0026#39;; import \u0026#39;package:at_commons/at_commons.dart\u0026#39;; import \u0026#39;package:at_contact/at_contact.dart\u0026#39;; import \u0026#39;package:at_contacts_flutter/services/contact_service.dart\u0026#39;; import \u0026#39;package:at_utils/at_utils.dart\u0026#39;; import \u0026#39;../models/dude_model.dart\u0026#39;; import \u0026#39;../models/profile_model.dart\u0026#39;; import \u0026#39;local_notification_service.dart\u0026#39;; All the packages that starts with at_ are packages that allows us to interact with the atPlatform.\n at_app_flutter A library that help developers build flutter applications on the atPlatform. at_client The at_client library is the non-platform specific Client SDK which provides the essential methods for building an app using the atProtocol. at_client_mobile A Flutter extension to the at_client library which adds support for mobile, desktop and IoT devices. at_commons A library of Dart and Flutter utility classes that are used across other components of the @‎platform. at_contacts: A Dart library for managing contact data that developers can use for their applications. at_contacts_flutter A Flutter plugin project to provide ease of managing contacts for an @‎sign using @‎platform. at_utils A Dart library that contains various utility classes such as atSign, atmetadata, configuration, and logger.  We discussed the dude and profile model in the previous codelab.\nProperties of DudeService #\rclass DudeService { static final DudeService _singleton = DudeService._internal(); DudeService._internal(); factory DudeService.getInstance() { return _singleton; } final AtSignLogger _logger = AtSignLogger(AtEnv.appNamespace); AtClient? atClient; AtClientService? atClientService; var atClientManager = AtClientManager.getInstance(); static var contactService = ContactService(); Future\u0026lt;bool\u0026gt; putDude( DudeModel dude, String contactAtsign, BuildContext context) async {...} /// Receives all dudes sent to the current atsign.  Future\u0026lt;List\u0026lt;DudeModel\u0026gt;\u0026gt; getDudes() async {...} /// Subscribes to the stream of data being sent to the current atsign.  void monitorNotifications(BuildContext context) {...} /// Fetch the current atsign contacts.  Future\u0026lt;List\u0026lt;AtContact\u0026gt;?\u0026gt; getContactList() {...} /// Fetch the current atsign profile image  Future\u0026lt;Uint8List?\u0026gt; getCurrentAtsignProfileImage() async {...} /// Fetch details for the current atsign  Future\u0026lt;dynamic\u0026gt; getCurrentAtsignContactDetails() async {...} /// Get the profile stats for the current atsign  Future\u0026lt;ProfileModel\u0026gt; getProfile() async {...} /// Save senders atsign to the current atsign local secondary.  Future\u0026lt;void\u0026gt; putSenderAtsign( {required String senderAtsign, required String receiverAtsign}) async {...} /// Get sender atsign saved in the current atsign remote secondary.  Future\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; getSenderAtsigns() async {...} /// Delete dude sent to the current atsign.  Future\u0026lt;bool\u0026gt; deleteDude(DudeModel dude) async {...} } } Line 2 - 6 creates a singleton pattern. Every time DudeService.getInstance() is called it will always return the same object. You can read more about it in on stackoverflow.\nThe AtSignLogger in line 9 is used to generate server logs. It also helps to classify logs into subclasses live severe, info and warning based on importance.\nLines 11 to 14 creates instances of AtClient(), AtClientService(), AtClientManager() and ContactService().\n AtClient AtClient should be used to perform Create, Read, Update or Delete (CRUD) operations on the secondary server. AtClientService Class that manages your atsigns. AtClientManager Factory class responsible for giving the instances of AtClient and other services for a given atSign.  DudeService Methods #\rWe\u0026rsquo;ll now discuss the network calls that are made to the atPlatform to perform various CRUD operation.\nputDude Method #\rThis method saves the DudeModel and ProfileModel on the atPlatform.\n/// Saves Dude to the receiver\u0026#39;s remote secondary and stats to the sender\u0026#39;s local secondary.  Future\u0026lt;bool\u0026gt; putDude( DudeModel dude, String contactAtsign, BuildContext context) async { bool isCompleted = false; dude.saveSender(atClient!.getCurrentAtSign()!); dude.saveReceiver(contactAtsign); dude.saveId(); ... } Line 4 instantiates isCompleted to false. This is to display a CircularProgressIndicator on the UI while this method is being executed.\nLine 5 saves the currentAtsign or signed in user to the DudeModel.receiver property.\nLine 6 saves the contactAtsign to the DudeModel.receiver property. The contactAtsign is the atsign that was selected as the receiver in the UI.\nline 7 generates a UUID and saves it to the DudeModel.id property.\nMetadata \u0026amp; AtKeys #\rFuture\u0026lt;bool\u0026gt; putDude( DudeModel dude, String contactAtsign, BuildContext context) async { ... var metaData = Metadata() ..isEncrypted = true ..namespaceAware = true ..ttr = -1 ..isPublic = false; var key = AtKey() ..key = dude.id ..sharedBy = dude.sender ..sharedWith = dude.receiver ..metadata = metaData ..namespace = \u0026#39;\u0026#39;; dude.saveTimeSent(); ... } Lines 4 to 8 creates the MetaData. This class describes the characteristics of the AtKey being saved on the atPlatform. eg. The AtKey will not be available to everyone on the atPlatform because isPublic is set to false. The list of Metadata properties can be viewed here.\nLines 10 to 15 creates the AtKey. This class acts as an unique identifier of the data being saved to the atPlatform. If the atPlatform was a table the @key would represent the row.\nIt is important to remember that the atsign that creates the data owns the data. Therefore, the sharedWith property controls who the data is being shared with and the shareBy property determine who the owner of the data is. This is not true in every case, I\u0026rsquo;ll explain the exception next.\nLine 17 saves the current time to the DudeModel.timeSent property.\nNotify #\rThey are two ways to save data on the atPlatform. It can be saved on the sender secondary server or the receiver secondary server, We\u0026rsquo;ll discuss the latter\nFuture\u0026lt;bool\u0026gt; putDude( DudeModel dude, String contactAtsign, BuildContext context) async { ... await atClientManager.notificationService.notify( NotificationParams.forUpdate( key, value: json.encode(dude.toJson()), ), onSuccess: (notification) async {}); ... } Lines 4 to 9 saves the the method we use to save data on the receiver secondary server. The reason we want to save the dude on the receiver server is because we want the receiver to have the permission to delete the dude after listening to it.\nThe NotificationParams.forUpdate() method accepts an Atkey and a value arguments. We pass the AtKey we created previously in line 6 and in line 7 we pass in a string as the value.\njson.encode(dude.toJson()) converts the DudeModel to a string.\nSaving Profile Model data #\rFuture\u0026lt;bool\u0026gt; putDude( DudeModel dude, String contactAtsign, BuildContext context) async { ... var profileMetaData = Metadata() ..isEncrypted = true ..namespaceAware = true ..isPublic = false; var profileKey = AtKey() ..key = \u0026#39;dude_profile_\u0026#39; + dude.sender.replaceFirst(\u0026#39;@\u0026#39;, \u0026#39;\u0026#39;) ..sharedBy = dude.sender ..metadata = profileMetaData; ... Lines 5 to 8 creates the Profile Metadata and lines 10 to 13 creates the Profile AtKey. No sharedWith property was provided because the data will not be shared with any other atsign.\nFuture\u0026lt;bool\u0026gt; putDude( DudeModel dude, String contactAtsign, BuildContext context) async { ... try { AtValue profileAtValue = await atClient!.get(profileKey); ProfileModel profileModel = ProfileModel.fromJson(jsonDecode(profileAtValue.value)); profileModel.saveId(dude.sender); profileModel.dudesSent += 1; profileModel.dudeHours += dude.duration; if (dude.duration \u0026gt; profileModel.longestDude) { profileModel.saveLongestDude(dude.duration); } await atClient! .put( profileKey, json.encode( profileModel.toJson(), ), ) .whenComplete(() =\u0026gt; isCompleted = true) .onError((error, stackTrace) =\u0026gt; isCompleted = false); } ... ) Lines 5 to 7 retrieves the ProfileModel data from the remote secondary. We will discuss the AtClient!.get() method later in this code lab.\nLines 9 to 10 updated the ProfileModel by incrementing the previous values.\nLines 11 to 12 compare the current dude.duration with the previous profileModel.longestDude and saves the current dude.duration if it is the longest duration of the two.\nLines 14 to 22 saves the profileModel to remote secondary.\nThe code was placed in a try block because it will throw an exception if there is no ProfileModel in remote secondary.\nFuture\u0026lt;bool\u0026gt; putDude( DudeModel dude, String contactAtsign, BuildContext context) async { ... } catch (e) { // Exception should be thrown the first time a profile is created for an atsign  await atClient! .put( profileKey, json.encode( ProfileModel( id: dude.sender, dudesSent: 1, dudeHours: dude.duration, longestDude: dude.duration) .toJson(), ), ) .whenComplete(() =\u0026gt; isCompleted = true) .onError((error, stackTrace) =\u0026gt; isCompleted = false); } return isCompleted; } Lines 8 to 20 saves the profileModel to the remote secondary. This code only execute the first time a profileModel is created for an atSign.\nGetting Dudes from remote secondary #\r/// Receives all dudes sent to the current atsign.  Future\u0026lt;List\u0026lt;DudeModel\u0026gt;\u0026gt; getDudes() async { List\u0026lt;AtKey\u0026gt; receivedKeysList = []; var key = await atClient!.getAtKeys( regex: \u0026#39;^cached:.*@.+\\$\u0026#39;, // sharedBy: atsign,  ); receivedKeysList.addAll(key); ... } // @blizzard30:some_uuid.at_skeleton_app@assault30 // @blizzard30:signing_privatekey@blizzard30  This method retrieves the DudeModel thats stored on remote secondary.\nLines 3 instantiates an empty list that will eventually store AtKeys.\nLines 4 to 7 grabs all the AtKey stored in the current atSign remote secondary.\nLine 9 add the keys to the receivedKeysList.\n/// Receives all dudes sent to the current atsign.  Future\u0026lt;List\u0026lt;DudeModel\u0026gt;\u0026gt; getDudes() async { ... List\u0026lt;DudeModel\u0026gt; dudes = []; for (AtKey key in receivedKeysList) { try { if (key.sharedBy != null \u0026amp;\u0026amp; key.key!.length == 36) { AtValue _keyValue = await atClient!.get(AtKey()..key = key.key!); dudes.add(DudeModel.fromJson(jsonDecode(_keyValue.value))); } } on Exception catch (e) { ScaffoldMessenger(child: SnackBar(content: Text(e.toString()))); } } return dudes; } Line 4 instantiates an empty list that will eventually store the DudeModel extracted from remote secondary.\nLines 5 to 15 loops through every AtKey in the receivedKeysList.\nline 7 filters the receivedKeysList to only select AtKey that was shared and where the key/id is a UUID.\nline 8 extract the AtValue of the AtKey\nline 10 converts the value of the AtValue to a DudeModel and add it to the empty dudes list.\nline 13 shows a SnackBar with the exception message if an error occurs.\nLine 16 returns the List of DudeModel.\nMonitor Notification #\rThe atPlatform has its own Notification Service that monitors being sent to the current atSign.\nvoid monitorNotifications(BuildContext context) { atClientManager.notificationService .subscribe(regex: \u0026#39;at_skeleton_app\u0026#39;) .listen( (AtNotification notification) async { String? currentAtsign = DudeService.getInstance().atClient!.getCurrentAtSign(); if (currentAtsign == notification.to) { await LocalNotificationService().showNotifications( notification.id.length, \u0026#39;Dude\u0026#39;, \u0026#39;${notification.from}sent you a dude\u0026#39;, 1); } }, ); } Line 3 subscribe to data being sent over the dude app.\nIn line the listen method expects an option function. This function receives an AtNotification that allows us to control what data we want to listen for as show in lines 5 to 16.\nIn line 6 to 7 we get the current atsign. In line 9 we filter the notification to ensure the notification is being sent to the current atsign.\nIn lines 10 to 14 we show the user a notification that a dude was sent to them by the atSign of the sender.\nGet Contacts #\r/// Fetch the current atsign contacts.  Future\u0026lt;List\u0026lt;AtContact\u0026gt;?\u0026gt; getContactList() { return contactService.fetchContacts(); } Line 3 returns a list of AtContacts. An AtContact is a class containing properties of other atsigns that was selected as a contact.\nGet Profile #\rThis method retrieves the ProfileModel of the current atsign.\n/// Get the profile stats for the current atsign  Future\u0026lt;ProfileModel\u0026gt; getProfile() async { return await atClient! .getAtKeys( regex: \u0026#39;dude_profile_\u0026#39;, sharedBy: atClient!.getCurrentAtSign(), ) .then( (value) =\u0026gt; atClient!.get(value[0]).then( (value) =\u0026gt; ProfileModel.fromJson( jsonDecode(value.value), ), ), ); } Lines 3 to 7 gets a list profile models AtKeys, there only one AtKey in the list. Line 9 returns the AtValue and lines 10 to 11 returns the ProfileModel class.\nDelete Dude #\rThis dude deletes a dude from remote secondary.\n/// Delete dude sent to the current atsign.  Future\u0026lt;bool\u0026gt; deleteDude(DudeModel dude) async { try { List\u0026lt;AtKey\u0026gt; dudeAtKey = await atClient!.getAtKeys(regex: dude.id); bool isDeleted = await atClient!.delete(dudeAtKey[0]); return isDeleted; } on AtClientException catch (atClientExcep) { _logger.severe(\u0026#39;❌ AtClientException : ${atClientExcep.errorMessage}\u0026#39;); return false; } catch (e) { _logger.severe(\u0026#39;❌ Exception : ${e.toString()}\u0026#39;); return false; } } Line 4 returns a list containing a dude AtKey that corresponds with the uuid of the DudeModel. Line 5 deletes it.\nLines 8 to 13 logs the exception if an error occurs.\n"
      })
      .add(
      {
        id: 53,
        href: "/tutorials/sshnp/4-finish/",
        title: "Finish",
        description: "Connect to your remote device via ssh without any open ports\n",
        content: "Connect via ssh\nYou will get insutrctions on how to ssh to your remote device.\nExample:\nssh -p 3456 cconstab@localhost See our GitHub page for more information.\n"
      })
      .add(
      {
        id: 54,
        href: "/contribute/atmosphere-pro/3-contribution-guidelines/",
        title: "Following the Contributing Guidelines",
        description: "Learn how to set up your environment to properly make contributions.\n",
        content: "Here at Atsign, we LOVE pull requests. You may have been part of various teams \u0026amp; projects where they followed different styles of contributing to GitHub repositories (squash \u0026amp; rebase, or committing to the same branch,..). But here at Atsign, all of our projects, apps, and services are open-sourced and the fork and pull request process seems to work the best for us.\nSee the CONTRIBUTING.md file in the root of the repository to see how we want you to set up your repository when making contributions. Either read the updated guidelines above, or continue reading below (the steps are roughly the same).\n Add a new remote \u0026ldquo;upstream\u0026rdquo; to be our version of the repository  git remote add upstream git@github.com:atsign-foundation/atmosphere_pro.git Set pushing to disabled. This is so you can\u0026rsquo;t accidentally push to the upstream repository. We want everyone to make pull requests so our developers can review your code and make suggestions.  git remote set-url upstream --push DISABLED Do git remote -v. If you see something similar to this, then you\u0026rsquo;ve done it successfully.  origin git@github.com:yourname/atmosphere_pro.git (fetch) origin git@github.com:yourname/atmosphere_pro.git (push) upstream git@github.com:atsign-foundation/atmosphere_pro.git (fetch) upstream DISABLED (push) "
      })
      .add(
      {
        id: 55,
        href: "/contribute/atmosphere-pro/2-git-clone/",
        title: "Forking the Repository",
        description: "Fork and Cloning the Atmosphere Pro repository to your GitHub account\n",
        content: "Now, it is time to fork the atmosphere\n  Make sure you are logged into GitHub\n  Head over to atmosphere_pro and click \u0026ldquo;Fork\u0026rdquo;.\n   You should be given prompted to create a new repository on your account. Change these settings to your needs. Change the repository name, description, or copy all of the branches if you\u0026rsquo;d like. We recommend the default settings.   Now that you have the repository on your own personal GitHub account, you can get the GitHub url by clicking on \u0026ldquo;Code,\u0026rdquo; clicking \u0026ldquo;HTTPS,\u0026rdquo; then copy the url.    On your local machine, cd into the directory where you want to clone the repository. This can be done either on your terminal or on the terminal in your code editor.\n  Now that you are in the right directory, run the following command:\n  git clone \u0026lt;YOUR_FORKED_REPOSITORY_URL\u0026gt; . \u0026lt;YOUR_FORKED_REPOSITORY_URL\u0026gt; is the URL you copied from step 4.\n Tada! You\u0026rsquo;ve cloned the repository. Just run flutter pub get to get the packages the atmosphere pro relies on.\n  Then do flutter run in the root project directory.\n  "
      })
      .add(
      {
        id: 56,
        href: "/sdk/java/getting-secondary/",
        title: "Getting Secondary.Address",
        description: "There are a number to get the address of a secondary server belonging to an atSign( using Secondary.Address Finder and Secondary.Address Constructor)\n",
        content: "There are a number to get the address of a secondary server belonging to an atSign.\n You have the atSign and rootUrl  // Use Secondary.AddressFinder String ROOT_URL = \u0026#34;root.atsign.org:64\u0026#34;; String ATSIGN_STR = \u0026#34;@bob\u0026#34;; AtSign atSign = new AtSign(ATSIGN_STR); Secondary.AddressFinder saFinder = ArgsUtil.createAddressFinder(ROOT_URL); Secondary.Address sAddress = null; try { sAddress = saFinder.findSecondary(atSign); } catch (NoSuchSecondaryException | IOException e) { System.err.println(e); e.printStackTrace(); } // use sAddress  You have the host and port of the secondary server  // Use Secondary.Address constructor String HOST = \u0026#34;ddbe1816-f40f-5b9f-bb2a-ba1492b93aec.staging0001.atsign.zone\u0026#34;; int PORT = 3198; Secondary.Address sAddress = new Secondary.Address(HOST, PORT); // use sAddress "
      })
      .add(
      {
        id: 57,
        href: "/tutorials/at-dude/2-getting_started/",
        title: "Getting Started",
        description: "How to get started on the atPlatform",
        content: "In this tutorial, we will be using VS Code, but feel free to use any editor of your choice.\nTo get started, open your terminal and cd to the folder where you want to start this project. Type the following in your terminal:\ndart pub global activate at_app The above command will allow you to run the at_app scripts from the command line when you are not currently inside a package.\nNext, let\u0026rsquo;s create our atDude Flutter project by running the command below:\nat_app create . --project-name \u0026#34;at_dude\u0026#34; This command will create a Flutter project with the necessary packages required to build on the atPlatform.\nRun your project with the below command to see the default app.\nflutter run -d \u0026lt; your android or ios device \u0026gt; If successful, you should see the default atPlatform Flutter app.\n\nIn the next step, we\u0026rsquo;ll implement the MVC+S architecture pattern in our app.\n"
      })
      .add(
      {
        id: 58,
        href: "/tutorials/at-dude/_9_history_screen/",
        title: "History Screen",
        description: "Documentation for \"History\" in atDude app\n",
        content: ""
      })
      .add(
      {
        id: 59,
        href: "/contribute/this-site/shortcodes/image/",
        title: "Images",
        description: "Image shortcodes used in atsign.dev",
        content: "\nInclude an image using the 3 different types:\n remote (default) page asset     Attribute Description     class Additional css classes to apply to the img element.   src The src for the image (url or path).   type The type of image (remote, page or global).    image - remote #\rUsed when you would like to use an image from another site (with permission of course!).\nYou do not need to specify a type for this since it is default.\nSet src to the url of the image.\nExample #\r{{\u0026lt;imageclass=\u0026#34;bg-white\u0026#34;src=\u0026#34;https://atsign.com/wp-content/uploads/2020/09/The@Company-Logo@2x.png.webp\u0026#34;\u0026gt;}} image - page #\rUsed when an image belongs to this site, and only needs to be visible from a single page.\nSet the type to \u0026ldquo;page\u0026rdquo; for this.\nSet the src to the filename for your image.\nIf your page is not named \u0026ldquo;index.md\u0026rdquo; or \u0026ldquo;_index.md\u0026rdquo;:\n Create a folder with the same name as your page (without the \u0026ldquo;.md\u0026rdquo;). Place your file in this folder and rename it to index.md Place your image in the folder, and you should be good to go!.  Your folder structure should look like this after:\n- my_page (folder) \\ - index.md \\ - my_image.png Example #\r{{\u0026lt;imageclass=\u0026#34;bg-white\u0026#34;src=\u0026#34;my_image.png\u0026#34;type=\u0026#34;page\u0026#34;\u0026gt;}} image - asset #\rUsed when an image belongs to this site, and needs to be visible from multiple pages.\nSet the type to \u0026ldquo;asset\u0026rdquo; for this.\nSet the src to the filepath for your image from within the assets folder.\nExample #\r{{\u0026lt;imageclass=\u0026#34;bg-white\u0026#34;src=\u0026#34;img/contributing/my_global_image.png\u0026#34;type=\u0026#34;asset\u0026#34;\u0026gt;}} "
      })
      .add(
      {
        id: 60,
        href: "/sdk/java/installation/",
        title: "Installation",
        description: "Check Installation requirements, Cloning the Client, Compile at_java as dependancy using JAR",
        content: "Requirements #\rThere are two requirements for developing with at_java on your machine.\n Java 8 or higher Maven A code editor, see getting started with Java  Compile JAR #\rIf you\u0026rsquo;d like to use at_java as a dependency, you can compile at_java into a JAR by following the instructions below:\n cd at_client to be in the at_client directory. mvn install JAR file created in target/ named similarly to client-1.0-SNAPSHOT.jar If you run into dependency issues, you may need to add the dependencies used by the at_java. Look in at_client/pom.xml and copy everything within the \u0026lt;dependencies\u0026gt;\u0026lt;/dependencies\u0026gt; tags and paste that in your pom.xml that you have in your Java project.  Maven Dependency #\rUnder construction\nCloning the Client #\rIf you\u0026rsquo;d like to make contributions or edit the client yourself, make a form of the repository by heading to the repository and clicking \u0026ldquo;Fork\u0026rdquo; to fork the repository on your own GitHub account.\nOnce forked, you can make changes to your own fork version of the repository.\nGet it on your local machine by doing the following (. is the directory you want to clone the repository in; in this case, we are cloning it in our current directory so be sure to cd into the directory you want the repository in):\ngit clone https://github.com/\u0026lt;YOUR_GITHUB_USERNAME\u0026gt;/at_java.git . "
      })
      .add(
      {
        id: 61,
        href: "/tutorials/dess/aws/5-setup-and-deployment/",
        title: "Instance setup and dess deployment",
        description: "Setup your AWS Instance for dess deployment\n",
        content: "Open your LightSail console\nBy now you should see your instance in “Running state”\nOpen it and on tab Connect click on “Connect using SSH”\nYou should be presented by a new window with command line:\nBefore we do anything else, we should update the system:\nsudo apt update \u0026amp;\u0026amp; sudo apt upgrade This might take some time, but it will make sure we have latest repository information and the system is up to date.\nNext make sure curl is installed, we will use curl to pull the dess installation file:\nsudo apt install curl\nFinally, run the dess installer:\ncurl -fsSL https://getdess.atsign.com | sudo bash\nOnce the installer is finished you should be prompted like so:\nDess installed, please move on to the sudo dess-create command.\n"
      })
      .add(
      {
        id: 62,
        href: "/tutorials/dess/gcp/5-setup-and-deployment/",
        title: "Instance setup and dess deployment",
        description: "Setting up Google Cloud Platform (GCP) instance for dess deployment\n",
        content: "Open your GCP console at https://console.cloud.google.com/compute/instances and search for VM instances\nBy now you should see your instance in “Running state”\nClick on the SSH button and connect to your instance.\nYou should be presented by new window with command line:\nBefore we do anything else, we should update the system:\nsudo apt update \u0026amp;\u0026amp; sudo apt upgrade\nThis might take some time, but it will make sure we have latest repository information and the system is up to date.\nNext make sure curl is installed, we will use curl to pull the dess installation file:\nsudo apt install curl Finally, run the dess installer:\ncurl -fsSL https://getdess.atsign.com | sudo bash\nOnce the installer is finished you should be prompted like so:\nDess installed, please move on to the sudo dess-create command.\n"
      })
      .add(
      {
        id: 63,
        href: "/contribute/atmosphere-pro/1-introduction/",
        title: "Introduction",
        description: "Requirements for contributing to Atmosphere Pro",
        content: "In this tutorial, we will be cloning our project so that you can make contributions to our end-to-end encrypted file transfer app, atmosphere pro. To get started, you will need the following:\n Git A GitHub account A code editor like VSCode for coding in Dart/Flutter. The Flutter framework An environment to test and run the application (Android, iOS, macOS, or Windows).  "
      })
      .add(
      {
        id: 64,
        href: "/sdk/flutter/introduction/",
        title: "Introduction",
        description: "Introduction to the atPlatform in Flutter and Dart\n",
        content: "Our Dart/Flutter SDK takes full advantage of the atProtocol and implements all the necessary features like encryption key generation, cram \u0026amp; pkam authentication, verb building, end-to-end encrypted data sharing, encrypting self data, and much more.\nWhat\u0026rsquo;s Covered #\rThis is where you can quickly learn and update yourself on various atPlatform concepts.\nIf you haven\u0026rsquo;t already, we recommend you head to Get Started Flutter Development first.\nThe following is covered in this codelab:\n Onboarding - process of activating an atSign and/or authenticating the atSign into its secondary server. AtClientPreference - object used to configure preferences in your atPlatform application such as the namespace, hiveStoragePath, and maxDataSize. AtClientManager - an object with various services such the Client, the NotificationService, and the SyncService. Key Basics - learn how keys are stored in the atServer and how to manipulate them.  Other Services #\rOur atPlatform has a lot to offer for Dart/Flutter developers.\n at_widgets - Flutter widgets for using various aspects of the atPlatform at_demos - collection of demo applications to help you on your atPlatform journey at_app - command-line utility for atPlatform developers at_tools - other atPlatform tools (at_cli, at_cram, at_pkam,\u0026hellip;)  Explore our GitHub page atsign-foundation to see more of our amazing projects and tools.\nOur Dart/Flutter packages are available on our pub.dev page.\nContact #\rTalk to us about anything! Questions, feedback, suggestions, partnerships, events, anything!\nReach out to us on our Discord or by email - info@atsign.com\nLet\u0026rsquo;s Go! #\rIf you\u0026rsquo;re ready to dive in, head onto the next page. Let\u0026rsquo;s flip the internet!\n"
      })
      .add(
      {
        id: 65,
        href: "/sdk/java/introduction/",
        title: "Introduction",
        description: "Learn about the core Atsign platform Java SDK services",
        content: "atProtocol #\rOverview #\rThe atProtocol is the underlying network protocol used by the atPlatform. The atPlatform provides people, entities, and things with unique identifiers called atSigns.\nEach atSign creates its own public and private cryptographic key pair. The private keys are kept private and public keys made available globally through the atProtocol.\nThe atProtocol provides verbs for interacting with fully qualified atSigns and the data in their secondary servers.\nRoot Secondary #\rWhen asking a Root Server for the lookup of a particular atSign the Root Server should respond with a null if the name does not exist and if the name exists the DNS name or address of the @server and the IP port number for that @sign should be returned. The Root Server is the only centralized feature controlled by Atsign.\nSecondary Servers #\rSecondary servers are servers that belong to an atSign and hold data. All of the data in the secondary server is encrypted unless the owner specifically wants to make some data publicly available.\nWhat is at_java? #\rat_java is Atsign’s implementation of the atProtocol. Just like Atsign’s dart libraries, at_java allows you to interact with Atsign’s services like registering atSigns, onboarding, communicating with the root \u0026amp; secondary servers, and more.\nWhere can at_java be used? #\rAs long as the device running at_java has\n Internet Java 8 or higher  Then at_java can be used to add simplicity and security to your Java applications and/or IoT devices running Java.\nat_java is perfect for those who want to interact with low-level atProtocol for whatever the use case is. Whether it be IoT devices sending end-to-end-encrypted data, sharing medical data between patients, or storing data in your Java apps that you can feel safe about owning; the possibilities are endless with the power of the atProtocol.\nAs of writing this (July 20, 2022), at_java only has remote secondary implementation meaning that the device running this service must be connected to the internet.\n"
      })
      .add(
      {
        id: 66,
        href: "/tutorials/at-dude/1-introduction/",
        title: "Introduction",
        description: "Introduction to the atDude tutorial",
        content: "In this tutorial we will build the atDude app. This app is a secure, end-to-end encrypted, peer-to-peer application that allows you to send \u0026lsquo;dudes\u0026rsquo; to your contacts!\nThe longer you press and hold the Dude button, the longer your sent dude will be! You can keep up-to-date with your \u0026lsquo;dude\u0026rsquo; stats to see how much duding you\u0026rsquo;ve done!\nThis app is built on the atPlatform. The atPlatform is an open-source backend platform that allows developers to build end-to-end encrypted applications.\nThe purpose of this tutorial is to guide you through the steps in creating a production-ready app on the atPlatform.\n"
      })
      .add(
      {
        id: 67,
        href: "/tutorials/atmosphere-pro/1-introduction/",
        title: "Introduction",
        description: "Introduction to Atmosphere Pro app built on atPlatform\n",
        content: "introduction\n"
      })
      .add(
      {
        id: 68,
        href: "/tutorials/dess/aws/1-introduction/",
        title: "Introduction",
        description: "Get started on setting up private dess, distributed edge secondary server, using Amazon Web Services (AWS)\n",
        content: "In this step-by-step guide I will walk you through all steps required to setup your own private dess (distributed edge secondary server) using AWS (Amazon Web Services). Please use the index to skip some steps in case you have already completed them.\n"
      })
      .add(
      {
        id: 69,
        href: "/tutorials/dess/gcp/1-introduction/",
        title: "Introduction",
        description: "Introduction to setting up dess on Google Cloud Platform (GCP)\n",
        content: "dess stands for “Distributed Edge Secondary Server” and it is used to host your atSigns on your own secondary server. Refer to the Setup dess guide under Options to learn more.\nIn this step-by-step guide we will walk you through all steps required to setup your own private dess in GCP (Google Cloud Platform) from scratch. Please use index to skip some steps in case you have done them in another way.\n"
      })
      .add(
      {
        id: 70,
        href: "/tutorials/dess/rpi/1-introduction/",
        title: "Introduction",
        description: "Introduction to set up private dess using a Raspberry Pi\n",
        content: "In this step-by-step guide I will walk you through all steps required to setup your own private dess using a Raspberry Pi.\n"
      })
      .add(
      {
        id: 71,
        href: "/sdk/flutter/key_basics/",
        title: "Key Basics",
        description: "Key basics for the atPlatform in Flutter and Dart\n",
        content: "Overview #\rTo store data, atPlatform utilizes a straightforward key-value method. A key serves as a unique identifier in key-value pairs.\nAtKey Structure:\n   Attributes Description Return Type     key Unique Identifier for the data String   sharedWith The atSign to share with String   sharedBy The atSign that is sharing String   namespace The namespace of the app String   metadata  Metadata   isRef  Bool    Metadata #\rMetadata In AtKey allows you to add more aspects of AtKey. If you want your data to live for a given period of time, or if you want it to be born/deleted after a set amount of time, metaData can help you with that.\nMetadata Structure:\n   Attributes Capabilities Return Type     ttl  int   ttb  int   ttr  int   ccd  bool   availableAt  DateTime   expiresAt  DateTime   refreshAt  DateTime   createdAt  DateTime   updatedAt  DateTime   dataSignature  String   sharedKeyStatus  bool   isPublic  bool   isHidden  bool   namespaceAware  bool   isBinary  bool   isEncrypted  bool   isCached  bool    Key Creation rules\nA key in atProtocol has the structure described below.\n\u0026lt;Key Visibility\u0026gt;|\u0026lt;sharedWith\u0026gt;:\u0026lt;entity\u0026gt;.\u0026lt;namespace\u0026gt;@\u0026lt;sharedBy/owner\u0026gt;\nA key in atProtocol should adhere to following rules:\n  Length of a key should not be more than 240 characters (Limited by the current impl of the secondary. Not a protocol limitation)\n  Max of fifty five 7-bit characters for the atSign\n  Allowed characters in an entity are: [\\w._,-’”]   Namespace is mandatory in the current implementation of the protocol\n  If cached then the owner of the key should not be same as current atSign\n  sharedWith and sharedBy/owner cannot be same for a shared key\n  sharedWith and sharedBy/owner should be same for a self key (Private, Hidden (_), Just self)\n  Reserved keys in protocol, private keys and hidden keys cannot be notified Ex: notify:_secret@jagan:sitaram\n  Protocol prevents creation of a key with a owner/sharedBy using an atSign that’s not owned by the current user.\n  Key cannot be a reserved key.\nList of reserved keys:\n privatekey:at_pkam_privatekey privatekey:at_pkam_publickey public:publickey privatekey:privatekey shared_key privatekey:self_encryption_key signing_privatekey public:signing_publickey privatekey:at_secret privatekey:at_secret_deleted    atPlatform CRUD operations\nCreate/Update Data atPlatform SDK exposes two methods to create the data. They are:\n put putMeta  put\nUpdate’s value of key is if it is already present. Otherwise creates a new key.\nTo share a key to another atSign, use AtKey.shared() factory method or populate AtKey.sharedWith with the atSign to whom the data has to be shared. Further, notifies the sharedWith atSign that a key has been created.\nSignature\nFuture\u0026lt;bool\u0026gt; put(AtKey key, dynamic value);\nAccepts an instance of AtKey and value and stores it in the local storage(local secondary) has a key-value pair.\nAtKey represents the key against which the value will be stored. It further describes to whom the data is shared and metadata of the key. key rules\nThe value can be either a textual information or a binary data (e.g. Images, Files etc ). Returns a boolean value that represents the status of the put method. Returns ‘TRUE’ when put is completed successfully, else returns false.\nThrows AtClientException with an error code and error description that describes that cause of the exception.\nputMeta\nUpdates the metadata of the key.\nSignature\nFuture\u0026lt;bool\u0026gt; putMeta(AtKey key);\nAccepts an Instance of AtKey. The Metadata is encapsulated in the AtKey. Set the new/updated metadata to [Atkey.Metadata].\nReturns a boolean value that represents the status of the putMeta method. Returns ‘TRUE’ when putMeta is completed successfully, else returns false.\nThrows AtClientException with an error code and error description that describes that cause of the exception.\nRead Data\nget\nGet the value of the key from the user\u0026rsquo;s cloud secondary. Signature Future\u0026lt;AtValue\u0026gt; get (AtKey key);\nAccepts an Instance of AtKey. The Metadata is encapsulated in the AtKey. Fetch both the value and metadata of the key.\nReturns a boolean value that represents the status of the ‘get’ method. Returns ‘TRUE’ when ‘get’ is completed successfully, else returns false.\nThrows AtClientException with an error code and error description that describes that cause of the exception.\ngetMeta\nGets the metadata of the key.\nSignature\nFuture \u0026lt;bool\u0026gt; getMeta(AtKey key);\nAccepts an Instance of AtKey. The Metadata is encapsulated in the AtKey. Gets the metadata of the key.\nReturns a boolean value that represents the status of the putMeta method. Returns ‘TRUE’ when getMeta is completed successfully, else returns false.\nThrows AtClientException with an error code and error description that describes that cause of the exception.\nDelete Data\nDeletes the key.\nSignature Future\u0026lt;bool\u0026gt; delete(AtKey key);\nAccepts an Instance of AtKey. Deletes the key from the storage. If the key is shared with another atSign, notifies the other atSign on the deletion of the key.\nReturns a boolean value that represents the status of the delete method. Returns ‘TRUE’ when delete is completed successfully, else returns false.\nThrows AtClientException with an error code and error description that describes that cause of the exception.\nList of Keys\ngetKeys\nGet all the keys stored in the user\u0026rsquo;s secondary in string format.\nSignature\nFuture \u0026lt;\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; getKeys({String? regex, String? sharedBy, String? sharedWith});\nIf regex is specified only matching keys are returned, giving you the flexibility to use different regexes for different types of data.\ngetAtKeys\nGet all the keys stored in the user\u0026rsquo;s secondary in [AtKey] format.\nSignature\nFuture \u0026lt;\u0026lt;List\u0026lt;AtKey\u0026gt;\u0026gt; getAtKeys({String? regex, String? sharedBy, String? sharedWith});\nIf regex is specified only matching keys are returned, giving you the flexibility to use different regexes for different types of data.\nNotification\natProtocol data visibility\nThe atProtocol saves data created in a key-value pair format. atProtocol lets you create data with three levels of visibility. They are public, shared and self data. In the atProtocol a piece of data is identified as a certain data type based on the key structure. In the SDK, AtKey exposes abstractions to create keys for the various data types. Below sections describe this in detail.\nPublic data\nPublic data can be looked up without authentication. I.e. if @bob wants to lookup public data in the secondary server of @alice, @bob does not need to prove to @alice that he is @bob to see the data publicly shared by @alice. Public view of the @alice’s data will be the same for any user on the atPlatform. I.e. if @jane and @john look up some public data from @alice, it will be exactly the same as what @bob sees.\nGood examples of public data in the real world are “first name” and the “last name”. We often don’t mind sharing our name with people, even random strangers.\nSigning of public data Public data is signed with the “private keys” of the user. Which means when @alice looks up @bob’s public data, @alice knows for sure that the data is indeed from @bob.\nCreating a public key\nvar publicKey = AtKey.public(\u0026#39;phone\u0026#39;, namespace: \u0026#39;wavi\u0026#39;) .build(); Persisting public data\nfinal atClientManager = await AtClientManager.getInstance() .setCurrentAtSign(‘@alice, \u0026#39;me\u0026#39;, AtClientPreference()); var atClient = atClientManager.atClient; var phoneKey = AtKey.public(\u0026#39;phone\u0026#39;, namespace: \u0026#39;wavi\u0026#39;) .build();; var value = \u0026#39;+1 100 200 300\u0026#39;; var putResult = await atClient.put(phoneKey, value); Shared data\nShared data does exactly what it says it does! It is created in order to share it with other people. These are the people we typically know and trust. When @bob shares his phone number with @alice, then only @alice can see that piece of data. Good examples of shared data in the real world are “phone number” and “email”. We only share these details with the people we know and trust.\nEncryption of shared data\nWhen @bob shares data to @alice, @bob generates a shared key for @alice and encrypts the data with the shared key. Further, the shared key is encrypted with the @alice public key. So the data shared is cryptographically secure.\nCreating a shared key\nvar sharedKey = AtKey.shared(\u0026#39;phone\u0026#39;, namespace: \u0026#39;wavi\u0026#39;) ..sharedWith(\u0026#39;@bob\u0026#39;).build(); Persisting shared data\nfinal atClientManager = await AtClientManager.getInstance() .setCurrentAtSign(‘@alice, \u0026#39;me\u0026#39;, AtClientPreference()); var atClient = atClientManager.atClient; var phoneKey = AtKey.shared(\u0026#39;phone\u0026#39;, namespace: \u0026#39;wavi\u0026#39;) ..sharedWith(\u0026#39;@bob\u0026#39;) .build(); var value = \u0026#39;+1 100 200 300\u0026#39;; var putResult = await atClient.put(phoneKey, value); Self data Self data is created for self. If @bob creates data for self, only @bob and no one else can see the data.\nGood examples of self data are “passwords” and “financial data”. We keep these details to ourselves.\nEncryption of self data\nWhen @bob creates data for self it is encrypted using @bob’s self encryption key.\nCreating a self key\nvar selfKey = AtKey.self(\u0026#39;phone\u0026#39;, namespace: \u0026#39;wavi\u0026#39;) .build(); Persisting self data\nfinal atClientManager = await AtClientManager.getInstance() .setCurrentAtSign(‘@alice, \u0026#39;me\u0026#39;, AtClientPreference()); var atClient = atClientManager.atClient; var phoneKey = AtKey.self(\u0026#39;phone\u0026#39;, namespace: \u0026#39;wavi\u0026#39;) .build(); var value = \u0026#39;+1 100 200 300\u0026#39;; var putResult = await atClient.put(phoneKey, value);  All of the above rules are implemented and exposed using the validate() method on AtKey. These rules are enforced during creation of the data.  Key attributes of atProtocol data\nTTL - Time to live\nTTL (Time To Live) is the duration of time for which the key will be available. TTL is expressed in milliseconds. Adding TTL during the key creation results in the time at which the key expires.\n// Below key expires in 1 minute var phoneKey = (AtKey.shared(\u0026#39;phone\u0026#39;, namespace: \u0026#39;wavi\u0026#39;) ..sharedWith(\u0026#39;bob\u0026#39;) ..timeToLive(60000)) .build(); var value = \u0026#39;+1 100 200 300\u0026#39;; var putResult = await atClient.put(phoneKey, value); Scan/List behavior with TTL A key whose ttl has been set will be listed until a background job that runs at frequent time intervals deletes all the expired keys\nLookup/Get behavior with TTL As long as the key has not expired, a “lookup” of the key returns the value that was set originally. After the key expiry, ‘null’ is returned when the key is looked up for a value.\nTTB - Time to birth\nTTB (Time To Birth) is the span of time within which the key’s value is not available. TTB is expressed in milliseconds. Adding TTB during the key creation results in the time at which the key\u0026rsquo;s value is available.\n// Below key is available after 1 minute var phoneKey = (AtKey.shared(\u0026#39;phone\u0026#39;, namespace: \u0026#39;wavi\u0026#39;) ..sharedWith(\u0026#39;bob\u0026#39;) ..timeToBirth(60000)) .build(); var value = \u0026#39;+1 100 200 300\u0026#39;; var putResult = await atClient.put(phoneKey, value); Scan/List behavior with TTB\nA key whose ttb has been set will be listed.\nLookup/Get behavior with TTB\nUntil the key’s TTB is met, a “lookup” of the key returns ‘null’. After which the original value of the key is returned.\nTTR - Time to refresh\nTTR (Time To Refresh) is the span of time that represents the time interval at which the cached key will be refreshed with a new value(if the original key\u0026rsquo;s value is updated). TTR is expressed in seconds. Further, TTR can also be set to \u0026lsquo;-1\u0026rsquo; which represents the value of the original key will not be updated and therefore the cached key need not be refreshed.\nCacheability\nAll of the data created resides in the secondary server of an atSign. The owner of an atSign can choose to allow the public and the shared data to be cached in the another atSign\n// Below key refreshes everyday // TTR accepts time units in seconds var phoneKey = (AtKey.shared(\u0026#39;phone\u0026#39;, namespace: \u0026#39;wavi\u0026#39;) ..sharedWith(\u0026#39;bob\u0026#39;) ..cache(86400, true)) .build(); var value = \u0026#39;+1 100 200 300\u0026#39;; var putResult = await atClient.put(phoneKey, value); Scan/List behavior with TTR\nAll the keys with TTR and the cached keys that are created as a result of TTR are listed.\nLookup/Get behavior with TTR\nDuring lookup of a key, fetches for availability of the corresponding cached key. If a cached key is available, the value is returned. If cached is not available, fetches the value from the original key.\nUpdate behavior with TTR Only the owner of the key reserves the right to update the value. Updating the cached key’s value is prohibited.\nPropagation of an update to the cached key\nWhen an original key is updated by the creator, the ones who have cached it need to update the cached copy too. This can happen in two ways:\n The Auto-Notify notifies the updated value to another atSign, thereby the cached key’s value is updated. The refresh job in the secondary server  CCD - Cascade delete\nCCD (Cascade delete) compliments the TTR functionality by allowing the owner of the key to decide if the cached key has to be deleted upon the deletion of the original key. CCD accepts a boolean value(either true (or) false). When set to true, upon deletion of the original key, the cached key is also deleted. Setting it to false results in the cached key remaining, even after the original key is deleted.\n"
      })
      .add(
      {
        id: 72,
        href: "/sdk/java/keys/",
        title: "Key Types",
        description: "Learn about how Keys work in the Java SDK\n",
        content: "Overview #\rIf you’ve ever used our dart library before, you’ll be familiar with AtKey.\nJust like how hash maps have a key-value pair, the secondary server holds an AtKey-AtValue pair. To access the AtValue, you must provide an AtKey containing data like the keyName, sharedBy, and/or sharedWith.\nThere are 4 types of keys in at_java. Each key type represents what kind of data it holds and also exhibits different properties.\n PublicKey SharedKey SelfKey PrivateHiddenKey     Key Type Represents Encrypted? Cacheable?     Public Key Public data for authorized/unauthorized people to access No Yes, by everyone   SharedKey Shared data between atSigns Yes, only between the two atSigns Yes, only between the two atSigns   SelfKey Self data for the owner of the atSign Yes, only decryptable with your keys No   PrivateHiddenKey Contains secrets, never synced with remote secondary Yes No    "
      })
      .add(
      {
        id: 73,
        href: "/contribute/this-site/shortcodes/links/",
        title: "Links",
        description: "Links shortcodes used in atsign.dev",
        content: "\nAnchor Tag (a) #\rLinks in your paragraphs\n   Attribute Description     href The html href to the content when the link is clicked.   target (optional) \u0026ldquo;_blank\u0026rdquo; for new tab, \u0026ldquo;_self\u0026rdquo; for same frame (default, *use markdown for self links: [here](www.google.com)),   rel (optional) \u0026ldquo;canonical\u0026rdquo; for canonical links    Example #\ratsign.com  {{\u0026lt;arel=\u0026#34;canonical\u0026#34;target=\u0026#34;_blank\u0026#34;href=\u0026#34;https://atsign.com/\u0026#34;\u0026gt;}} atsign.com {{\u0026lt;/a\u0026gt;}} "
      })
      .add(
      {
        id: 74,
        href: "/tutorials/at-dude/_4_local_notification_services/",
        title: "Local Notification Service",
        description: "Documentation for \"Local Notification Service\" in atDude app\n",
        content: "   TOC     Navigation Service   Dude Service   Dude Service Imports   Dude Service Properties   Local Notification   Local Notification imports   Properties of LocalNotificationService    There are three service classes in the dude app, they are NavigationServices(), DudeServices() and LocalNotificationServices(). In this code lab we will explore the properties of these classes.\nLocalNotificationService #\rThis class contains the configurations required to send in app notification on Android and IOS.\nimports #\rimport \u0026#39;dart:io\u0026#39;; import \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:flutter_local_notifications/flutter_local_notifications.dart\u0026#39;; import \u0026#39;package:timezone/data/latest.dart\u0026#39; as tz; import \u0026#39;package:timezone/timezone.dart\u0026#39; as tz; import \u0026#39;../screens/history_screen.dart\u0026#39;; import \u0026#39;navigation_service.dart\u0026#39;; The flutter_local_notification` package is used to send notifications.\nProperties of LocalNotificationService #\rclass LocalNotificationService { static final LocalNotificationService _notificationService = LocalNotificationService._internal(); factory LocalNotificationService.getInstance() { return _notificationService; } factory LocalNotificationService() { return _notificationService; } final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin(); LocalNotificationService._internal(); Future\u0026lt;void\u0026gt; initNotification() async {...} _requestIOSPermission() {...} /// Shows notification when dude is sent to the current atsign.  ///  /// Notification currently only works in app on android.  Future\u0026lt;void\u0026gt; showNotifications( int id, String title, String body, int seconds) async {...} } Similar to DudeService() this class is a singleton. Lines 13 and 14 instantiates the FlutterLocalNotificationsPlugin.\n"
      })
      .add(
      {
        id: 75,
        href: "/contribute/atmosphere-pro/4-making-contributions/",
        title: "Making Contributions",
        description: "Learn how to properly contribute to the Atmosphere Pro repository\n",
        content: "Now that you have your fork all setup and you\u0026rsquo;ve appropriately setup your repository to be following the Contributing Standards, it\u0026rsquo;s time to get to the fun part- coding!\n Fetch the latest changes from the upstream repository.  git fetch upstream Reset your fork\u0026rsquo;s trunk to be exactly as the upstream trunk branch. IMPORTANT: Do this only at the beginning when you begin working on your contribution. It will overwrite and delete and local changes you\u0026rsquo;ve made and make it exactly as the code we have it in the upstream trunk branch.  git checkout trunk git reset --hard upstream/trunk git push --force Make your changes to the code.  Make edits to your code then stage your changes, commit, then push to your origin trunk.\nBe sure to follow the semantic commits guide to be a truly clean programmer.\n# make changes git add . git commit -m \u0026#34;feat: here are my changes!\u0026#34; # commit message should describe the changes you\u0026#39;ve made git push origin trunk Once you are ready to make a pull request, head over to your personal fork on GitHub and click \u0026ldquo;Pull Requests.\u0026rdquo;  Then click \u0026ldquo;New Pull Request.\u0026rdquo;  Make sure it is going from your own personal trunk to the upstream trunk.   Fill out the PR form. We have an add-on that scans for semantic PRs. Follow the Semantic Guidelines that we use. Your PR title should be something like feat: new encrypted file transfer feature.\n  Create the pull request\n  Congratulations! You are awesome. You\u0026rsquo;ve made a contribution to one of our Flutter apps that aims to \u0026ldquo;Flip the Internet\u0026rdquo; by providing developers a platform to implement end-to-end encryption in their devices and apps.\nHead over to our Discord and give a gentle ping to the managers of the repository to let them know you\u0026rsquo;ve made a contribution.\n"
      })
      .add(
      {
        id: 76,
        href: "/tutorials/at-dude/_2_model/",
        title: "Models",
        description: "Documentation of \"Models\" for atDude app\n",
        content: "   TOC     Dude Model   From Json   To Json   Other Methods   Profile Model    This app uses two model for data management, the dude model and the profile model.\nDude Model #\rThe dude model is a class that represent a dude or a message that will be sent to others on the atPlatform.The dude model class contains the following properties.\nclass DudeModel { late String id; String dude = \u0026#39;\u0026#39;; late String sender; late String receiver; late DateTime timeSent; late Duration duration; DudeModel({ required this.id, required this.dude, required this.sender, required this.receiver, required this.timeSent, required this.duration, }); } ... The value of these properties will be sent to the atPlatform as a string.\nThe receiver and sender properties are necessary for the atPlatform to determine on will send and receive the data and on whose server the data will be saved.\nThe duration property will determine which voiceover will be played. A voiceover will be played to reflect the duration of the dude message.\nFrom Json #\r... DudeModel.fromJson(Map\u0026lt;String, dynamic\u0026gt; json) : this( id: json[\u0026#39;id\u0026#39;] as String, dude: json[\u0026#39;dude\u0026#39;] as String, sender: json[\u0026#39;sender\u0026#39;] as String, receiver: json[\u0026#39;receiver\u0026#39;] as String, timeSent: DateTime.parse((json[\u0026#39;timeSent\u0026#39;])) as DateTime, duration: Duration(milliseconds: json[\u0026#39;duration\u0026#39;]) as Duration); ... This method converts the json received from the atPlatform to the DudeModel() class.\nTo Json #\r... Map\u0026lt;String, dynamic\u0026gt; toJson() { return { \u0026#39;id\u0026#39;: id, \u0026#39;dude\u0026#39;: dude, \u0026#39;sender\u0026#39;: sender, \u0026#39;receiver\u0026#39;: receiver, \u0026#39;timeSent\u0026#39;: timeSent.toIso8601String(), \u0026#39;duration\u0026#39;: duration.inMilliseconds, }; } ... This method converts the DudeModel() instance into a Map.\nOther Methods #\r... void saveId() =\u0026gt; id = const Uuid().v4(); void saveDude(String value) =\u0026gt; dude = value; void saveSender(String value) =\u0026gt; sender = value; void saveReceiver(String value) =\u0026gt; receiver = value; void saveTimeSent() =\u0026gt; timeSent = DateTime.now(); ///Record the duration of a dude.  /// Record the length of a dude use want to send.  void saveDuration(DateTime startTime) { duration = DateTime.now().difference(startTime); } ... These methods will save the values received from the app and save it to an instance of the DudeModel() that will be sent to the atPlatform.\nProfile model #\rThis model keeps track of the number of dudes sent, the number of hours spend duding and the duration of the longest dude.\nclass ProfileModel { late String id; int dudesSent = 0; Duration dudeHours = const Duration(milliseconds: 0); Duration longestDude = const Duration(milliseconds: 0); ProfileModel({ required this.id, required this.dudesSent, required this.dudeHours, required this.longestDude, }); ProfileModel.newDude(); Map\u0026lt;String, dynamic\u0026gt; toJson() { return { \u0026#39;id\u0026#39;: id, \u0026#39;dudesSent\u0026#39;: dudesSent, \u0026#39;dudeHours\u0026#39;: dudeHours.inMilliseconds, \u0026#39;longestDude\u0026#39;: longestDude.inMilliseconds, }; } ProfileModel.fromJson(Map\u0026lt;String, dynamic\u0026gt; json) : this( id: json[\u0026#39;id\u0026#39;] as String, dudesSent: json[\u0026#39;dudesSent\u0026#39;] as int, dudeHours: Duration(milliseconds: json[\u0026#39;dudeHours\u0026#39;]) as Duration, longestDude: Duration(milliseconds: json[\u0026#39;longestDude\u0026#39;]) as Duration, ); // @override  // String toString() {  // return \u0026#39;ProfileModel(id: $id, dude: $dude, sender: $sender, receiver: $receiver, timeSent: $timeSent, duration: $duration)\u0026#39;;  // }  void saveId(String value) =\u0026gt; id = value; void saveDudesSent(int value) =\u0026gt; dudesSent = value; void saveDudeHours(Duration value) =\u0026gt; dudeHours = value; void saveLongestDude(Duration value) =\u0026gt; longestDude = value; bool getChampionStats() { return longestDude \u0026gt;= const Duration(hours: 1); } } "
      })
      .add(
      {
        id: 77,
        href: "/tutorials/at-dude/_3_navigation_service/",
        title: "Navigation Service",
        description: "Documentation for \"Navigation Services\" in atDude app\n",
        content: "   TOC     Navigation Service   Dude Service   Dude Service Imports   Dude Service Properties   Local Notification   Local Notification imports   Properties of LocalNotificationService    There are three service classes in the dude app, they are NavigationServices(), DudeServices() and LocalNotificationServices(). In this code lab we will explore the properties of these classes.\nNavigationService #\rimport \u0026#39;package:flutter/material.dart\u0026#39;; class NavigationService { static GlobalKey\u0026lt;NavigatorState\u0026gt; navKey = GlobalKey(); static GlobalKey\u0026lt;NavigatorState\u0026gt; nesteNavKey = GlobalKey(); } This Class contains two static properties of type GlobalKey. It allows us to get the current context without being inside a builder method.\n"
      })
      .add(
      {
        id: 78,
        href: "/sdk/flutter/onboarding/",
        title: "Onboarding",
        description: "Onboarding on the atPlatform in Flutter and Dart\n",
        content: "Overview #\rThe atPlatform uses secret keys for authenticating an atSign as cryptographically secure replacement for usernames and passwords. To improve developer experience, the atPlatform offers the at_onboarding_flutter package which handles secure management of these secret keys. If you are developing a new atPlatform app, we recommend that you use at_app which can create atPlatform app template that already contains an example of using the at_onboarding_flutter widget.\nOnce the onboarding widget is opened, the user can click one of the four options:\n Upload backup key file - subsequent onboard: person possesses an activated and already onboarded atSign with the .atKeys file) Generate Free atSign - need new atSign: person requires a new atSign and its .atKeys file. Scan QR Code - one-time activation: person has an unactivated atSign (no .atKeys file) but possess the QR code containing the cram secret Activate atSign one-time activation: person has an unactivated atSign (no .atKeys file) but possesses the atSign and access to the email associated with it to provide the OTP.  Installation #\rThe at_onboarding_flutter package provides a widget that can be used to onboard atSigns.\n Add the package by running the following command in your terminal:  flutter pub add at_onboarding_flutter Or add it to your pubspec.yaml manually:  Note: Be sure to check the updated version on pub.dev.\nAlso run flutter pub get to update your dependencies.\ndependencies:flutter:sdk:flutterat_client_mobile:^3.2.6at_utils:^3.0.11at_onboarding_flutter:^5.0.5Usage #\rSimply call the .onboard method whenever you want your app to open the onboarding widget.\nAtOnboarding.onboard( context: context, // BuildContext  config: AtOnboardingConfig( atClientPreference: AtClientPreference() ..rootDomain = AtEnv.rootDomain // access AtEnv from the `at_app_flutter` package  ..namespace = AtEnv.appNamespace ..hiveStoragePath = dir.path ..commitLogPath = dir.path ..isLocalStoreRequired = true, rootEnvironment: AtEnv.rootEnvironment, domain: AtEnv.rootDomain, appAPIKey: AtEnv.appApiKey, ), ); Notes:\n dir is a variable from holding data retrieved from the path_provider package: var dir = await getApplicationSupportDirectory(); AtEnv comes from at_app_flutter which helps with providing various arguments like accessing the .env file and providing the rootDomain and appNamespace constants.  Example #\rThe example below demonstrates the onboarding widget being opened upon pressing this ElevatedButton widget. Since the .onboard method returns a AtOnboardingResult object, we store it in a variable and use it to determine what to do next. If the onboarding process was successful, we move onto a different page using Navigator, otherwise, we display an error.\nElevatedButton( child: const Text(\u0026#39;Onboard an @sign\u0026#39;), onPressed: () async { var dir = await getApplicationSupportDirectory(); // from the `path_provider` package  AtOnboardingResult onboardingResult = await AtOnboarding.onboard( context: context, // BuildContext  config: AtOnboardingConfig( atClientPreference: AtClientPreference() ..rootDomain = AtEnv.rootDomain // access AtEnv from the `at_app_flutter` package  ..namespace = AtEnv.appNamespace ..hiveStoragePath = dir.path ..commitLogPath = dir.path ..isLocalStoreRequired = true, rootEnvironment: AtEnv.rootEnvironment, domain: AtEnv.rootDomain, appAPIKey: AtEnv.appApiKey, ), ); switch (onboardingResult.status) { case AtOnboardingResultStatus.success: Navigator.push(context, MaterialPageRoute(builder: (_) =\u0026gt; const HomeScreen())); break; case AtOnboardingResultStatus.error: ScaffoldMessenger.of(context).showSnackBar( const SnackBar( backgroundColor: Colors.red, content: Text(\u0026#39;An error has occurred\u0026#39;), ), ); break; case AtOnboardingResultStatus.cancel: break; } }, ), Parameters #\rAtOnboarding.onboard #\r   Type Name Description Required? Default Value     BuildContext context The context of the widget that is calling the .onboard method. true    AtOnboardingConfig config The configuration object that contains the preferences for the onboarding widget. true    bool isSwitchingAtSign True - show the UI for switching a new atsign. false - checks if atSign is already onboarded (if already onboarded, does not show UI). false false   String? atSign The new atSign name if switching atSigns (isSwitchingAtSign should be true) false null    AtOnboardingConfig #\rThe AtOnboardingConfig object is used to configure the onboarding widget. It contains the following properties:\n   Type Name Description Required? Default Value     AtClientPreference atClientPreference object used to configure preferences in your atPlatform application such as the namespace, hiveStoragePath, and maxDataSize. true    RootEnvironment (enum) rootEnvironment The set of servers your app will be running and talking to atSigns in (testing, staging, production) true    String? domain The domain of the atDirectoryServer (previously called root server) false root.atsign.org   String? appAPIKey The API authentication key for getting free atsigns     bool hideReferences If true, hides the reference to web pages. false false   bool hideQrScan If true, hides the QR functionality false false    AtOnboardingResult #\rThis object is received when the .onboard method is called. It contains the following properties which can be used in your application:\n   Type Name Description     AtOnboardingResultStatus (enum) status The status of the onboarding process.   String? message The message returned when the onboarding process fails.   String? errorCode The error code when the onboarding process fails.   String? atSign The atSign that was onboarded successfully.    "
      })
      .add(
      {
        id: 79,
        href: "/tutorials/at-dude/4-onboarding/",
        title: "Onboarding",
        description: "How to onboard or authenticate on any app built on the atPlatform",
        content: "In this tutorial, we will build the onboarding screen for the dude app and modify the default onboarding function to make it compatible with our app architecture.\nWith out further ado, let\u0026rsquo;s get back to building the atDude app.\nAt the end of this step our app will look like this,\n\nBefore we get into the onboarding, let\u0026rsquo;s make the UI changes to our app.\nUpdate AppBar #\rThe first thing we will do is change the App bar title to \u0026ldquo;atDude\u0026rdquo; in main.dart.\nMaterialApp( // * The onboarding screen (first screen) debugShowCheckedModeBanner: false, // New home: Scaffold( appBar: AppBar( title: const Text(\u0026#39;atDude\u0026#39;), // Changed ), ), ); The next step is to wrap our ElevatedButton widget with a Column widget and center its mainAxisAlignment.\nMaterialApp( // * The onboarding screen (first screen)  home: ... body: Builder( builder: (context) =\u0026gt; Center( child: Column( // new  mainAxisAlignment: MainAxisAlignment.center, // new  children: [ ElevatedButton( onPressed: ... child: const Text(\u0026#39;Onboard an @sign\u0026#39;), ), ], ), ), ), ); Adding IconButton #\rBefore we add an IconButton widget with the dude logo as the icon property. We need to add the logo to our project.\nType the following in your terminal:\nmkdir -p assets/images/ open pubspec.yaml Add the location of the image folder as shown below.\nflutter: uses-material-design: true assets: - .env - assets/images/ // new Let\u0026rsquo;s create the IconButton as shown below.\nColumn( mainAxisAlignment: MainAxisAlignment.center, children: [ // IconButton New  IconButton( iconSize: 200, onPressed: () {}, icon: Image.asset(\u0026#39;assets/images/dude_logo.png\u0026#39;), ), ElevatedButton( onPressed: () async {...}, child: const Text(\u0026#39;Onboard an @sign\u0026#39;), ), ], ), Refactoring the Onboard Function #\rBefore we get started with this section, let\u0026rsquo;s define a few terms:\nOnboarding - The process of activating an atSign and/or authenticating the atSign into its secondary server.\natsign - An atsign is your digital identity; it ensures that your data is owned and controlled by you. You can pair your device with any app on the atPlatform to access but not store your data.\nWe will make the onboarding code compatible with our architecture by removing it from the “onboard an @sign” button and moving it into an authentication class.\nIn your terminal type:\ntouch lib/services/authentication_service.dart open lib/services/authentication_service.dart Add the following:\nclass AuthenticationService { static final AuthenticationService _singleton = AuthenticationService._internal(); AuthenticationService._internal(); factory AuthenticationService.getInstance() { return _singleton; } } The above code creates a singleton of our class.\nNow we\u0026rsquo;ll create an async method called onboard in our AuthenticationService class. We will then move the contents of the onboardingResult variable inside the ElevatedButton onPressed anonymous function in main.dart, to the this method as shown below.\nclass AuthenticationService { ... Future\u0026lt;AtOnboardingResult\u0026gt; onboard() async { return await AtOnboarding.onboard( context: context, config: AtOnboardingConfig( atClientPreference: await futurePreference, rootEnvironment: AtEnv.rootEnvironment, domain: AtEnv.rootDomain, appAPIKey: AtEnv.appApiKey, ), ); } } Fixing Undefined name errors #\rTo fix the Undefined name errors we need to provide the AtOnboarding.onboard()method with a BuildContext and the AtClientPreference class as shown below.\nimport \u0026#39;package:at_app_flutter/at_app_flutter.dart\u0026#39;; import \u0026#39;package:at_client_mobile/at_client_mobile.dart\u0026#39;; import \u0026#39;package:at_onboarding_flutter/at_onboarding_flutter.dart\u0026#39;; import \u0026#39;package:path_provider/path_provider.dart\u0026#39; show getApplicationSupportDirectory; class AuthenticationService { ... Future\u0026lt;AtOnboardingResult\u0026gt; onboard() async { var dir = await getApplicationSupportDirectory(); // new  var atClientPreference = AtClientPreference() // new  ..rootDomain = AtEnv.rootDomain //new  ..namespace = AtEnv.appNamespace //new  ..hiveStoragePath = dir.path //new  ..commitLogPath = dir.path //new  ..isLocalStoreRequired = true; //new  return AtOnboarding.onboard( context: context, config: AtOnboardingConfig( atClientPreference: atClientPreference, // new  rootEnvironment: AtEnv.rootEnvironment, domain: AtEnv.rootDomain, appAPIKey: AtEnv.appApiKey, ), ); } } We Now need access to the BuildContext, We\u0026rsquo;ll create a separate class for this since we\u0026rsquo;ll be reusing our BuildContext outside of the stateful and stateless widgets.\nIn your terminal type:\ntouch lib/services/navigation_service.dart Add the below code snippet in that file.\nimport \u0026#39;package:flutter/material.dart\u0026#39;; class NavigationService { static GlobalKey\u0026lt;NavigatorState\u0026gt; navKey = GlobalKey(); static GlobalKey\u0026lt;NavigatorState\u0026gt; nestedNavKey = GlobalKey(); } touch lib/services/services.dart open lib/services/services.dart Add the below code to use one import statement to import all export files:\nexport \u0026#39;authentication_service.dart\u0026#39;; export \u0026#39;navigation_service.dart\u0026#39;; In main.dart add the navigatorKey to the materialApp as shown below;\nimport \u0026#39;package:at_dude/services/services.dart\u0026#39;; // new ... Widget build(BuildContext context) { return MaterialApp( // * The onboarding screen (first screen)  navigatorKey: NavigationService.navKey, // new  home: ... ); } In navigation_service.dart add the below code to the onboard() method.\nFuture\u0026lt;AtOnboardingResult\u0026gt; onboard() async { ... return await AtOnboarding.onboard( context: NavigationService.navKey.currentContext!, // new  config: ... ); } That\u0026rsquo;s it, our AuthenticatinService can reach out to the atPlatform to return our AtOnboardingResult. We now need our command to call this service and decide what action to take depending on the returned AtOnboardingResult.\nBase Command #\rRemember, our commands contain our application logic; we’ll first create a base command that all other commands will extend from before creating our onboard command In your terminal type:\ntouch lib/commands/base_command.dart open lib/commands/base_command.dart Create the BaseCommand class with the needed imports as shown below:\nimport \u0026#39;package:provider/provider.dart\u0026#39;; import \u0026#39;../services/services.dart\u0026#39;; abstract class BaseCommand { // Services  AuthenticationService authenticationService = NavigationService.navKey.currentContext!.read(); } We need to provide the services to the widget tree in order for BaseCommand to successfully read the services from the BuildContext. To achieve this we\u0026rsquo;ll make use of the provider package as shown below:\nflutter pub add provider open lib/main.dart import \u0026#39;package:provider/provider.dart\u0026#39;; //new ... class _MyAppState extends State\u0026lt;MyApp\u0026gt; { @override Widget build(BuildContext context) { return MultiProvider( //new  providers: [Provider(create: (c) =\u0026gt; AuthenticationService.getInstance())] // new  child: MaterialApp(), ) } } To learn more about state management using provider check out this flutter article\nOnboard Command #\rNow that we\u0026rsquo;re all set, let\u0026rsquo;s create our Onboard Command. This class method will contain the instructions required to onboard on the atPlatform. In your terminal type:\ntouch lib/commands/onboard_command.dart open lib/commands/onboard_command.dart Add the below code:\nimport \u0026#39;package:at_dude/commands/base_command.dart\u0026#39;; class OnboardCommand extends BaseCommand { Future\u0026lt;void\u0026gt; run() async { var onboardingResult = await authenticationService.onboard(); } } Our Commands will only have one method called run(). This command return a Future\u0026lt;void\u0026gt;.\nMove the remaining code inside the ElevatedButton onPressed anonymous function in main.dart, to the run() method of the OnboardCommand() class as show below:\nimport \u0026#39;package:at_dude/commands/base_command.dart\u0026#39;; import \u0026#39;package:at_dude/services/navigation_service.dart\u0026#39;; // new import \u0026#39;package:at_onboarding_flutter/at_onboarding_result.dart\u0026#39;; // new import \u0026#39;package:flutter/material.dart\u0026#39;; // new  import \u0026#39;../home_screen.dart\u0026#39;; // new  class OnboardCommand extends BaseCommand { Future\u0026lt;void\u0026gt; run() async { var onboardingResult = await authenticationService.onboard(); // Everything Below New  var context = NavigationService.navKey.currentContext!; switch (onboardingResult.status) { case AtOnboardingResultStatus.success: Navigator.push( context, MaterialPageRoute(builder: (_) =\u0026gt; const HomeScreen())); break; case AtOnboardingResultStatus.error: ScaffoldMessenger.of(context).showSnackBar( const SnackBar( backgroundColor: Colors.red, content: Text(\u0026#39;An error has occurred\u0026#39;), ), ); break; case AtOnboardingResultStatus.cancel: break; } } } If authenticationService.onboard() return AtOnboardingResultStatus.success we navigate to the HomeScreen, if it returns AtOnboardingResultStatus.error we display a Snackbar on the screen.\nWe will be using the Snackbar widget often so let\u0026rsquo;s extract it into its own method.\nCreating Snackbar Method #\rIn your terminal type\ntouch lib/views/widgets/snackbars.dart open lib/views/widgets/snackbars.dart Add the below code\nimport \u0026#39;package:at_dude/services/navigation_service.dart\u0026#39;; import \u0026#39;package:flutter/material.dart\u0026#39;; class Snackbars extends StatelessWidget { const Snackbars({Key? key}) : super(key: key); static void errorSnackBar({ required String errorMessage, }) { ScaffoldMessenger.of(NavigationService.navKey.currentContext!) .showSnackBar(SnackBar( content: Text( errorMessage, textAlign: TextAlign.center, ), backgroundColor: Theme.of(NavigationService.navKey.currentContext!).errorColor, )); } @override Widget build(BuildContext context) { return Container(); } } We created a class that extends StatelessWidget. This class contains a static void method named errorSnackBar that accepts an errorMessage.\nThis method will save us from calling ScaffoldMessenger.of(context).showSnackBar() every time we want so show a snackbar.\nLet\u0026rsquo;s replace our snackbar part of OnboardCommand.run() method as shown below:\n... import \u0026#39;package:at_dude/views/widgets/snackbars.dart\u0026#39;; // new  class OnboardCommand extends BaseCommand { Future\u0026lt;void\u0026gt; run() async { ... switch (onboardingResult.status) { ... case AtOnboardingResultStatus.error: Snackbars.errorSnackBar(errorMessage: \u0026#39;An error has occurred\u0026#39;); // new  break; case AtOnboardingResultStatus.cancel: break; } } } All done!\nCleaning up main.dart #\rNow we just have to clean up main.dart. Remove the code below from main.dart:\nimport \u0026#39;package:at_onboarding_flutter/at_onboarding_flutter.dart\u0026#39;; // remove  import \u0026#39;package:path_provider/path_provider.dart\u0026#39; // remove show getApplicationSupportDirectory; // remove  Future\u0026lt;AtClientPreference\u0026gt; loadAtClientPreference() async { // remove  var dir = await getApplicationSupportDirectory(); //remove  return AtClientPreference() // remove  ..rootDomain = AtEnv.rootDomain // remove  ..namespace = AtEnv.appNamespace // remove  ..hiveStoragePath = dir.path // remove  ..commitLogPath = dir.path // remove  ..isLocalStoreRequired = true; // remove  // TODO  // * By default, this configuration is suitable for most applications  // * In advanced cases you may need to modify [AtClientPreference]  // * Read more here: https://pub.dev/documentation/at_client/latest/at_client/AtClientPreference-class.html } class _MyAppState extends State\u0026lt;MyApp\u0026gt; { // * load the AtClientPreference in the background // remove  Future\u0026lt;AtClientPreference\u0026gt; futurePreference = loadAtClientPreference(); // Remove  ... } Add the below code to main.dart:\n@override Widget build(BuildContext context) { return MultiProvider( ... child: MaterialApp( ... home: Scaffold( appBar: ..., body: Builder( builder: (context) =\u0026gt; Center( child: Column( ... children: [ ..., ElevatedButton( onPressed: () async { await OnboardCommand().run(); // new  }, child: const Text(\u0026#39;Onboard an @sign\u0026#39;), ), ], ), ), ), ), ), ); } Run your flutter app and everything should work as before.\nflutter run Conclusion #\rFollowing an architecture is like having an organized room, it takes extra effort but it makes navigating and understand your codebase a whole lot easier and cleaner.\nNow that we\u0026rsquo;ve completed the onboarding process, in the next step we\u0026rsquo;ll complete the first screen by adding a reset atsign button and it\u0026rsquo;s functionalities.\n"
      })
      .add(
      {
        id: 80,
        href: "/tutorials/at-dude/_7_onboarding/",
        title: "Onboarding",
        description: "Documentation for \"Onboarding\" in atDude app\n",
        content: ""
      })
      .add(
      {
        id: 81,
        href: "/contribute/this-site/shortcodes/panel/",
        title: "Panel",
        description: "Panel shortcodes used in atsign.dev",
        content: "\npanel/feature #\rA large format feature panel.\n   Attribute Description     class Additional css classes to apply to the panel   title Title to be displayed in the panel   footnote Optional text to be displayed below the inner text   img-src The src for the img element.   img-type The type of image, can be one of \u0026lsquo;page\u0026rsquo;, \u0026lsquo;asset\u0026rsquo;, or \u0026lsquo;remote\u0026rsquo; (default)   img-class Additional css classes to apply to the img tag.   img-right Whether the image should be positioned to the right side or not   theme The color theme for this, can be one of \u0026lsquo;gray\u0026rsquo;, \u0026rsquo;light\u0026rsquo;, or \u0026lsquo;clear\u0026rsquo; (default)    Example #\r Option 1: Clear This panel is an example of the clear theme with its image positioned to the right. Try mixing and matching different themes and orientations to make a page look more visually appealing. Use footnotes to add captions to an image or additional context\n   Option 2: Gray This panel is an example of the gray theme with its image positioned to the left. Make sure that you omit the img-right attribute to get the orientation of the image to appear on the left side. Use footnotes to add captions to an image or additional context\n    Option 3: Light This panel is an example of the light theme with its image positioned to the left. Use footnotes to add captions to an image or additional context\n  {{\u0026lt;panel/featuretitle=\u0026#34;hello\u0026#34;footnote=\u0026#34;foot\u0026#34;img-src=\u0026#34;https://wavi.ng/assets/img/wavimetalogo.jpeg\u0026#34;theme=\u0026#34;clear\u0026#34;img-class=\u0026#34;bg-white\u0026#34;img-right=\u0026#34;true\u0026#34;\u0026gt;}} test {{\u0026lt;/panel/feature\u0026gt;}} "
      })
      .add(
      {
        id: 82,
        href: "/tutorials/dess/aws/2-prerequisites/",
        title: "Pre-requisites",
        description: "Pre-requisites for setting up private dess, distributed edge secondary server, using Amazon Web Services (AWS)\n",
        content: " Registered atSign(s) to setup An AWS account A Fully Qualified Domain Name (FQDN)  1. Registering your atSign #\rThis topic is already well documented. Please follow the guidance of Our FAQs and register via the registrar site.\n2. Sign-up for AWS account #\rIf you are new to AWS, signing up for an account is free! The cost of running dess is about 10$/month. You can create your account at Amazon Web Services and as of June 6th, 2021 there is a “free tier” available which was used during the making of this guide.\naws-free-trial\nFollow the instructions on screen.\naws-sign-up\nOnce you are done with registration, you will be able to login to your aws console.\nMake sure that you select the correct region in the top right corner.\naws-region\nSelect the region that is geographically closest to your location for best performance.\nYou are now setup on AWS and ready to prepare dess.\n3. Register your own fully qualified domain name (FQDN) #\rThis step can be performed at a variety of sites, all with different pricing models. You can use sites like Go Daddy, Namecheap, and many others. However, since we have AWS account, we can use it to register our domain through the Route 53 service.\nIn your AWS console navigate to services in top left corner and select Route 53.\na) Register domain name with AWS. #\rIn your AWS console search for Route 53.\nYou can start looking for your domain directly from here:\nBased on the domain name you search, AWS will give you similar options, and their pricing. As I am looking for the best deal, the .link domain seems like a good option at a cost of 5$ / year.\nIn my case 4atsign.link is free and I will register it by clicking “Add to cart” and continue.\nFill out DNS registration form:\nContinue review details and order. At this point if all is fine you should see your domain request pending:\nThis can take some time so why don’t we move on to next step!\n"
      })
      .add(
      {
        id: 83,
        href: "/tutorials/dess/gcp/2-prerequisites/",
        title: "Pre-requisites",
        description: "Pre-requisites to setting up private dess on Google Cloud Platform (GCP)\n",
        content: " Register Atsign at atsign.com Have google account Have registered Fully Qualified Domain Name (FQDN)  1. Registering your atSign #\rThis topic is already well documented. Please follow the guidance of Our FAQs and register via the registrar site.\n2. Sign-up for GCP account #\ra) Account Creation #\rIf you are new to cloud like me and need to create new GCP account, I have good news! The creation is for free. As promotion all new customer will also receive 300$ as credit. That is more than enough to run multiple dess’s for 3 months of offer validity.\nYou can register with your gmail account or create new one by clicking “Get started for free” and follow instructions to register\nOnce done with registration you will be able to login to your console.cloud.google.com And voila you have your GCP account up and running.\nb) Setting up billing #\rTo be able to run some services you have to maintain billing account. Navigation Menu -\u0026gt; Billing\nBy default GCP creates “My Billing Account” which you can link to your project.\nClick “Link Billing account” and select “My billing account” from drop down\n🔴 Its important to note that this account holds your 300$ free credits! 🔴\nWe are all setup and ready to go deploy!\n3. Register your own fully qualified domain name (FQDN) #\rThis step can be performed at range of different sites with different pricing models. You can use sites like godaddy.com; namecheap.com; and many others. Since we have GCP account we can use it to register our domain through Cloud Domain.\na) Register domain name with GCP. #\rIn your GCP console search for Cloud Domain.\nWe first need to enable this service.\nOnce the service activates you will be presented with its dashboard.\nLets register our fully qualified domain name (FQDN) that will be used for registration of our dess.\nClick on “Register Domain” and look for suitable name.\nReviewing pricing options of GCP .pw is their cheapest option which will work for testing. For my test case I am selecting atsign.pw with price $0.75 / month by clicking add to cart button and continue.\nNext we can select where will our DNS record be hosted. Simply select “Use Google Domains” and DNSSEC “Enabled” and click continue.\nWe have no options with Privacy protection so simply click continue.\nFill out contact details and click register. This will trigger registration email you will have to verify.\nOnce you verify your email your domain should be ready to use\nb) Create Cloud DNS zone #\rNext step is to enable Cloud DNS service. Search for DNS in search bar and select Cloud DNS\nIf its your first time activating this service you will have to enable the API. Press enable and wait for the activation to finish.\nLets crate new DNS zone by clicking “Create Zone”\nWe will select zone type as Public since we will be connecting to our DNS from internet and provide your registered DNS name. In my case atsign.pw. DNSSEC will be set to off and provide some meaningful Description. Once you filled all your details press create.\nYou should receive following message:\n"
      })
      .add(
      {
        id: 84,
        href: "/tutorials/dess/rpi/2-prerequisites/",
        title: "Pre-requisites",
        description: "Pre-requisites for setting up private dess on a Raspberry Pi\n",
        content: " Registered atSign(s) to setup A No-IP account A Fully Qualified Domain Name (FQDN) Raspberry Pi (model 3B+ used for this tutorial)  1. Registering your atSign #\rThis topic is already well documented. Please follow the guidance of Our FAQs and register via the registrar site.\n2. Check if your IP address is static or dynamic #\rIn case it is static, you can skip the rest of this step. Otherwise, if you have a dynamic address, keep reading:\nYou will need to setup an account on a Dynamic DNS (DDNS) service. Dynamic DNS are a service which allows us to associate our public IP address to a domain. In this case, we will use it to be able to reach our home IP address in a simpler way (eg: instead of connecting to \u0026lsquo;203.0.113.206\u0026rsquo;, we can connect to \u0026rsquo;example.ddns.com\u0026rsquo;).\nWe will use No-IP service for this tutorial. Firstly, you need to sign up for an account:\nYou can check the \u0026lsquo;Create my hostname later\u0026rsquo; box, as we will also configure it.\nClick on \u0026lsquo;Free Sign Up\u0026rsquo; button: Now you will need to activate your account via email: After that, navigate again to https://my.noip.com/ and select No-IP Hostnames: Click on \u0026lsquo;Create a Hostname\u0026rsquo;. Choose a Hostname you like, and one of the free options in de Domain menu. Leave the \u0026lsquo;Record Type\u0026rsquo; on \u0026lsquo;DNS Host (A)\u0026rsquo; and the IPv4 Address field empty, and click on \u0026lsquo;Create Hostname\u0026rsquo;: We will end the No-IP configuration later.\n3. Register your own fully qualified domain name (FQDN) #\rThis step can be performed at a variety of sites, all with different pricing models. You can use sites like Go Daddy, Namecheap, and many others. The following configuration has been done in Cloudflare: On the DNS panel, click on \u0026lsquo;Add record\u0026rsquo;: And create a CNAME record which points to your No-IP Hostname: We can now go to the next steps.\n"
      })
      .add(
      {
        id: 85,
        href: "/tutorials/dess/aws/3-prep-aws-instance/",
        title: "Preparing AWS Instance",
        description: "Preparing AWS Instance for setting up private dess\n",
        content: "Now since I am new to AWS, the easiest way to get started is by using the LightSail service from service catalog. This will enable you to deploy small system which is more then capable of handling dess at pre-set price.\nWelcome to LightSail:\nFirst step is to create new instance. Fortunately, we have big orange button that can do just that!\nThere are several options we are presented at this moment. Since I am living in Europe I select “Frankfurt, Zone A (eu-central-1a)” as my instance location. Instance region will dictate how well will your instance response based on your geographical location. People located in India should selects APAC region where as people in US should select North America region. You can leave availability zone set as default.\nNext up will be selection of operating system we want to deploy. We know that dess works well with Ubuntu 20.04 LTS so lets select just that.\nYou are presented with couple more options, but unless you know what you are doing leave these as is.\nNow let’s select instance plan. dess is relatively light weight so for testing purposes I will select first instance plan for 3.5$/Month. This will provide us with 512 MB of RAM, 1vCPU, 20GB of storage and 1TB of data transfer. This is more than enough to run our dess.\nLastly we have to name our instance. This is the name you will be presented with in your dashboard.\nLast but not least is to press “Create instance”\nAfter a couple of seconds you should be re-routed to your dashboard and see your instance up and running:\n"
      })
      .add(
      {
        id: 86,
        href: "/tutorials/dess/gcp/3-prep-aws-instance/",
        title: "Preparing GCP Instance",
        description: "Preparing GCP instance for setting up private dess\n",
        content: "Now since I am new to GCP the easiest way to start using it is with prebuild solutions. This way you will deploy small system which is more then capable of handling dess at pre-set price.\nWe can use pre-build “Ubuntu 20”. In Search bar look for Ubuntu20\n🔴 Make sure to use “Ubuntu 20” and not “Hardened Ubuntu 20”. Although the Hardened version will work as well it requires additional manual steps to make work.🔴​\nThis will take you to this prebuild solution overview page:\nSelect launch\nAnd press enable all required API’s\nOnce all API’s are activated you are taken to configuration page:\nPrices are based on region and power of selected Virtual Machine (VM). To cost optimize you can select US region / N1 / g1-small at cost of $15/Month.\nNext up is boot disk which we can leave as is.\nThis will deploy your Ubuntu 20.04 virtual machine.\n"
      })
      .add(
      {
        id: 87,
        href: "/tutorials/dess/rpi/4-prep-rasp/",
        title: "Preparing Raspberry Pi configuration",
        description: "Preparing Raspberry Pi for atPlatform dess configuration\n",
        content: "For this part of the tutorial, I\u0026rsquo;m going to be using a Raspberry Pi model 3B+, although some other Raspberry Pi which runs an OS version compatible with dess will also work. This time we are going to be using Raspbian (Raspberry Pi OS Lite (32-bit) version), along with the Raspberry Pi Imager program, which will help us to install the OS.\nFirst of all, we need to download the Raspberry Pi Imager program for our current PC OS: We can install the Lite or the Full version. I will be using the Lite one: It is important that we configure SSH, as we will be using it to connect to the device. It is highly recommendable to configure it with public-key authentication (for security reasons), but you can also configure it with username and password (which is not secure). We can also configure other things, such as a wireless network, or a username/password for the system. If you are going to be using the device connected to the Ethernet, I would not recommend configuring the wireless network.\nIf you configure the wireless network and then decide to connect it to your network through Ethernet, you may experience some network related errors in the next steps (dess installation). In that case, you can run:\nip addr sh  To see your interfaces (typically, eth0 and wlan0), and:\nip link set wlan0 down  To shutdown your wireless network interface, so the installation can run properly. You can enable it again by substituting \u0026lsquo;down\u0026rsquo; by \u0026lsquo;up\u0026rsquo; in the previous command.\nFinally, introduce the SD-card into your computer, select it, and write the OS to the SD-Card (all content will be formatted in the process): After the installation ends, we can continue with the next step.\n"
      })
      .add(
      {
        id: 88,
        href: "/tutorials/dess/rpi/3-prep-router-config/",
        title: "Preparing router configuration",
        description: "Prepare router configuration for setting up private dess using Raspberry Pi\n",
        content: "Now we will need to do the proper configuration in our home router. We will need to do two things:\n Open port 80, and a port for the dess (typically 6464) Associate Dynamic DNS to No-IP  After logging in into the home router (In my case, navigating to \u0026ldquo;192.168.1.1\u0026rdquo; in any web browser. You will find that information on the back of your router), We can start the configuration. We will need to know the local IP assigned to our Raspberry Pi (which can be also seen in the router configuration page).\nFirstly, we will open the ports we need. Port 80 needs to be opened so Certbot can provide us with a certificate from Let\u0026rsquo;s Encrypt.\nThis is an example of both ports opened for our Raspberry Pi\u0026rsquo;s local IP: After that, we now need to configure the Dynamic DNS (DDNS) service. Some newer routers let the users choose a popular service (such as No-IP) directly from a list (as in the following example image), but if that is not our case, we can just provide the router with the direction of the service. That is all we will need to configure in our router.\n"
      })
      .add(
      {
        id: 89,
        href: "/tutorials/dess/aws/4-prep-network-access/",
        title: "Preparing your instance for network access",
        description: "Preparing your instance for network access to private dess\n",
        content: "Assignment of Static IP #\rNext up, is to provide our instance with a static IP and linking our domain to it.\nWhen you click on your instance name, it will take you to the management console, which should look like this:\nThis is where you control hardware, connectivity and if needed can delete your instance.\nLets configure a static IP address for your new instance. Navigate to Networking and click on Create static IP:\nOur region and instance is selected, so the only thing left is to name our static IP. I selected the name atsign-static, but it can be any name you like.\nLets hit create:\nAnd voila, we now have a static IP address on the internet and it will not change. Now we can link our domain name with it.\nWhen you click on your instance name and navigate to Networking, the static IP is now assigned.\nAssignment of Domain name to your static IP #\rWe can now move on to linking our static IP address to our domain. This is done via the AWS console which can be accessed in the top right of Lightsail.\nVerify your email used for registering domain:\nBy now you should receive verification email that will confirm registration of your domain. Click this link before moving on.\nLinking domain with your static address:\nLets navigate to “Route 53” from Services menu.\nFrom your dashboard click on “Domain” which will take you to the “Registered Domains” tab.\nHere you can click on your registered domain which will take you to overview page with domain status and contacts.\nClick on “Manage DNS”\nAnd click on your domain name.\nThis will show you your DNS records for your domain. We now need to link A type record to your domain linking it to IP address of your instance.\nThis is done simply by typing your static IP address from previous step into field “Value” and clicking Create record:\nIf everything goes well you should see following in your domain dashboard:\nTo test if you are successful open command line and ping your domain. You should see your instance static IP address. It will not respond which is normal due to IPv4 firewall. It is actually good thing!\nAt this point we have created DNS record we will use to link our dess, we created instance name which will be running our dess and we have opened port range which is exposed to the internet and we can communicate with atSign root server and our apps with.\nSetting up Firewall #\rNext up we need to make sure we have ports open for our dess to communicate with root server and our apps. In Section networking go to section “IPv4 Firewall” and click “+ Add rule” Our rule will be “Custom” on TCP protocol with Port range in number higher then 1024. In my case I have selected port range 8000-8010. This will enable me to run up to 10 atSigns in parallel.\nClick create and verify that your new rule is in list:\n"
      })
      .add(
      {
        id: 90,
        href: "/tutorials/dess/gcp/4-prep-network-access/",
        title: "Preparing your instance for network access",
        description: "Preparing your GCP instance for network access to private dess\n",
        content: "a) Assignment of Static IP #\rNext up our list of activities is providing our instance with static IP and linking our domain to it.\nGCP assigned ephemeral IP address to our newly created VM. We need to change it to static IP.\nIn search bar look for External IP addresses.\nYou should see your external IP address assigned to your VM\nIn column Type select ephemeral and change it to Static\nGive your static IP name and some description.\nType should now say Static\nb) Assignment of Domain name to your static IP #\rNext step is to point your domain to your virtual machine running dess.\nSearch for Cloud DNS\nOpen zone you have created in step 3.b Create Cloud DNS zone\nWe now need to link A type record to your domain linking it to IP address of your Virtual machine.\nThis is done simply press “Add record set”\nSelect Resource record type “A” and IPv4 address the address of your dess virtual machine.\nIf everything goes well you should see following in your domain dashboard:\nNext step is to update Google Name servers. You can follow Googles guide - step 5.\nhttps://cloud.google.com/dns/docs/tutorials/create-domain-tutorial#register-domain\nTo test if you are successful open command line and ping your domain. You should see your instance static IP address.\nAt this point we have created DNS record we will use to link our dess, we created instance name which will be running our dess and we have opened port range which is exposed to the internet and we can communicate with atSign root server and our apps with.\nc) Setting up Firewall #\rSearch for Firewall in search bar.\nClick on Create firewall rule\nLets create firewall rule that will enable the atSign root server communicate with our dess.\nImportant things to note:\nIngress translates to incoming traffic.\nSelecting IP range as 0.0.0.0/0 will allow traffic from anywhere on the internet.\nFor my use case I will enable port range 8000 – 8010 allowing me to register up to 10 atSigns.\nPress create and validate that your new rule appears in list of firewall rules.\nSecond we need to create firewall rule that will enable your dess server to communicate with certification authority.\nImportant things to note:\nIngress translates to incoming traffic.\nSelecting IP range as 0.0.0.0/0 will allow traffic from anywhere on the internet.\nYou need to enable port 80 for communication with Certification authority.\nPress create and validate that your new rule appears in list of firewall rules.\n"
      })
      .add(
      {
        id: 91,
        href: "/tutorials/sshnp/1-prerequisites/",
        title: "Prerequisites",
        description: "Get your environment ready to run this codelab.\n",
        content: "SSH No Ports provides a way to ssh to a remote linux host/device without that device having any open ports (not even port 22). All network connectivity is out bound and there is no need to know the IP address the device has been given. As long as the device has an IP address, DNS and Internet access, you will be able to connect to it.\nSee our GitHub repository and demo video for more information.\nDemo video:\n  Instructions:\n Prepare two atSigns and ensure you have both of their .atKeys files. If you\u0026rsquo;ve done this, skip to step 3. If you don\u0026rsquo;t have two atSigns (free or paid), go to atsign.com. Once you\u0026rsquo;ve purchased two atSigns be sure to activate them on the dashboard by pressing the \u0026ldquo;Click to activate\u0026rdquo; button on each atSign dropdown. Then you will have to onboard these atSigns by downloading one of our apps and onboard the atSign via our at_onboarding_flutter widget. This will generate your .atKeys file for you. Save this .atKeys file to the machine you are working on. One of these atSigns wil be the \u0026ldquo;manager\u0026rdquo; atSign working on the client-side and the other atSign will be the \u0026ldquo;device\u0026rdquo; atSign working in the remote device. Download the binaries here. Ssh! No ports comes with two binary files. One binary (sshnpd) is the daemon that runs on the remote linux host/device, while the other binary (sshnp) runs on the client that is connecting to the device via ssh. *It is also possible to run the source code via dart run.  "
      })
      .add(
      {
        id: 92,
        href: "/sdk/java/private-hidden-key/",
        title: "PrivateHiddenKey interactions",
        description: "Learn how to put, get, and delete a PrivateHiddenKey in the Java SDK\n",
        content: "Putting a PrivateHiddenKey Example #\rNot implemented yet\nGetting a PrivateHiddenKey Example #\rNot implemented yet\nDeleting a PrivateHiddenKey Example #\rNot implemented yet\n"
      })
      .add(
      {
        id: 93,
        href: "/tutorials/at-dude/_10_profile_screen/",
        title: "Profile Screen",
        description: "Documentation for \"Profile Screen\" in atDude app\n",
        content: ""
      })
      .add(
      {
        id: 94,
        href: "/sdk/java/public-key/",
        title: "PublicKey interactions",
        description: "Learn how to put, get, and delete a PublicKey in the Java SDK\n",
        content: "PublicKeys are meant for public data. Authorized or unauthorized users are able to know of the existence of these keys (via scan) and the data is not encrypted.\nPutting a PublicKey Example #\rSample code on how to put a public key associated with a public non-encrypted value into your secondary server. Any unauthenticated/authenticated atSign will be able to see the data without decrypting anything.\n// 1. establish constants String ROOT_URL = \u0026#34;root.atsign.org:64\u0026#34;; // root url of the atsign server for fetching secondary address String ATSIGN_STR = \u0026#34;@bob\u0026#34;; // atSign that we will pkam auth (must have keys in keys directory) boolean VERBOSE = true; // true for more print logs String KEY_NAME = \u0026#34;test\u0026#34;; // name of the key we will create and put String VALUE = \u0026#34;I like pizza\u0026#34;; // value we will associate with the key  // 2. create AtSign object AtSign atSign = new AtSign(ATSIGN_STR); // 3. atClient factory method AtClient atClient = null; try { atClient = AtClient.withRemoteSecondary(ROOT_URL, atSign, VERBOSE); } catch (AtException e) { System.err.println(\u0026#34;Failed to connect to remote server \u0026#34; + e); e.printStackTrace(); } // 4. create a new public key PublicKey pk = new KeyBuilders.PublicKeyBuilder(atSign).key(KEY_NAME).build(); // 5. put the key String response = null; try { response = atClient.put(pk, VALUE).get(); } catch (InterruptedException | ExecutionException e) { System.err.println(\u0026#34;Failed to put key \u0026#34; + e); e.printStackTrace(); } System.out.println(response); // data:\u0026lt;CommitId\u0026gt; Getting a PublicKey example #\rLearn how to fetch public data on either your secondary server or another atSign\u0026rsquo;s secondary server. No decryption is done by AtClient in this process. Be sure that the sharedBy atSign is the atSign that owns this AtKey (aka the atSign that owns the public data) because this is the atSign\u0026rsquo;s secondary server that AtClient will be looking into.\n// 1. establish arguments String ROOT_URL = \u0026#34;root.atsign.org:64\u0026#34;; // root url of the atsign server for fetching secondary address String ATSIGN_STR = \u0026#34;@bob\u0026#34;; // atSign that we will pkam auth (must have keys in keys directory) boolean VERBOSE = true; // true for more print logs String KEY_NAME = \u0026#34;test\u0026#34;; // name of the key we will get  // 2. create AtSign object AtSign atSign = new AtSign(ATSIGN_STR); // 3. atClient factory method AtClient atClient = null; try { atClient = AtClient.withRemoteSecondary(ROOT_URL, atSign, VERBOSE); } catch (AtException e) { System.err.println(\u0026#34;Failed to connect to remote server \u0026#34; + e); e.printStackTrace(); } // 4. create the key PublicKey pk = new KeyBuilders.PublicKeyBuilder(atSign).key(KEY_NAME).build(); // 5. get the value associated with the key String response = null; try { response = atClient.get(pk).get(); } catch (InterruptedException | ExecutionException e) { System.err.println(\u0026#34;Failed to get key \u0026#34; + e); e.printStackTrace(); } System.out.println(response); Deleting a PublicKey example #\rLearn how to delete a public key from your secondary server. You can only delete keys in your own secondary server and must be authenticated (aka the sharedBy atSign must be you, in possession of the .atKeys file).\n// 1. establish constants String ROOT_URL = \u0026#34;root.atsign.org:64\u0026#34;; String ATSIGN_STR = \u0026#34;@bob\u0026#34;; boolean VERBOSE = true; String KEY_NAME = \u0026#34;test\u0026#34;; // 2. create AtSign instance AtSign atSign = new AtSign(ATSIGN_STR); // 3. create AtClient instance using factory methods AtClient atClient = null; try { atClient = AtClient.withRemoteSecondary(ROOT_URL, atSign, VERBOSE); } catch (AtException e) { System.err.println(e); e.printStackTrace(); } // 4. create public key PublicKey pk = new KeyBuilders.PublicKeyBuilder(atSign).key(KEY_NAME).build(); // 5. delete the key String response = null; try { response = atClient.delete(pk).get(); } catch (InterruptedException | ExecutionException | CancellationException e) { System.err.println(e); e.printStackTrace(); } System.out.println(response); "
      })
      .add(
      {
        id: 95,
        href: "/tutorials/dess/aws/6-registration/",
        title: "Registration of atSign in your private dess",
        description: "Registration of atSign in your private dess\n",
        content: "At this step you should already have your atSign registered at atsign.com. If not go do it!\nI have registered my own free atSign (@44likelycanary) which I will link to my dess.\nIn your instance console, navigate to dess folder. If you were following this guide it will be located in:\nWe now need to create the service that will host our atSign by executing the dess-create command:\n$ sudo dess-create @44likelycanary 4atsign.link 8000 \u0026lt;email address\u0026gt; likelycanary\nTo make it more understandable:\nI will be registering my atSign @44likelycanary.\nI will be using my domain 4atsign.link which I have registered through AWS.\nI am using port 8000 which I have opened in my instance firewall.\nMy registration email address is (this email is used to sign the SSL certificates).\nThe last likelycanary is the name that docker will use to track the service.\nIf everything is successful you should see output like this:\nAt this moment your atSign is registered on your dess.\n"
      })
      .add(
      {
        id: 96,
        href: "/tutorials/dess/gcp/6-registration/",
        title: "Registration of atSign in your private dess",
        description: "Registration of atSign in your private dess\n",
        content: "At this step you should already have your atSign registered at atsign.com. If not go do it!\nI have registered my own free atSign (@44likelycanary) which I will link to my dess.\nIn your instance console, navigate to dess folder. If you were following this guide it will be located in:\nWe now need to create the service that will host our atSign by executing the dess-create command:\n$ sudo dess-create @44likelycanary 4atsign.link 8000 \u0026lt;email address\u0026gt; likelycanary\nTo make it more understandable:\nI will be registering my atSign @44likelycanary.\nI will be using my domain 4atsign.link which I have registered through AWS.\nI am using port 8000 which I have opened in my instance firewall.\nMy registration email address is (this email is used to sign the SSL certificates).\nThe last likelycanary is the name that docker will use to track the service.\nIf everything is successful you should see output like this:\nAt this moment your atSign is registered on your dess.\n"
      })
      .add(
      {
        id: 97,
        href: "/tutorials/dess/rpi/6-registration/",
        title: "Registration of atSign in your private dess",
        description: "Registration of atSign in your private dess on Raspberry Pi\n",
        content: "Now, we will proceed to install dess, following the official instructions. Make sure curl is installed, we will use curl to pull the dess installation file:\nsudo apt install curl  Finally, run the dess installer:\ncurl -fsSL https://getdess.atsign.com | sudo bash  Once the installer is finished you should be prompted like so:\nDess installed, please move on to the sudo dess-create command.\nAt this step you should already have your atSign registered at atsign.com. If not go do it!\nI have registered my own free atSign (@44likelycanary) which I will link to my dess.\nIn your instance console, navigate to dess folder. If you were following this guide it will be located in:\nWe now need to create the service that will host our atSign by executing the dess-create command:\nsudo dess-create \u0026lt;@your-atSign\u0026gt; \u0026lt;your-domain\u0026gt; \u0026lt;opened-port\u0026gt; \u0026lt;email-address\u0026gt; \u0026lt;service-name: your atsign with no '@'\u0026gt;```  For instance: sudo dess-create @44likelycanary 4atsign.link 8000 tutorial@example.com likelycanary\nTo make it more understandable:\n  I will be registering my atSign @44likelycanary.\n  I will be using my domain 4atsign.link which I have registered.\n  I am using port 8000 which I have opened in my router firewall (typically 6464, but as we can see, it can be any other).\n  My registration email address is tutorial@example.com (this email is used to sign the SSL certificates).\n  The last likelycanary is the name that docker will use to track the service.\n  If everything is successful you should see output like this:\nAt this moment your atSign is registered on your dess.\n"
      })
      .add(
      {
        id: 98,
        href: "/tutorials/at-dude/5-reset-atsign/",
        title: "Reset atsign",
        description: "How to reset any app built on the atPlatform",
        content: "In this tutorial, we will complete the onboarding screen for the dude app and implement the reset app functionality.\nAt the end of this step our app will look like this,\n\nCreating the Texts util class #\rThe first thing we will do is create a utility class that will store our texts. This will make it easy to update our texts across out app without having to search and replace all occurrence of the string.\nFollow the steps below:\nmkdir lib/utils touch lib/utils/texts.dart open lib/utils/texts.dart class Texts { static const String atDude = \u0026#39;atDude\u0026#39;; static const String onboardAtsign = \u0026#39;Onboard an atsign\u0026#39;; static const String resetApp = \u0026#39;Reset App\u0026#39;; } Replace the string \u0026lsquo;Reset App\u0026rsquo; with it\u0026rsquo;s equivalent static const for the ResetAppButton widget as shown below\n... @override Widget build(BuildContext context) { return ElevatedButton( onPressed: () {}, child: const Text(Texts.resetApp), // Changed  ); } Let us make similar changes in main.dart as shown below:\n... MaterialApp( ... home: Scaffold( appBar: AppBar( title: const Text(Texts.atDude), // Changed  ), body: Builder( builder: (context) =\u0026gt; Center( child: Column( ... children: [ ... ElevatedButton( ... child: const Text(Texts.onboardAtsign), // changed  ), ], ), ), ), ), ), Adding Reset Functionality to Authentication Service #\rWe\u0026rsquo;ll repeat the same pattern of the onboarding functionality for the reset app functionality. In your terminal type:\nopen lib/services/authentication_service.dart Now we\u0026rsquo;ll create a method called reset and getAtOnboardingConfig in our AuthenticationService class and refactor the onboard method.\nclass AuthenticationService { ... // new method  AtOnboardingConfig getAtOnboardingConfig({ required AtClientPreference atClientPreference, }) =\u0026gt; AtOnboardingConfig( atClientPreference: atClientPreference, rootEnvironment: AtEnv.rootEnvironment, domain: AtEnv.rootDomain, appAPIKey: AtEnv.appApiKey, ); // new  Future\u0026lt;AtOnboardingResult\u0026gt; onboard() async { return await AtOnboarding.onboard( context: context, config: getAtOnboardingConfig(atClientPreference: atClientPreference), // changed  ); } } Here we simply moved AtOnboardingConfig into it\u0026rsquo;s own method so we can reuse it on our reset method we\u0026rsquo;re going to create below:\nimport \u0026#39;package:at_onboarding_flutter/screen/at_onboarding_reset_screen.dart\u0026#39;; ... Future\u0026lt;AtOnboardingResetResult\u0026gt; reset() async { var dir = await getApplicationSupportDirectory(); var atClientPreference = AtClientPreference() ..rootDomain = AtEnv.rootDomain ..namespace = AtEnv.appNamespace ..hiveStoragePath = dir.path ..commitLogPath = dir.path ..isLocalStoreRequired = true; return AtOnboarding.reset( context: NavigationService.navKey.currentContext!, config: getAtOnboardingConfig(atClientPreference: atClientPreference), ); } AtOnboarding.reset allows the user to remove any atsign that onboard on the app before. This allows the user to onboarding with another atsign.\nReset Command #\rNow that we\u0026rsquo;re all set, lets create our Reset Command. This class method will contain the instructions required to remove any atsign associated with our app.\nIn your terminal type:\ntouch lib/commands/reset_command.dart open lib/commands/reset_command.dart Add the below code:\nimport \u0026#39;package:at_dude/commands/base_command.dart\u0026#39;; class ResetCommand extends BaseCommand { Future\u0026lt;void\u0026gt; run() async { var resetResult = await authenticationService.reset(); } } Now that we have our variable resetResult. Let\u0026rsquo;s decide what we\u0026rsquo;ll do depending on the resetResult.\nimport \u0026#39;package:at_dude/commands/base_command.dart\u0026#39;; import \u0026#39;package:at_dude/commands/onboard_command.dart\u0026#39;; import \u0026#39;package:at_onboarding_flutter/screen/at_onboarding_reset_screen.dart\u0026#39;; //new import \u0026#39;package:flutter/material.dart\u0026#39;; // new  class ResetCommand extends BaseCommand { Future\u0026lt;void\u0026gt; run() async { var resetResult = await authenticationService.reset(); // Everything Below New  switch (resetResult) { case AtOnboardingResetResult.success: OnboardCommand().run(); break; case AtOnboardingResetResult.cancelled: break; } } } If authenticationService.reset() return AtOnboardingResetResultStatus.success we call 'OnboardCommand().run() to initiate the onboarding process, if it returns AtOnboardingResetResultStatus.cancelled we do nothing.\nCompleting the first screen #\rNow we just have to update the UI in main.dart to allow the user to reset the app.\nEdit main.dart as shown below:\n@override Widget build(BuildContext context) { return MultiProvider( ... child: MaterialApp( ... home: Scaffold(...), body: Builder( builder: (context) =\u0026gt; Center( child: Column( ... children: [ IconButton(...), ElevatedButton( ... child: const Text(Texts.onboardAtsign), ), // new  Padding( padding: const EdgeInsets.symmetric( horizontal: 12, vertical: 8, ), child: Row( mainAxisAlignment: MainAxisAlignment.center, children: const [ Expanded( child: Divider( color: Colors.black, ), ), Padding( padding: EdgeInsets.symmetric(horizontal: 12.0), child: Text( \u0026#39;Or\u0026#39;, textAlign: TextAlign.center, ), ), Expanded( child: Divider( color: Colors.black, ), ), ], ), ), // new end  ], ), ), ), ), ), ); } We add a divider to create separation between the two buttons.\nlets add the reset atsign button as shown below:\nimport \u0026#39;package:at_dude/commands/reset_command.dart\u0026#39;; // new ... Padding(...) // new ElevatedButton( onPressed: () async { await ResetCommand().run(); }, child: Text(Texts.resetApp), ) // new end Run your flutter app and everything should work perfectly.\nGo ahead and reset the app\nflutter run Conclusion #\rWell done, you\u0026rsquo;ve made it this far. In the next step we will start building our Send Dude Screen.\n"
      })
      .add(
      {
        id: 99,
        href: "/sdk/java/self-key/",
        title: "SelfKey interactions",
        description: "Learn how to put, get, and delete a SelfKey in the Java SDK\n",
        content: "SelfKeys hold data that are intended for the atSign owner of the secondary server. Data is encrypted with the symmetric selfEncryptionKey.\nPutting a SelfKey Example #\rLearn how to create and put a SelfKey associated with some value. This value will be encrypted with your selfEncryptionKey and only the creator of the AtKey will be able to see and decrypt the data. Ensure that the sharedBy atsign is an atSign you have the keys to. If you decide to make a shared-with-self key, (e.g. @bob:location@bob), then make the sharedWith atSign the same object as the sharedBy atSign.\n// 1. establish constants String ROOT_URL = \u0026#34;root.atsign.org:64\u0026#34;; String ATSIGN_STR = \u0026#34;@bob\u0026#34;; boolean VERBOSE = true; String KEY_NAME = \u0026#34;test\u0026#34;; String VALUE = \u0026#34;I like pizza\u0026#34;; int ttl = 30 * 60 * 1000; // 2. create AtSign object AtSign atSign = new AtSign(ATSIGN_STR); // 3. atClient factory method AtClient atClient = null; try { atClient = AtClient.withRemoteSecondary(ROOT_URL, atSign, VERBOSE); } catch (AtException e) { System.err.println(\u0026#34;Failed to connect to remote server \u0026#34; + e); e.printStackTrace(); } // 4. create selfkey SelfKey sk = new KeyBuilders.SelfKeyBuilder(atSign).key(KEY_NAME).build(); sk.metadata.ttl = ttl; // 5. put the key String response = null; try { response = atClient.put(sk, VALUE).get(); } catch (InterruptedException | ExecutionException e) { System.err.println(\u0026#34;Failed to put key \u0026#34; + e); e.printStackTrace(); } System.out.println(response); Getting a SelfKey Example #\rLearn how to get the data belonging to a self key. SelfKeys refer to keys in the secondary that hold encrypted data for self use. This data is encrypted with your selfEncryptionKey.\n// 1. establish constants String ROOT_URL = \u0026#34;root.atsign.org:64\u0026#34;; String ATSIGN_STR = \u0026#34;@bob\u0026#34;; boolean VERBOSE = true; String KEY_NAME = \u0026#34;test\u0026#34;; // 2. create AtSign object AtSign atSign = new AtSign(ATSIGN_STR); // 3. atClient factory method AtClient atClient = null; try { atClient = AtClient.withRemoteSecondary(ROOT_URL, atSign, VERBOSE); } catch (AtException e) { System.err.println(\u0026#34;Failed to connect to remote server \u0026#34; + e); e.printStackTrace(); } // 4. create selfkey SelfKey sk = new KeyBuilders.SelfKeyBuilder(atSign).key(KEY_NAME).build(); // 5. get the key String response = null; try { response = atClient.get(sk).get(); } catch (InterruptedException | ExecutionException e) { System.err.println(\u0026#34;Failed to get key \u0026#34; + e); e.printStackTrace(); } System.out.println(response); Deleting a SelfKey Example #\rLearn how to delete a SelfKey from your secondary.\n// 1. establish constants String ROOT_URL = \u0026#34;root.atsign.org:64\u0026#34;; // root url of the atsign server for fetching secondary address String ATSIGN_STR = \u0026#34;@bob\u0026#34;; // atSign that we will pkam auth (must have keys in keys/) boolean VERBOSE = true; // true for more print logs  String KEY_NAME = \u0026#34;test\u0026#34;; // name of the key we will create and put  // 2. create AtSign object AtSign atSign = new AtSign(ATSIGN_STR); // 3. atClient factory method AtClient atClient = null; try { atClient = AtClient.withRemoteSecondary(ROOT_URL, atSign, VERBOSE); } catch (AtException e) { System.err.println(\u0026#34;Failed to connect to remote server \u0026#34; + e); e.printStackTrace(); } // 4. create self key SelfKey sk = new KeyBuilders.SelfKeyBuilder(atSign).key(KEY_NAME).build(); // 5. delete the key String response = null; try { response = atClient.delete(sk).get(); } catch (InterruptedException | ExecutionException | CancellationException e) { System.err.println(\u0026#34;Failed to delete key \u0026#34; + e); e.printStackTrace(); } System.out.println(response); "
      })
      .add(
      {
        id: 100,
        href: "/tutorials/at-dude/_8_send_dude_srcreen/",
        title: "Send Dude Screen",
        description: "Documentation for \"Send Dude Screen\"\n",
        content: ""
      })
      .add(
      {
        id: 101,
        href: "/tutorials/at-dude/6-send_dude-screen-app-bar/",
        title: "Send Dude Screen AppBar",
        description: "Creating the UI of the send dude screen",
        content: "In this tutorial, we will build the AppBar of send dude screen.\nAt the end of this step our app will look like this,\n\nCreating the AppBar #\rThe first thing we will do is create our send dude screen dart file with the AppBar and the widgets and properties it needs.\nFollow the steps below:\n touch lib/views/screens/send_dude_screen.dart open lib/views/screens/send_dude_screen.dart import \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;../../utils/texts.dart\u0026#39;; class SendDudeScreen extends StatefulWidget { SendDudeScreen({Key? key}) : super(key: key); static String routeName = \u0026#39;sendDudeScreen\u0026#39;; @override State\u0026lt;SendDudeScreen\u0026gt; createState() =\u0026gt; _SendDudeScreenState(); } class _SendDudeScreenState extends State\u0026lt;SendDudeScreen\u0026gt; { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( backgroundColor: Colors.transparent, foregroundColor: Colors.transparent, shadowColor: Colors.transparent, title: const Text( Texts.sendDude, style: TextStyle(color: Colors.black), ), actions: const [AtsignAvatar()], ), ); } } We have our stateful widget with an appBar but we neither have a Texts.sendDude constant nor the AtsignAvatar(). Lets create them:\nopen lib/utils/texts.dart ... class Texts { ... static const String sendDude = \u0026#39;Send Dude\u0026#39;; } AtsignAvatar #\rLet us create AtsignAvatar as shown below:\ntouch lib/views/widgets/atsign_avatar.dart open lib/views/widgets/atsign_avatar.dart import \u0026#39;dart:typed_data\u0026#39; show Uint8List; import \u0026#39;package:flutter/material.dart\u0026#39;; class AtsignAvatar extends StatefulWidget { const AtsignAvatar({Key? key}) : super(key: key); @override State\u0026lt;AtsignAvatar\u0026gt; createState() =\u0026gt; _AtsignAvatarState(); } class _AtsignAvatarState extends State\u0026lt;AtsignAvatar\u0026gt; { Uint8List? image; String? profileName; @override Widget build(BuildContext context) { return GestureDetector( child: CircleAvatar( backgroundColor: Colors.transparent, child: image == null ? const Icon( Icons.person_outline, color: Colors.black, ) : ClipOval(child: Image.memory(image!)), ), onTap: () {}, ); } } Basically we have a CircleAvatar whose child is a profile image or an person_outline icon if no image is available. We need to add the functionality that will check for the atsign contact details.\nProfile Data #\rmkdir lib/data touch lib/data/profile_data.dart open lib/data/profile_data.dart import \u0026#39;dart:typed_data\u0026#39; show Uint8List; class ProfileData { ProfileData({required this.name, required this.profileImage}); final String? name; final Uint8List? profileImage; } This class will contain the name and profile image data we\u0026rsquo;ll get from the ContactService class provided to us for free from the at_contacts_flutter package.\nContacts Model #\rWe\u0026rsquo;ll now create our contacts model that will store all our contacts information needed in our app.\ntouch lib/models/contacts_model.dart open lib/models/contacts_model.dart import \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;../data/profile_data.dart\u0026#39;; class ContactsModel extends ChangeNotifier { late ProfileData _profileData; ProfileData get profileData =\u0026gt; _profileData; set profileData(ProfileData profileData) { _profileData = profileData; notifyListeners(); } } Our profile data extends ChangeNotifier, this will allow us to notifyListeners() of changes made to profileData.\nWe now have to add our ContactModel as a ChangeNotifierProvider and then add it to BaseCommand.\nopen lib/main.dart ... @override Widget build(BuildContext context) { return MultiProvider( providers: [ Provider(create: (c) =\u0026gt; AuthenticationService.getInstance()), ChangeNotifierProvider(create: (c) =\u0026gt; ContactsModel()), // new  ], child: MaterialApp(...), ); open lib/commands/base_command.dart ... import \u0026#39;../models/contacts_model.dart\u0026#39;; abstract class BaseCommand { // Services  AuthenticationService authenticationService = NavigationService.navKey.currentContext!.read(); // Models  ContactsModel contactsModel = NavigationService.navKey.currentContext!.read(); Contact Details Command #\rWe\u0026rsquo;ll now create our Contact Details Command. We don\u0026rsquo;t have to create our ContactService since this is provided to us from the at_contacts_flutter package.\nIn your terminal type:\nflutter pub add at_contacts_flutter touch lib/commands/contact_details_command.dart open lib/commands/contact_details_command.dart import \u0026#39;package:at_client_mobile/at_client_mobile.dart\u0026#39;; import \u0026#39;package:at_contacts_flutter/services/contact_service.dart\u0026#39;; import \u0026#39;package:at_dude/commands/base_command.dart\u0026#39;; import \u0026#39;package:at_dude/data/profile_data.dart\u0026#39;; class ContactDetailsCommand extends BaseCommand { Future\u0026lt;void\u0026gt; run() async { final contactService = ContactService(); ContactService() .getContactDetails( AtClientManager.getInstance().atClient.getCurrentAtSign(), null) .then( (value) { contactsModel.profileData = ProfileData(name: value[\u0026#39;name\u0026#39;], profileImage: value[\u0026#39;image\u0026#39;]); return null; }, ); } } We use the getCurrentAtSign() method to get the current atsign, then use the getContactDetails() to get the name and profile image of the atsign. We then return the profileData to our contactsModel.\nCompleting the AtsignAvatar widget #\rNow we just have what we need to complete the AtsignAvatar Widget.\nopen lib/views/widgets/atsign_avatar.dart class _AtsignAvatarState extends State\u0026lt;AtsignAvatar\u0026gt; { ... @override void initState() { WidgetsBinding.instance.addPostFrameCallback((timeStamp) async { await ContactDetailsCommand().run(); }); super.initState(); } } To run an async method inside initState we need to call the method inside WidgetsBinding.instance.addPostFrameCallback((timeStamp) async {});\nWe can now delete the image and profileName variables since the data is now inside our ContactsModel.profileData property. Let\u0026rsquo;s use the power of provider to access this property.\nclass _AtsignAvatarState extends State\u0026lt;AtsignAvatar\u0026gt; { Uint8List? image; // Delete this  String? profileName; // Delete this  @override void initState() { ... } @override Widget build(BuildContext context) { return GestureDetector( child: CircleAvatar( backgroundColor: Colors.transparent, child: context.watch\u0026lt;ContactsModel\u0026gt;().profileData.profileImage == null ? const Icon( Icons.person_outline, color: Colors.black, ) : ClipOval( child: Image.memory( context.watch\u0026lt;ContactsModel\u0026gt;().profileData.profileImage!)), ), onTap: () {}, ); } } We accessed the profileData generated by calling ContactDetailsCommand().run() through context.watch\u0026lt;ContactsModel\u0026gt;().profileData\nCleaning up our SendDudeScreen #\rLet\u0026rsquo;s fix our \u0026ldquo;The method \u0026lsquo;AtsignAvatar\u0026rsquo; isn\u0026rsquo;t defined\u0026rdquo; error by simply importing AtsignAvatar widget:\nopen lib/views/screens/send_dude_screen.dart import \u0026#39;../widgets/atsign_avatar.dart\u0026#39;; // new  class SendDudeScreen extends StatefulWidget { ... } class _SendDudeScreenState extends State\u0026lt;SendDudeScreen\u0026gt; { ... } Navigating to the SendDudeScreen #\rWe can now navigate to our SendDudeScreen now that our send Dude Screen AppBar is completed.\nopen lib/commands/onboard_command.dart ... class OnboardCommand extends BaseCommand { Future\u0026lt;void\u0026gt; run() async { ... switch (onboardingResult.status) { case AtOnboardingResultStatus.success: Navigator.popAndPushNamed(context, SendDudeScreen.routeName); // new  break; ... } } } Instead of navigating to the HomeScreen we now navigate to SendDudeScreen but we also need to add this screen as route.\nopen lib/main.dart import \u0026#39;package:at_dude/views/screens/send_dude_screen.dart\u0026#39;; ... class _MyAppState extends State\u0026lt;MyApp\u0026gt; { @override Widget build(BuildContext context) { return MultiProvider( providers: ..., child: MaterialApp( ... routes: { SendDudeScreen.routeName: ((context) =\u0026gt; SendDudeScreen()), // new  }, home: Scaffold(...), ), ); } } Conclusion #\rWe\u0026rsquo;re all done. In the next step we will start working on the bottom navigation bar.\n"
      })
      .add(
      {
        id: 102,
        href: "/tutorials/sshnp/3-client/",
        title: "Set up the Client",
        description: "Setup your client to connect to the remote device via ssh\n",
        content: "Run the client on your machine.\n./sshnp --from \u0026lt;@your_manager_atsign\u0026gt; --to \u0026lt;@your_devices_atsign\u0026gt; --host \u0026lt;example.com\u0026gt; -l --local-port --device \u0026lt;iot_device_name\u0026gt; (Or run the dart file via dart run)\ndart run bin/sshnp.dart \u0026lt;args|flags\u0026gt; See the options \u0026amp; flags available for the client binary:\n   Argument Abbreviation Mandatory Description Default     \u0026ndash;key-file -k false Sending atSign\u0026rsquo;s atKeys file if not in ~/.atsign/keys/    \u0026ndash;from -f true Sending atSign    \u0026ndash;to -t true Send a notification to this atSign    \u0026ndash;device -d false Send a notification to this device \u0026ldquo;default\u0026rdquo;   \u0026ndash;host -h true FQDN Hostname e.g. example.com or IP address to connect back to    \u0026ndash;port -p false TCP port to connect back to 22   \u0026ndash;local-port -l false Reverse ssh port to listen on, on your local machine 2222   \u0026ndash;ssh-public-key -s false Public key file from ~/.ssh to be appended to authorized_hosts on the remote device false       Flags Abbreviation Description     \u0026ndash;[no-]verbose -v More logging    "
      })
      .add(
      {
        id: 103,
        href: "/tutorials/sshnp/2-daemon/",
        title: "Set up the Daemon",
        description: "Get your daemon setup on your remote device\n",
        content: "  Place your .atKeys files in ~/.atsign/keys directory for both your client and device. One atSign will be the manager (client) atSign and the other atSign will be the device atSign (that you will be connecting to via ssh).\n  Start up the daemon (sshnpd) on the remote device. Remember to start up the daemon on device start up via rc.local or similar.\n  ./sshnpd --atsign \u0026lt;@your_devices_atsign\u0026gt; --manager \u0026lt;@your_manager_atsign\u0026gt; \\ --device \u0026lt;iot_device_name\u0026gt; -u (Or run the dart file via dart run)\ndart run bin/sshnpd.dart \u0026lt;args|flags\u0026gt; See the options \u0026amp; flags available for the daemon binary:\n   Argument Abbreviation Mandatory Description Default     \u0026ndash;keyFile -k false Sending atSign\u0026rsquo;s keyFile if not in ~/.atsign/keys/    \u0026ndash;atsign -a true atSign of this device    \u0026ndash;manager -m true Manager\u0026rsquo;s atSign, that this device will accept triggers from    \u0026ndash;device -d false Send a trigger to this device, allows multiple devices share an atSign \u0026ldquo;default\u0026rdquo;       Flags Abbreviation Description     \u0026ndash;[no-]sshpublickey -s Update authorized_keys to include public key from sshnp   \u0026ndash;[no-]username -u Send username to the manager to allow sshnp to display username in command line   \u0026ndash;[no-]verbose -v More logging    "
      })
      .add(
      {
        id: 104,
        href: "/tutorials/dess/rpi/",
        title: "Setup dess on a Raspberry Pi",
        description: "Learn how to setup atPlatform dess on a Raspberry Pi\n",
        content: ""
      })
      .add(
      {
        id: 105,
        href: "/sdk/java/shared-key/",
        title: "SharedKey interactions",
        description: "Learn how to put, get-self, get-other, and delete a SharedKey in the Java SDK\n",
        content: "SharedKeys are for data you want to share with another atSign. The sharedBy atSign should be you. The sharedWith atSign should be the receiver.\nPutting SharedKey Example #\rLearn how to create a SharedKey in your secondary. The sharedBy atSign should be you, the authenticated creator of the key, while the sharedWith atSign should be the recipient of the key.\n// 1. establish constants String ROOT_URL = \u0026#34;root.atsign.org:64\u0026#34;; String ATSIGN_STR_SHARED_BY = \u0026#34;@bob\u0026#34;; // my atSign (sharedBy) String ATSIGN_STR_SHARED_WITH = \u0026#34;@alice\u0026#34;; // other atSign (sharedWith) boolean VERBOSE = true; String KEY_NAME = \u0026#34;test\u0026#34;; int ttl = 30 * 60 * 1000; // 30 minutes String VALUE = \u0026#34;I like pizza\u0026#34;; // 2. create AtSign objects AtSign sharedBy = new AtSign(ATSIGN_STR_SHARED_BY); AtSign sharedWith = new AtSign(ATSIGN_STR_SHARED_WITH); // 3. atClient factory method AtClient atClient = null; try { atClient = AtClient.withRemoteSecondary(ROOT_URL, sharedBy, VERBOSE); } catch (AtException e) { System.err.println(\u0026#34;Failed to create AtClient instance \u0026#34; + e); e.printStackTrace(); } // 4. create SharedKey instance SharedKey sk = new KeyBuilders.SharedKeyBuilder(sharedBy, sharedWith).key(KEY_NAME).build(); sk.metadata.ttl = ttl; // 5. put the key String response = null; try { response = atClient.put(sk, VALUE).get(); } catch (InterruptedException | ExecutionException e) { System.err.println(\u0026#34;Failed to put key \u0026#34; + e); e.printStackTrace(); } System.out.println(response); Getting a SharedKey Other Example #\rLearn how to get a SharedKey that was sent by another atSign being sent to you. The sharedBy atSign should be the other atSign (the atSign that is sending the data to YOU), while the sharedWith atSign should be YOU.\n// 1. establish constants String ROOT_URL = \u0026#34;root.atsign.org:64\u0026#34;; String ATSIGN_STR_SHARED_BY = \u0026#34;@bob\u0026#34;; // their atSign (key is sharedBy this atSign) String ATSIGN_STR_SHARED_WITH = \u0026#34;@alice\u0026#34;; // your atSign (key is sharedWith you) boolean VERBOSE = true; String KEY_NAME = \u0026#34;test\u0026#34;; // 2. create AtSign objects AtSign sharedBy = new AtSign(ATSIGN_STR_SHARED_BY); AtSign sharedWith = new AtSign(ATSIGN_STR_SHARED_WITH); // your atSign  // 3. atClient factory method AtClient atClient = null; try { atClient = AtClient.withRemoteSecondary(ROOT_URL, sharedWith, VERBOSE); // AtClient instance created with your atSign (sharedWith) } catch (AtException e) { System.err.println(\u0026#34;Failed to create AtClient instance \u0026#34; + e); e.printStackTrace(); } // 4. create SharedKey instance // key is sharedBy the other person and sharedWith you. SharedKey sk = new KeyBuilders.SharedKeyBuilder(sharedBy, sharedWith).key(KEY_NAME).build(); // 5. get the key String response = null; try { response = atClient.get(sk).get(); } catch (InterruptedException | ExecutionException e) { System.err.println(\u0026#34;Failed to get key \u0026#34; + e); e.printStackTrace(); } System.out.println(response); Getting a SharedKey Self Example #\rLearn how to get a SharedKey that is shared by you and is sent to another atSign. The sharedBy atSign should be YOU, the person sending the data, while the sharedWith atSign should be the other atSign, the atSign you are sharing the data with.\n// 1. establish constants String ROOT_URL = \u0026#34;root.atsign.org:64\u0026#34;; String ATSIGN_STR_SHARED_BY = \u0026#34;@bob\u0026#34;; // my atSign (sharedBy) String ATSIGN_STR_SHARED_WITH = \u0026#34;@alice\u0026#34;; // other atSign (sharedWith) boolean VERBOSE = true; String KEY_NAME = \u0026#34;test\u0026#34;; // 2. create AtSign objects AtSign sharedBy = new AtSign(ATSIGN_STR_SHARED_BY); AtSign sharedWith = new AtSign(ATSIGN_STR_SHARED_WITH); // 3. atClient factory method AtClient atClient = null; try { atClient = AtClient.withRemoteSecondary(ROOT_URL, sharedBy, VERBOSE); } catch (AtException e) { System.err.println(\u0026#34;Failed to create AtClient instance \u0026#34; + e); e.printStackTrace(); } // 4. create SharedKey instance SharedKey sk = new KeyBuilders.SharedKeyBuilder(sharedBy, sharedWith).key(KEY_NAME).build(); // 5. get the key String response = null; try { response = atClient.get(sk).get(); } catch (InterruptedException | ExecutionException e) { System.err.println(\u0026#34;Failed to get key \u0026#34; + e); e.printStackTrace(); } System.out.println(response); Deleting a SharedKey Example #\rLearn how to delete a SharedKey from your secondary server. You can only delete SharedKeys that are sharedBy and created by you. If it is a SharedKey created by another atSign, you cannot delete it because it lives on their secondary server.\n// 1. establish constants String ROOT_URL = \u0026#34;root.atsign.org:64\u0026#34;; String ATSIGN_STR_SHARED_BY = \u0026#34;@bob\u0026#34;; // my atSign (sharedBy) String ATSIGN_STR_SHARED_WITH = \u0026#34;@alice\u0026#34;; // other atSign (sharedWith) boolean VERBOSE = true; String KEY_NAME = \u0026#34;test\u0026#34;; // 2. create AtSign objects AtSign sharedBy = new AtSign(ATSIGN_STR_SHARED_BY); AtSign sharedWith = new AtSign(ATSIGN_STR_SHARED_WITH); // 3. atClient factory method AtClient atClient = null; try { atClient = AtClient.withRemoteSecondary(ROOT_URL, sharedBy, VERBOSE); } catch (AtException e) { System.err.println(\u0026#34;Failed to create AtClient instance \u0026#34; + e); e.printStackTrace(); } // 4. create SharedKey instance SharedKey sk = new KeyBuilders.SharedKeyBuilder(sharedBy, sharedWith).key(KEY_NAME).build(); // 5. delete the key String response = null; try { response = atClient.delete(sk).get(); } catch (InterruptedException | ExecutionException e) { System.err.println(e); e.printStackTrace(); } System.out.println(response); "
      })
      .add(
      {
        id: 106,
        href: "/contribute/this-site/shortcodes/spacing/",
        title: "Spacing",
        description: "Spacing shortcodes used in atsign.dev",
        content: "\nLine Break (br) #\rInsert a simple line break.\nExample #\rSome text here and then a line break.\nSome text here {{\u0026lt;br\u0026gt;}} and then a line break. "
      })
      .add(
      {
        id: 107,
        href: "/contribute/this-site/shortcodes/superscripts/",
        title: "Superscripts",
        description: "Superscripts with links",
        content: "\nSuperscripts (sup) #\rSuperscript go next to text.\nExample #\rRegular TextSuperscript\nRegular Text{{\u0026lt;sup\u0026gt;}}Superscript{{\u0026lt;/sup\u0026gt;}} "
      })
      .add(
      {
        id: 108,
        href: "/contribute/this-site/shortcodes/youtube/",
        title: "YouTube",
        description: "A YouTube video",
        content: "\nYouTube Video #\rAdd YouTube videos to your content with the YouTube shortcode.\nTo get the correct YouTube URL:\n Go to the YouTube video Ensure it is set to public or unlisted (so that it can be accessed with the link) Click \u0026ldquo;Share\u0026rdquo; Select the \u0026ldquo;Embed\u0026rdquo; option Copy the URL from the Embed from the generated html code (see image below)  Example #\rYouTube video:\n  {{\u0026lt;youtubesrc=\u0026#34;https://www.youtube.com/embed/Z-5sZ2UQn0I\u0026#34;\u0026gt;}} "
      })
      ;

  search.addEventListener('input', show_results, true);

  function show_results(){
    const maxResult = 5;
    var searchQuery = this.value;
    var results = index.search(searchQuery, {limit: maxResult, enrich: true});

    // flatten results since index.search() returns results for each indexed field
    const flatResults = new Map(); // keyed by href to dedupe results
    for (const result of results.flatMap(r => r.result)) {
      if (flatResults.has(result.doc.href)) continue;
      flatResults.set(result.doc.href, result.doc);
    }

    suggestions.innerHTML = "";
    suggestions.classList.remove('d-none');

    // inform user that no results were found
    if (flatResults.size === 0 && searchQuery) {
      const noResultsMessage = document.createElement('div')
      noResultsMessage.innerHTML = `No results for "<strong>${searchQuery}</strong>"`
      noResultsMessage.classList.add("suggestion__no-results");
      suggestions.appendChild(noResultsMessage);
      return;
    }

    // construct a list of suggestions
    for(const [href, doc] of flatResults) {
        const entry = document.createElement('div');
        suggestions.appendChild(entry);

        const a = document.createElement('a');
        a.href = href;
        entry.appendChild(a);

        const title = document.createElement('span');
        title.textContent = doc.title;
        title.classList.add("suggestion__title");
        a.appendChild(title);

        const description = document.createElement('span');
        description.textContent = doc.description;
        description.classList.add("suggestion__description");
        a.appendChild(description);

        suggestions.appendChild(entry);

        if(suggestions.childElementCount == maxResult) break;
    }
  }
}());
